/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConditionObservation struct {
}

type ConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type DatabaseIamBindingObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`
}

type DatabaseIamBindingParameters struct {

	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	Database *string `json:"database" tf:"database,omitempty"`

	// +kubebuilder:validation:Required
	Instance *string `json:"instance" tf:"instance,omitempty"`

	// +kubebuilder:validation:Required
	Members []*string `json:"members" tf:"members,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// DatabaseIamBindingSpec defines the desired state of DatabaseIamBinding
type DatabaseIamBindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatabaseIamBindingParameters `json:"forProvider"`
}

// DatabaseIamBindingStatus defines the observed state of DatabaseIamBinding.
type DatabaseIamBindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatabaseIamBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseIamBinding is the Schema for the DatabaseIamBindings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type DatabaseIamBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatabaseIamBindingSpec   `json:"spec"`
	Status            DatabaseIamBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatabaseIamBindingList contains a list of DatabaseIamBindings
type DatabaseIamBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatabaseIamBinding `json:"items"`
}

// Repository type metadata.
var (
	DatabaseIamBinding_Kind             = "DatabaseIamBinding"
	DatabaseIamBinding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DatabaseIamBinding_Kind}.String()
	DatabaseIamBinding_KindAPIVersion   = DatabaseIamBinding_Kind + "." + CRDGroupVersion.String()
	DatabaseIamBinding_GroupVersionKind = CRDGroupVersion.WithKind(DatabaseIamBinding_Kind)
)

func init() {
	SchemeBuilder.Register(&DatabaseIamBinding{}, &DatabaseIamBindingList{})
}
