/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EntitiesObservation struct {
}

type EntitiesParameters struct {

	// A collection of value synonyms. For example, if the entity type is vegetable, and value is scallions, a synonym
	// could be green onions.
	// For KIND_LIST entity types:
	// * This collection must contain exactly one synonym equal to value.
	// +kubebuilder:validation:Required
	Synonyms []*string `json:"synonyms" tf:"synonyms,omitempty"`

	// The primary value associated with this entity entry. For example, if the entity type is vegetable, the value
	// could be scallions.
	// For KIND_MAP entity types:
	// * A reference value to be used in place of synonyms.
	// For KIND_LIST entity types:
	// * A string that can contain references to other entity types (with or without aliases).
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type EntityTypeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type EntityTypeParameters struct {

	// The name of this entity type to be displayed on the console.
	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// Enables fuzzy entity extraction during classification.
	// +kubebuilder:validation:Optional
	EnableFuzzyExtraction *bool `json:"enableFuzzyExtraction,omitempty" tf:"enable_fuzzy_extraction,omitempty"`

	// The collection of entity entries associated with the entity type.
	// +kubebuilder:validation:Optional
	Entities []EntitiesParameters `json:"entities,omitempty" tf:"entities,omitempty"`

	// Indicates the kind of entity type.
	// * KIND_MAP: Map entity types allow mapping of a group of synonyms to a reference value.
	// * KIND_LIST: List entity types contain a set of entries that do not map to reference values. However, list entity
	// types can contain references to other entity types (with or without aliases).
	// * KIND_REGEXP: Regexp entity types allow to specify regular expressions in entries values. Possible values: ["KIND_MAP", "KIND_LIST", "KIND_REGEXP"]
	// +kubebuilder:validation:Required
	Kind *string `json:"kind" tf:"kind,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

// EntityTypeSpec defines the desired state of EntityType
type EntityTypeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EntityTypeParameters `json:"forProvider"`
}

// EntityTypeStatus defines the observed state of EntityType.
type EntityTypeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EntityTypeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EntityType is the Schema for the EntityTypes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type EntityType struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EntityTypeSpec   `json:"spec"`
	Status            EntityTypeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EntityTypeList contains a list of EntityTypes
type EntityTypeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EntityType `json:"items"`
}

// Repository type metadata.
var (
	EntityType_Kind             = "EntityType"
	EntityType_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EntityType_Kind}.String()
	EntityType_KindAPIVersion   = EntityType_Kind + "." + CRDGroupVersion.String()
	EntityType_GroupVersionKind = CRDGroupVersion.WithKind(EntityType_Kind)
)

func init() {
	SchemeBuilder.Register(&EntityType{}, &EntityTypeList{})
}
