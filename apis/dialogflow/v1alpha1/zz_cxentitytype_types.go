/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CxEntityTypeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CxEntityTypeParameters struct {

	// Represents kinds of entities.
	// * AUTO_EXPANSION_MODE_UNSPECIFIED: Auto expansion disabled for the entity.
	// * AUTO_EXPANSION_MODE_DEFAULT: Allows an agent to recognize values that have not been explicitly listed in the entity. Possible values: ["AUTO_EXPANSION_MODE_DEFAULT", "AUTO_EXPANSION_MODE_UNSPECIFIED"]
	// +kubebuilder:validation:Optional
	AutoExpansionMode *string `json:"autoExpansionMode,omitempty" tf:"auto_expansion_mode,omitempty"`

	// The human-readable name of the entity type, unique within the agent.
	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// Enables fuzzy entity extraction during classification.
	// +kubebuilder:validation:Optional
	EnableFuzzyExtraction *bool `json:"enableFuzzyExtraction,omitempty" tf:"enable_fuzzy_extraction,omitempty"`

	// The collection of entity entries associated with the entity type.
	// +kubebuilder:validation:Required
	Entities []EntitiesParameters `json:"entities" tf:"entities,omitempty"`

	// Collection of exceptional words and phrases that shouldn't be matched. For example, if you have a size entity type with entry giant(an adjective), you might consider adding giants(a noun) as an exclusion.
	// If the kind of entity type is KIND_MAP, then the phrases specified by entities and excluded phrases should be mutually exclusive.
	// +kubebuilder:validation:Optional
	ExcludedPhrases []ExcludedPhrasesParameters `json:"excludedPhrases,omitempty" tf:"excluded_phrases,omitempty"`

	// Indicates whether the entity type can be automatically expanded.
	// * KIND_MAP: Map entity types allow mapping of a group of synonyms to a canonical value.
	// * KIND_LIST: List entity types contain a set of entries that do not map to canonical values. However, list entity types can contain references to other entity types (with or without aliases).
	// * KIND_REGEXP: Regexp entity types allow to specify regular expressions in entries values. Possible values: ["KIND_MAP", "KIND_LIST", "KIND_REGEXP"]
	// +kubebuilder:validation:Required
	Kind *string `json:"kind" tf:"kind,omitempty"`

	// The language of the following fields in entityType:
	// EntityType.entities.value
	// EntityType.entities.synonyms
	// EntityType.excluded_phrases.value
	// If not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.
	// +kubebuilder:validation:Optional
	LanguageCode *string `json:"languageCode,omitempty" tf:"language_code,omitempty"`

	// The agent to create a entity type for.
	// Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.
	// +kubebuilder:validation:Optional
	Parent *string `json:"parent,omitempty" tf:"parent,omitempty"`

	// Indicates whether parameters of the entity type should be redacted in log. If redaction is enabled, page parameters and intent parameters referring to the entity type will be replaced by parameter name when logging.
	// +kubebuilder:validation:Optional
	Redact *bool `json:"redact,omitempty" tf:"redact,omitempty"`
}

type EntitiesObservation struct {
}

type EntitiesParameters struct {

	// A collection of value synonyms. For example, if the entity type is vegetable, and value is scallions, a synonym could be green onions.
	// For KIND_LIST entity types: This collection must contain exactly one synonym equal to value.
	// +kubebuilder:validation:Optional
	Synonyms []*string `json:"synonyms,omitempty" tf:"synonyms,omitempty"`

	// The primary value associated with this entity entry. For example, if the entity type is vegetable, the value could be scallions.
	// For KIND_MAP entity types: A canonical value to be used in place of synonyms.
	// For KIND_LIST entity types: A string that can contain references to other entity types (with or without aliases).
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ExcludedPhrasesObservation struct {
}

type ExcludedPhrasesParameters struct {

	// The word or phrase to be excluded.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// CxEntityTypeSpec defines the desired state of CxEntityType
type CxEntityTypeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CxEntityTypeParameters `json:"forProvider"`
}

// CxEntityTypeStatus defines the observed state of CxEntityType.
type CxEntityTypeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CxEntityTypeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CxEntityType is the Schema for the CxEntityTypes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type CxEntityType struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CxEntityTypeSpec   `json:"spec"`
	Status            CxEntityTypeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CxEntityTypeList contains a list of CxEntityTypes
type CxEntityTypeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CxEntityType `json:"items"`
}

// Repository type metadata.
var (
	CxEntityType_Kind             = "CxEntityType"
	CxEntityType_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CxEntityType_Kind}.String()
	CxEntityType_KindAPIVersion   = CxEntityType_Kind + "." + CRDGroupVersion.String()
	CxEntityType_GroupVersionKind = CRDGroupVersion.WithKind(CxEntityType_Kind)
)

func init() {
	SchemeBuilder.Register(&CxEntityType{}, &CxEntityTypeList{})
}
