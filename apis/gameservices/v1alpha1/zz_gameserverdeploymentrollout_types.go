/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GameServerConfigOverridesObservation struct {
}

type GameServerConfigOverridesParameters struct {

	// Version of the configuration.
	// +kubebuilder:validation:Optional
	ConfigVersion *string `json:"configVersion,omitempty" tf:"config_version,omitempty"`

	// Selection by realms.
	// +kubebuilder:validation:Optional
	RealmsSelector []RealmsSelectorParameters `json:"realmsSelector,omitempty" tf:"realms_selector,omitempty"`
}

type GameServerDeploymentRolloutObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type GameServerDeploymentRolloutParameters struct {

	// This field points to the game server config that is
	// applied by default to all realms and clusters. For example,
	//
	// 'projects/my-project/locations/global/gameServerDeployments/my-game/configs/my-config'.
	// +kubebuilder:validation:Required
	DefaultGameServerConfig *string `json:"defaultGameServerConfig" tf:"default_game_server_config,omitempty"`

	// The deployment to rollout the new config to. Only 1 rollout must be associated with each deployment.
	// +kubebuilder:validation:Required
	DeploymentID *string `json:"deploymentId" tf:"deployment_id,omitempty"`

	// The game_server_config_overrides contains the per game server config
	// overrides. The overrides are processed in the order they are listed. As
	// soon as a match is found for a cluster, the rest of the list is not
	// processed.
	// +kubebuilder:validation:Optional
	GameServerConfigOverrides []GameServerConfigOverridesParameters `json:"gameServerConfigOverrides,omitempty" tf:"game_server_config_overrides,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type RealmsSelectorObservation struct {
}

type RealmsSelectorParameters struct {

	// List of realms to match against.
	// +kubebuilder:validation:Optional
	Realms []*string `json:"realms,omitempty" tf:"realms,omitempty"`
}

// GameServerDeploymentRolloutSpec defines the desired state of GameServerDeploymentRollout
type GameServerDeploymentRolloutSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GameServerDeploymentRolloutParameters `json:"forProvider"`
}

// GameServerDeploymentRolloutStatus defines the observed state of GameServerDeploymentRollout.
type GameServerDeploymentRolloutStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GameServerDeploymentRolloutObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GameServerDeploymentRollout is the Schema for the GameServerDeploymentRollouts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type GameServerDeploymentRollout struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GameServerDeploymentRolloutSpec   `json:"spec"`
	Status            GameServerDeploymentRolloutStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GameServerDeploymentRolloutList contains a list of GameServerDeploymentRollouts
type GameServerDeploymentRolloutList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GameServerDeploymentRollout `json:"items"`
}

// Repository type metadata.
var (
	GameServerDeploymentRollout_Kind             = "GameServerDeploymentRollout"
	GameServerDeploymentRollout_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GameServerDeploymentRollout_Kind}.String()
	GameServerDeploymentRollout_KindAPIVersion   = GameServerDeploymentRollout_Kind + "." + CRDGroupVersion.String()
	GameServerDeploymentRollout_GroupVersionKind = CRDGroupVersion.WithKind(GameServerDeploymentRollout_Kind)
)

func init() {
	SchemeBuilder.Register(&GameServerDeploymentRollout{}, &GameServerDeploymentRolloutList{})
}
