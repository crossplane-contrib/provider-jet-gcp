/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessLevelConditionDevicePolicyObservation struct {
}

type AccessLevelConditionDevicePolicyParameters struct {

	// A list of allowed device management levels.
	// An empty list allows all management levels. Possible values: ["MANAGEMENT_UNSPECIFIED", "NONE", "BASIC", "COMPLETE"]
	// +kubebuilder:validation:Optional
	AllowedDeviceManagementLevels []*string `json:"allowedDeviceManagementLevels,omitempty" tf:"allowed_device_management_levels,omitempty"`

	// A list of allowed encryptions statuses.
	// An empty list allows all statuses. Possible values: ["ENCRYPTION_UNSPECIFIED", "ENCRYPTION_UNSUPPORTED", "UNENCRYPTED", "ENCRYPTED"]
	// +kubebuilder:validation:Optional
	AllowedEncryptionStatuses []*string `json:"allowedEncryptionStatuses,omitempty" tf:"allowed_encryption_statuses,omitempty"`

	// A list of allowed OS versions.
	// An empty list allows all types and all versions.
	// +kubebuilder:validation:Optional
	OsConstraints []DevicePolicyOsConstraintsParameters `json:"osConstraints,omitempty" tf:"os_constraints,omitempty"`

	// Whether the device needs to be approved by the customer admin.
	// +kubebuilder:validation:Optional
	RequireAdminApproval *bool `json:"requireAdminApproval,omitempty" tf:"require_admin_approval,omitempty"`

	// Whether the device needs to be corp owned.
	// +kubebuilder:validation:Optional
	RequireCorpOwned *bool `json:"requireCorpOwned,omitempty" tf:"require_corp_owned,omitempty"`

	// Whether or not screenlock is required for the DevicePolicy
	// to be true. Defaults to false.
	// +kubebuilder:validation:Optional
	RequireScreenLock *bool `json:"requireScreenLock,omitempty" tf:"require_screen_lock,omitempty"`
}

type AccessLevelConditionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AccessLevelConditionParameters struct {

	// The name of the Access Level to add this condition to.
	// +kubebuilder:validation:Required
	AccessLevel *string `json:"accessLevel" tf:"access_level,omitempty"`

	// Device specific restrictions, all restrictions must hold for
	// the Condition to be true. If not specified, all devices are
	// allowed.
	// +kubebuilder:validation:Optional
	DevicePolicy []AccessLevelConditionDevicePolicyParameters `json:"devicePolicy,omitempty" tf:"device_policy,omitempty"`

	// A list of CIDR block IP subnetwork specification. May be IPv4
	// or IPv6.
	// Note that for a CIDR IP address block, the specified IP address
	// portion must be properly truncated (i.e. all the host bits must
	// be zero) or the input is considered malformed. For example,
	// "192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,
	// for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"
	// is not. The originating IP of a request must be in one of the
	// listed subnets in order for this Condition to be true.
	// If empty, all IP addresses are allowed.
	// +kubebuilder:validation:Optional
	IPSubnetworks []*string `json:"ipSubnetworks,omitempty" tf:"ip_subnetworks,omitempty"`

	// An allowed list of members (users, service accounts).
	// Using groups is not supported yet.
	//
	// The signed-in user originating the request must be a part of one
	// of the provided members. If not specified, a request may come
	// from any user (logged in/not logged in, not present in any
	// groups, etc.).
	// Formats: 'user:{emailid}', 'serviceAccount:{emailid}'
	// +kubebuilder:validation:Optional
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// Whether to negate the Condition. If true, the Condition becomes
	// a NAND over its non-empty fields, each field must be false for
	// the Condition overall to be satisfied. Defaults to false.
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// The request must originate from one of the provided
	// countries/regions.
	// Format: A valid ISO 3166-1 alpha-2 code.
	// +kubebuilder:validation:Optional
	Regions []*string `json:"regions,omitempty" tf:"regions,omitempty"`

	// A list of other access levels defined in the same Policy,
	// referenced by resource name. Referencing an AccessLevel which
	// does not exist is an error. All access levels listed must be
	// granted for the Condition to be true.
	// Format: accessPolicies/{policy_id}/accessLevels/{short_name}
	// +kubebuilder:validation:Optional
	RequiredAccessLevels []*string `json:"requiredAccessLevels,omitempty" tf:"required_access_levels,omitempty"`
}

type DevicePolicyOsConstraintsObservation struct {
}

type DevicePolicyOsConstraintsParameters struct {

	// The minimum allowed OS version. If not set, any version
	// of this OS satisfies the constraint.
	// Format: "major.minor.patch" such as "10.5.301", "9.2.1".
	// +kubebuilder:validation:Optional
	MinimumVersion *string `json:"minimumVersion,omitempty" tf:"minimum_version,omitempty"`

	// The operating system type of the device. Possible values: ["OS_UNSPECIFIED", "DESKTOP_MAC", "DESKTOP_WINDOWS", "DESKTOP_LINUX", "DESKTOP_CHROME_OS", "ANDROID", "IOS"]
	// +kubebuilder:validation:Required
	OsType *string `json:"osType" tf:"os_type,omitempty"`
}

// AccessLevelConditionSpec defines the desired state of AccessLevelCondition
type AccessLevelConditionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccessLevelConditionParameters `json:"forProvider"`
}

// AccessLevelConditionStatus defines the observed state of AccessLevelCondition.
type AccessLevelConditionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccessLevelConditionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccessLevelCondition is the Schema for the AccessLevelConditions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type AccessLevelCondition struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccessLevelConditionSpec   `json:"spec"`
	Status            AccessLevelConditionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccessLevelConditionList contains a list of AccessLevelConditions
type AccessLevelConditionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessLevelCondition `json:"items"`
}

// Repository type metadata.
var (
	AccessLevelCondition_Kind             = "AccessLevelCondition"
	AccessLevelCondition_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccessLevelCondition_Kind}.String()
	AccessLevelCondition_KindAPIVersion   = AccessLevelCondition_Kind + "." + CRDGroupVersion.String()
	AccessLevelCondition_GroupVersionKind = CRDGroupVersion.WithKind(AccessLevelCondition_Kind)
)

func init() {
	SchemeBuilder.Register(&AccessLevelCondition{}, &AccessLevelConditionList{})
}
