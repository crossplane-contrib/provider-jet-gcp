/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessPolicyIAMPolicyObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AccessPolicyIAMPolicyParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	PolicyData *string `json:"policyData" tf:"policy_data,omitempty"`
}

// AccessPolicyIAMPolicySpec defines the desired state of AccessPolicyIAMPolicy
type AccessPolicyIAMPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccessPolicyIAMPolicyParameters `json:"forProvider"`
}

// AccessPolicyIAMPolicyStatus defines the observed state of AccessPolicyIAMPolicy.
type AccessPolicyIAMPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccessPolicyIAMPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccessPolicyIAMPolicy is the Schema for the AccessPolicyIAMPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type AccessPolicyIAMPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccessPolicyIAMPolicySpec   `json:"spec"`
	Status            AccessPolicyIAMPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccessPolicyIAMPolicyList contains a list of AccessPolicyIAMPolicys
type AccessPolicyIAMPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessPolicyIAMPolicy `json:"items"`
}

// Repository type metadata.
var (
	AccessPolicyIAMPolicy_Kind             = "AccessPolicyIAMPolicy"
	AccessPolicyIAMPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccessPolicyIAMPolicy_Kind}.String()
	AccessPolicyIAMPolicy_KindAPIVersion   = AccessPolicyIAMPolicy_Kind + "." + CRDGroupVersion.String()
	AccessPolicyIAMPolicy_GroupVersionKind = CRDGroupVersion.WithKind(AccessPolicyIAMPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&AccessPolicyIAMPolicy{}, &AccessPolicyIAMPolicyList{})
}
