/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HaVPNGatewayObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`
}

type HaVPNGatewayParameters struct {

	// An optional description of this resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035.  Specifically, the name must be 1-63 characters long and
	// match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means
	// the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The network this VPN gateway is accepting traffic for.
	// +kubebuilder:validation:Required
	Network *string `json:"network" tf:"network,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The region this gateway should sit in.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A list of interfaces on this VPN gateway.
	// +kubebuilder:validation:Optional
	VPNInterfaces []VPNInterfacesParameters `json:"vpnInterfaces,omitempty" tf:"vpn_interfaces,omitempty"`
}

type VPNInterfacesObservation struct {
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`
}

type VPNInterfacesParameters struct {

	// The numeric ID of this VPN gateway interface.
	// +kubebuilder:validation:Optional
	ID *int64 `json:"id,omitempty" tf:"id,omitempty"`

	// URL of the interconnect attachment resource. When the value
	// of this field is present, the VPN Gateway will be used for
	// IPsec-encrypted Cloud Interconnect; all Egress or Ingress
	// traffic for this VPN Gateway interface will go through the
	// specified interconnect attachment resource.
	//
	// Not currently available publicly.
	// +kubebuilder:validation:Optional
	InterconnectAttachment *string `json:"interconnectAttachment,omitempty" tf:"interconnect_attachment,omitempty"`
}

// HaVPNGatewaySpec defines the desired state of HaVPNGateway
type HaVPNGatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HaVPNGatewayParameters `json:"forProvider"`
}

// HaVPNGatewayStatus defines the observed state of HaVPNGateway.
type HaVPNGatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HaVPNGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HaVPNGateway is the Schema for the HaVPNGateways API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type HaVPNGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HaVPNGatewaySpec   `json:"spec"`
	Status            HaVPNGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HaVPNGatewayList contains a list of HaVPNGateways
type HaVPNGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HaVPNGateway `json:"items"`
}

// Repository type metadata.
var (
	HaVPNGateway_Kind             = "HaVPNGateway"
	HaVPNGateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HaVPNGateway_Kind}.String()
	HaVPNGateway_KindAPIVersion   = HaVPNGateway_Kind + "." + CRDGroupVersion.String()
	HaVPNGateway_GroupVersionKind = CRDGroupVersion.WithKind(HaVPNGateway_Kind)
)

func init() {
	SchemeBuilder.Register(&HaVPNGateway{}, &HaVPNGatewayList{})
}
