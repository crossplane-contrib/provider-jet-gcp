/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SharedVPCServiceProjectObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SharedVPCServiceProjectParameters struct {

	// The ID of a host project to associate.
	// +kubebuilder:validation:Required
	HostProject *string `json:"hostProject" tf:"host_project,omitempty"`

	// The ID of the project that will serve as a Shared VPC service project.
	// +kubebuilder:validation:Required
	ServiceProject *string `json:"serviceProject" tf:"service_project,omitempty"`
}

// SharedVPCServiceProjectSpec defines the desired state of SharedVPCServiceProject
type SharedVPCServiceProjectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SharedVPCServiceProjectParameters `json:"forProvider"`
}

// SharedVPCServiceProjectStatus defines the observed state of SharedVPCServiceProject.
type SharedVPCServiceProjectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SharedVPCServiceProjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SharedVPCServiceProject is the Schema for the SharedVPCServiceProjects API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type SharedVPCServiceProject struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SharedVPCServiceProjectSpec   `json:"spec"`
	Status            SharedVPCServiceProjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SharedVPCServiceProjectList contains a list of SharedVPCServiceProjects
type SharedVPCServiceProjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SharedVPCServiceProject `json:"items"`
}

// Repository type metadata.
var (
	SharedVPCServiceProject_Kind             = "SharedVPCServiceProject"
	SharedVPCServiceProject_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SharedVPCServiceProject_Kind}.String()
	SharedVPCServiceProject_KindAPIVersion   = SharedVPCServiceProject_Kind + "." + CRDGroupVersion.String()
	SharedVPCServiceProject_GroupVersionKind = CRDGroupVersion.WithKind(SharedVPCServiceProject_Kind)
)

func init() {
	SchemeBuilder.Register(&SharedVPCServiceProject{}, &SharedVPCServiceProjectList{})
}
