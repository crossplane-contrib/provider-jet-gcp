/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ImageIamMemberConditionObservation struct {
}

type ImageIamMemberConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type ImageIamMemberObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ImageIamMemberParameters struct {

	// +kubebuilder:validation:Optional
	Condition []ImageIamMemberConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	Image *string `json:"image" tf:"image,omitempty"`

	// +kubebuilder:validation:Required
	Member *string `json:"member" tf:"member,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// ImageIamMemberSpec defines the desired state of ImageIamMember
type ImageIamMemberSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageIamMemberParameters `json:"forProvider"`
}

// ImageIamMemberStatus defines the observed state of ImageIamMember.
type ImageIamMemberStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageIamMemberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ImageIamMember is the Schema for the ImageIamMembers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type ImageIamMember struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImageIamMemberSpec   `json:"spec"`
	Status            ImageIamMemberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageIamMemberList contains a list of ImageIamMembers
type ImageIamMemberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImageIamMember `json:"items"`
}

// Repository type metadata.
var (
	ImageIamMember_Kind             = "ImageIamMember"
	ImageIamMember_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ImageIamMember_Kind}.String()
	ImageIamMember_KindAPIVersion   = ImageIamMember_Kind + "." + CRDGroupVersion.String()
	ImageIamMember_GroupVersionKind = CRDGroupVersion.WithKind(ImageIamMember_Kind)
)

func init() {
	SchemeBuilder.Register(&ImageIamMember{}, &ImageIamMemberList{})
}
