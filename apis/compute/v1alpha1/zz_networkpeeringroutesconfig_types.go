/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkPeeringRoutesConfigObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NetworkPeeringRoutesConfigParameters struct {

	// Whether to export the custom routes to the peer network.
	// +kubebuilder:validation:Required
	ExportCustomRoutes *bool `json:"exportCustomRoutes" tf:"export_custom_routes,omitempty"`

	// Whether to import the custom routes to the peer network.
	// +kubebuilder:validation:Required
	ImportCustomRoutes *bool `json:"importCustomRoutes" tf:"import_custom_routes,omitempty"`

	// The name of the primary network for the peering.
	// +kubebuilder:validation:Required
	Network *string `json:"network" tf:"network,omitempty"`

	// Name of the peering.
	// +kubebuilder:validation:Required
	Peering *string `json:"peering" tf:"peering,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

// NetworkPeeringRoutesConfigSpec defines the desired state of NetworkPeeringRoutesConfig
type NetworkPeeringRoutesConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkPeeringRoutesConfigParameters `json:"forProvider"`
}

// NetworkPeeringRoutesConfigStatus defines the observed state of NetworkPeeringRoutesConfig.
type NetworkPeeringRoutesConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkPeeringRoutesConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkPeeringRoutesConfig is the Schema for the NetworkPeeringRoutesConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type NetworkPeeringRoutesConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkPeeringRoutesConfigSpec   `json:"spec"`
	Status            NetworkPeeringRoutesConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkPeeringRoutesConfigList contains a list of NetworkPeeringRoutesConfigs
type NetworkPeeringRoutesConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkPeeringRoutesConfig `json:"items"`
}

// Repository type metadata.
var (
	NetworkPeeringRoutesConfig_Kind             = "NetworkPeeringRoutesConfig"
	NetworkPeeringRoutesConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkPeeringRoutesConfig_Kind}.String()
	NetworkPeeringRoutesConfig_KindAPIVersion   = NetworkPeeringRoutesConfig_Kind + "." + CRDGroupVersion.String()
	NetworkPeeringRoutesConfig_GroupVersionKind = CRDGroupVersion.WithKind(NetworkPeeringRoutesConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkPeeringRoutesConfig{}, &NetworkPeeringRoutesConfigList{})
}
