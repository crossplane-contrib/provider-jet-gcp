/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SharedVPCHostProjectObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SharedVPCHostProjectParameters struct {

	// The ID of the project that will serve as a Shared VPC host project
	// +kubebuilder:validation:Required
	Project *string `json:"project" tf:"project,omitempty"`
}

// SharedVPCHostProjectSpec defines the desired state of SharedVPCHostProject
type SharedVPCHostProjectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SharedVPCHostProjectParameters `json:"forProvider"`
}

// SharedVPCHostProjectStatus defines the observed state of SharedVPCHostProject.
type SharedVPCHostProjectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SharedVPCHostProjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SharedVPCHostProject is the Schema for the SharedVPCHostProjects API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type SharedVPCHostProject struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SharedVPCHostProjectSpec   `json:"spec"`
	Status            SharedVPCHostProjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SharedVPCHostProjectList contains a list of SharedVPCHostProjects
type SharedVPCHostProjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SharedVPCHostProject `json:"items"`
}

// Repository type metadata.
var (
	SharedVPCHostProject_Kind             = "SharedVPCHostProject"
	SharedVPCHostProject_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SharedVPCHostProject_Kind}.String()
	SharedVPCHostProject_KindAPIVersion   = SharedVPCHostProject_Kind + "." + CRDGroupVersion.String()
	SharedVPCHostProject_GroupVersionKind = CRDGroupVersion.WithKind(SharedVPCHostProject_Kind)
)

func init() {
	SchemeBuilder.Register(&SharedVPCHostProject{}, &SharedVPCHostProjectList{})
}
