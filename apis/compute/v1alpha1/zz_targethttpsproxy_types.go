/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TargetHTTPSProxyObservation struct {
	CreationTimestamp *string `json:"creationTimestamp,omitempty" tf:"creation_timestamp,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ProxyID *float64 `json:"proxyId,omitempty" tf:"proxy_id,omitempty"`

	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`
}

type TargetHTTPSProxyParameters struct {

	// An optional description of this resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// This field only applies when the forwarding rule that references
	// this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.
	// +kubebuilder:validation:Optional
	ProxyBind *bool `json:"proxyBind,omitempty" tf:"proxy_bind,omitempty"`

	// Specifies the QUIC override policy for this resource. This determines
	// whether the load balancer will attempt to negotiate QUIC with clients
	// or not. Can specify one of NONE, ENABLE, or DISABLE. If NONE is
	// specified, uses the QUIC policy with no user overrides, which is
	// equivalent to DISABLE. Default value: "NONE" Possible values: ["NONE", "ENABLE", "DISABLE"]
	// +kubebuilder:validation:Optional
	QuicOverride *string `json:"quicOverride,omitempty" tf:"quic_override,omitempty"`

	// A list of SslCertificate resources that are used to authenticate
	// connections between users and the load balancer. At least one SSL
	// certificate must be specified.
	// +kubebuilder:validation:Required
	SSLCertificates []*string `json:"sslCertificates" tf:"ssl_certificates,omitempty"`

	// A reference to the SslPolicy resource that will be associated with
	// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
	// resource will not have any SSL policy configured.
	// +kubebuilder:validation:Optional
	SSLPolicy *string `json:"sslPolicy,omitempty" tf:"ssl_policy,omitempty"`

	// A reference to the UrlMap resource that defines the mapping from URL
	// to the BackendService.
	// +kubebuilder:validation:Required
	URLMap *string `json:"urlMap" tf:"url_map,omitempty"`
}

// TargetHTTPSProxySpec defines the desired state of TargetHTTPSProxy
type TargetHTTPSProxySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TargetHTTPSProxyParameters `json:"forProvider"`
}

// TargetHTTPSProxyStatus defines the observed state of TargetHTTPSProxy.
type TargetHTTPSProxyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TargetHTTPSProxyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TargetHTTPSProxy is the Schema for the TargetHTTPSProxys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type TargetHTTPSProxy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TargetHTTPSProxySpec   `json:"spec"`
	Status            TargetHTTPSProxyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TargetHTTPSProxyList contains a list of TargetHTTPSProxys
type TargetHTTPSProxyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TargetHTTPSProxy `json:"items"`
}

// Repository type metadata.
var (
	TargetHTTPSProxy_Kind             = "TargetHTTPSProxy"
	TargetHTTPSProxy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TargetHTTPSProxy_Kind}.String()
	TargetHTTPSProxy_KindAPIVersion   = TargetHTTPSProxy_Kind + "." + CRDGroupVersion.String()
	TargetHTTPSProxy_GroupVersionKind = CRDGroupVersion.WithKind(TargetHTTPSProxy_Kind)
)

func init() {
	SchemeBuilder.Register(&TargetHTTPSProxy{}, &TargetHTTPSProxyList{})
}
