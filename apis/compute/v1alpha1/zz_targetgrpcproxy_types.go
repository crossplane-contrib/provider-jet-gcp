/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TargetGrpcProxyObservation struct {
	CreationTimestamp *string `json:"creationTimestamp,omitempty" tf:"creation_timestamp,omitempty"`

	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`

	SelfLinkWithID *string `json:"selfLinkWithId,omitempty" tf:"self_link_with_id,omitempty"`
}

type TargetGrpcProxyParameters struct {

	// An optional description of this resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the resource. Provided by the client when the resource
	// is created. The name must be 1-63 characters long, and comply
	// with RFC1035. Specifically, the name must be 1-63 characters long
	// and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which
	// means the first character must be a lowercase letter, and all
	// following characters must be a dash, lowercase letter, or digit,
	// except the last character, which cannot be a dash.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// URL to the UrlMap resource that defines the mapping from URL to
	// the BackendService. The protocol field in the BackendService
	// must be set to GRPC.
	// +kubebuilder:validation:Optional
	URLMap *string `json:"urlMap,omitempty" tf:"url_map,omitempty"`

	// If true, indicates that the BackendServices referenced by
	// the urlMap may be accessed by gRPC applications without using
	// a sidecar proxy. This will enable configuration checks on urlMap
	// and its referenced BackendServices to not allow unsupported features.
	// A gRPC application must use "xds:///" scheme in the target URI
	// of the service it is connecting to. If false, indicates that the
	// BackendServices referenced by the urlMap will be accessed by gRPC
	// applications via a sidecar proxy. In this case, a gRPC application
	// must not use "xds:///" scheme in the target URI of the service
	// it is connecting to
	// +kubebuilder:validation:Optional
	ValidateForProxyless *bool `json:"validateForProxyless,omitempty" tf:"validate_for_proxyless,omitempty"`
}

// TargetGrpcProxySpec defines the desired state of TargetGrpcProxy
type TargetGrpcProxySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TargetGrpcProxyParameters `json:"forProvider"`
}

// TargetGrpcProxyStatus defines the observed state of TargetGrpcProxy.
type TargetGrpcProxyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TargetGrpcProxyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TargetGrpcProxy is the Schema for the TargetGrpcProxys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type TargetGrpcProxy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TargetGrpcProxySpec   `json:"spec"`
	Status            TargetGrpcProxyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TargetGrpcProxyList contains a list of TargetGrpcProxys
type TargetGrpcProxyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TargetGrpcProxy `json:"items"`
}

// Repository type metadata.
var (
	TargetGrpcProxy_Kind             = "TargetGrpcProxy"
	TargetGrpcProxy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TargetGrpcProxy_Kind}.String()
	TargetGrpcProxy_KindAPIVersion   = TargetGrpcProxy_Kind + "." + CRDGroupVersion.String()
	TargetGrpcProxy_GroupVersionKind = CRDGroupVersion.WithKind(TargetGrpcProxy_Kind)
)

func init() {
	SchemeBuilder.Register(&TargetGrpcProxy{}, &TargetGrpcProxyList{})
}
