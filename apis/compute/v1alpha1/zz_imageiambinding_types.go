/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ImageIamBindingConditionObservation struct {
}

type ImageIamBindingConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type ImageIamBindingObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ImageIamBindingParameters struct {

	// +kubebuilder:validation:Optional
	Condition []ImageIamBindingConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	Image *string `json:"image" tf:"image,omitempty"`

	// +kubebuilder:validation:Required
	Members []*string `json:"members" tf:"members,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// ImageIamBindingSpec defines the desired state of ImageIamBinding
type ImageIamBindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageIamBindingParameters `json:"forProvider"`
}

// ImageIamBindingStatus defines the observed state of ImageIamBinding.
type ImageIamBindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageIamBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ImageIamBinding is the Schema for the ImageIamBindings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type ImageIamBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImageIamBindingSpec   `json:"spec"`
	Status            ImageIamBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageIamBindingList contains a list of ImageIamBindings
type ImageIamBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImageIamBinding `json:"items"`
}

// Repository type metadata.
var (
	ImageIamBinding_Kind             = "ImageIamBinding"
	ImageIamBinding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ImageIamBinding_Kind}.String()
	ImageIamBinding_KindAPIVersion   = ImageIamBinding_Kind + "." + CRDGroupVersion.String()
	ImageIamBinding_GroupVersionKind = CRDGroupVersion.WithKind(ImageIamBinding_Kind)
)

func init() {
	SchemeBuilder.Register(&ImageIamBinding{}, &ImageIamBindingList{})
}
