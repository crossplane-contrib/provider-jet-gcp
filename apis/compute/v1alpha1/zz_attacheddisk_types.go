/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttachedDiskObservation struct {
}

type AttachedDiskParameters struct {

	// Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disks-x, where x is a number assigned by Google Compute Engine.
	// +kubebuilder:validation:Optional
	DeviceName *string `json:"deviceName,omitempty" tf:"device_name,omitempty"`

	// name or self_link of the disk that will be attached.
	// +kubebuilder:validation:Required
	Disk *string `json:"disk" tf:"disk,omitempty"`

	// name or self_link of the compute instance that the disk will be attached to. If the self_link is provided then zone and project are extracted from the self link. If only the name is used then zone and project must be defined as properties on the resource or provider.
	// +kubebuilder:validation:Required
	Instance *string `json:"instance" tf:"instance,omitempty"`

	// The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The project that the referenced compute instance is a part of. If instance is referenced by its self_link the project defined in the link will take precedence.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The zone that the referenced compute instance is located within. If instance is referenced by its self_link the zone defined in the link will take precedence.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// AttachedDiskSpec defines the desired state of AttachedDisk
type AttachedDiskSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AttachedDiskParameters `json:"forProvider"`
}

// AttachedDiskStatus defines the observed state of AttachedDisk.
type AttachedDiskStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AttachedDiskObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AttachedDisk is the Schema for the AttachedDisks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type AttachedDisk struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AttachedDiskSpec   `json:"spec"`
	Status            AttachedDiskStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AttachedDiskList contains a list of AttachedDisks
type AttachedDiskList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AttachedDisk `json:"items"`
}

// Repository type metadata.
var (
	AttachedDisk_Kind             = "AttachedDisk"
	AttachedDisk_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AttachedDisk_Kind}.String()
	AttachedDisk_KindAPIVersion   = AttachedDisk_Kind + "." + CRDGroupVersion.String()
	AttachedDisk_GroupVersionKind = CRDGroupVersion.WithKind(AttachedDisk_Kind)
)

func init() {
	SchemeBuilder.Register(&AttachedDisk{}, &AttachedDiskList{})
}
