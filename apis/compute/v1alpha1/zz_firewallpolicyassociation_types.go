/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FirewallPolicyAssociationObservation struct {
	ShortName *string `json:"shortName,omitempty" tf:"short_name,omitempty"`
}

type FirewallPolicyAssociationParameters struct {

	// The target that the firewall policy is attached to.
	// +kubebuilder:validation:Required
	AttachmentTarget *string `json:"attachmentTarget" tf:"attachment_target,omitempty"`

	// The firewall policy ID of the association.
	// +kubebuilder:validation:Required
	FirewallPolicy *string `json:"firewallPolicy" tf:"firewall_policy,omitempty"`

	// The name for an association.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// FirewallPolicyAssociationSpec defines the desired state of FirewallPolicyAssociation
type FirewallPolicyAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FirewallPolicyAssociationParameters `json:"forProvider"`
}

// FirewallPolicyAssociationStatus defines the observed state of FirewallPolicyAssociation.
type FirewallPolicyAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FirewallPolicyAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallPolicyAssociation is the Schema for the FirewallPolicyAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type FirewallPolicyAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FirewallPolicyAssociationSpec   `json:"spec"`
	Status            FirewallPolicyAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallPolicyAssociationList contains a list of FirewallPolicyAssociations
type FirewallPolicyAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FirewallPolicyAssociation `json:"items"`
}

// Repository type metadata.
var (
	FirewallPolicyAssociation_Kind             = "FirewallPolicyAssociation"
	FirewallPolicyAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FirewallPolicyAssociation_Kind}.String()
	FirewallPolicyAssociation_KindAPIVersion   = FirewallPolicyAssociation_Kind + "." + CRDGroupVersion.String()
	FirewallPolicyAssociation_GroupVersionKind = CRDGroupVersion.WithKind(FirewallPolicyAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&FirewallPolicyAssociation{}, &FirewallPolicyAssociationList{})
}
