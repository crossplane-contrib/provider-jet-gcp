/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DiskResourcePolicyAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DiskResourcePolicyAttachmentParameters struct {

	// The name of the disk in which the resource policies are attached to.
	// +kubebuilder:validation:Required
	Disk *string `json:"disk" tf:"disk,omitempty"`

	// The resource policy to be attached to the disk for scheduling snapshot
	// creation. Do not specify the self link.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// A reference to the zone where the disk resides.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// DiskResourcePolicyAttachmentSpec defines the desired state of DiskResourcePolicyAttachment
type DiskResourcePolicyAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DiskResourcePolicyAttachmentParameters `json:"forProvider"`
}

// DiskResourcePolicyAttachmentStatus defines the observed state of DiskResourcePolicyAttachment.
type DiskResourcePolicyAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DiskResourcePolicyAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DiskResourcePolicyAttachment is the Schema for the DiskResourcePolicyAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type DiskResourcePolicyAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DiskResourcePolicyAttachmentSpec   `json:"spec"`
	Status            DiskResourcePolicyAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DiskResourcePolicyAttachmentList contains a list of DiskResourcePolicyAttachments
type DiskResourcePolicyAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DiskResourcePolicyAttachment `json:"items"`
}

// Repository type metadata.
var (
	DiskResourcePolicyAttachment_Kind             = "DiskResourcePolicyAttachment"
	DiskResourcePolicyAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DiskResourcePolicyAttachment_Kind}.String()
	DiskResourcePolicyAttachment_KindAPIVersion   = DiskResourcePolicyAttachment_Kind + "." + CRDGroupVersion.String()
	DiskResourcePolicyAttachment_GroupVersionKind = CRDGroupVersion.WithKind(DiskResourcePolicyAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&DiskResourcePolicyAttachment{}, &DiskResourcePolicyAttachmentList{})
}
