/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExternalVpnGatewayObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`
}

type ExternalVpnGatewayParameters struct {

	// An optional description of this resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of interfaces on this external VPN gateway.
	// +kubebuilder:validation:Optional
	Interface []InterfaceParameters `json:"interface,omitempty" tf:"interface,omitempty"`

	// Name of the resource. Provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035.  Specifically, the name must be 1-63 characters long and
	// match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means
	// the first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Indicates the redundancy type of this external VPN gateway Possible values: ["FOUR_IPS_REDUNDANCY", "SINGLE_IP_INTERNALLY_REDUNDANT", "TWO_IPS_REDUNDANCY"]
	// +kubebuilder:validation:Optional
	RedundancyType *string `json:"redundancyType,omitempty" tf:"redundancy_type,omitempty"`
}

type InterfaceObservation struct {
}

type InterfaceParameters struct {

	// The numeric ID for this interface. Allowed values are based on the redundancy type
	// of this external VPN gateway
	// * '0 - SINGLE_IP_INTERNALLY_REDUNDANT'
	// * '0, 1 - TWO_IPS_REDUNDANCY'
	// * '0, 1, 2, 3 - FOUR_IPS_REDUNDANCY'
	// +kubebuilder:validation:Optional
	ID *int64 `json:"id,omitempty" tf:"id,omitempty"`

	// IP address of the interface in the external VPN gateway.
	// Only IPv4 is supported. This IP address can be either from
	// your on-premise gateway or another Cloud provider's VPN gateway,
	// it cannot be an IP address from Google Compute Engine.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`
}

// ExternalVpnGatewaySpec defines the desired state of ExternalVpnGateway
type ExternalVpnGatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ExternalVpnGatewayParameters `json:"forProvider"`
}

// ExternalVpnGatewayStatus defines the observed state of ExternalVpnGateway.
type ExternalVpnGatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ExternalVpnGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ExternalVpnGateway is the Schema for the ExternalVpnGateways API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type ExternalVpnGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ExternalVpnGatewaySpec   `json:"spec"`
	Status            ExternalVpnGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExternalVpnGatewayList contains a list of ExternalVpnGateways
type ExternalVpnGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ExternalVpnGateway `json:"items"`
}

// Repository type metadata.
var (
	ExternalVpnGateway_Kind             = "ExternalVpnGateway"
	ExternalVpnGateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ExternalVpnGateway_Kind}.String()
	ExternalVpnGateway_KindAPIVersion   = ExternalVpnGateway_Kind + "." + CRDGroupVersion.String()
	ExternalVpnGateway_GroupVersionKind = CRDGroupVersion.WithKind(ExternalVpnGateway_Kind)
)

func init() {
	SchemeBuilder.Register(&ExternalVpnGateway{}, &ExternalVpnGatewayList{})
}
