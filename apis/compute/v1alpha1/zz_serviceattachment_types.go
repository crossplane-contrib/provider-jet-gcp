/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectedEndpointsObservation struct {
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ConnectedEndpointsParameters struct {
}

type ConsumerAcceptListsObservation struct {
}

type ConsumerAcceptListsParameters struct {

	// The number of consumer forwarding rules the consumer project can
	// create.
	// +kubebuilder:validation:Required
	ConnectionLimit *int64 `json:"connectionLimit" tf:"connection_limit,omitempty"`

	// A project that is allowed to connect to this service attachment.
	// +kubebuilder:validation:Required
	ProjectIDOrNum *string `json:"projectIdOrNum" tf:"project_id_or_num,omitempty"`
}

type ServiceAttachmentObservation struct {
	ConnectedEndpoints []ConnectedEndpointsObservation `json:"connectedEndpoints,omitempty" tf:"connected_endpoints,omitempty"`

	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`
}

type ServiceAttachmentParameters struct {

	// The connection preference to use for this service attachment. Valid
	// values include "ACCEPT_AUTOMATIC", "ACCEPT_MANUAL".
	// +kubebuilder:validation:Required
	ConnectionPreference *string `json:"connectionPreference" tf:"connection_preference,omitempty"`

	// An array of projects that are allowed to connect to this service
	// attachment.
	// +kubebuilder:validation:Optional
	ConsumerAcceptLists []ConsumerAcceptListsParameters `json:"consumerAcceptLists,omitempty" tf:"consumer_accept_lists,omitempty"`

	// An array of projects that are not allowed to connect to this service
	// attachment.
	// +kubebuilder:validation:Optional
	ConsumerRejectLists []*string `json:"consumerRejectLists,omitempty" tf:"consumer_reject_lists,omitempty"`

	// An optional description of this resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// If true, enable the proxy protocol which is for supplying client TCP/IP
	// address data in TCP connections that traverse proxies on their way to
	// destination servers.
	// +kubebuilder:validation:Required
	EnableProxyProtocol *bool `json:"enableProxyProtocol" tf:"enable_proxy_protocol,omitempty"`

	// An array of subnets that is provided for NAT in this service attachment.
	// +kubebuilder:validation:Required
	NATSubnets []*string `json:"natSubnets" tf:"nat_subnets,omitempty"`

	// Name of the resource. The name must be 1-63 characters long, and
	// comply with RFC1035. Specifically, the name must be 1-63 characters
	// long and match the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?'
	// which means the first character must be a lowercase letter, and all
	// following characters must be a dash, lowercase letter, or digit,
	// except the last character, which cannot be a dash.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// URL of the region where the resource resides.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The URL of a forwarding rule that represents the service identified by
	// this service attachment.
	// +kubebuilder:validation:Required
	TargetService *string `json:"targetService" tf:"target_service,omitempty"`
}

// ServiceAttachmentSpec defines the desired state of ServiceAttachment
type ServiceAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceAttachmentParameters `json:"forProvider"`
}

// ServiceAttachmentStatus defines the observed state of ServiceAttachment.
type ServiceAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceAttachment is the Schema for the ServiceAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type ServiceAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceAttachmentSpec   `json:"spec"`
	Status            ServiceAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceAttachmentList contains a list of ServiceAttachments
type ServiceAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceAttachment `json:"items"`
}

// Repository type metadata.
var (
	ServiceAttachment_Kind             = "ServiceAttachment"
	ServiceAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceAttachment_Kind}.String()
	ServiceAttachment_KindAPIVersion   = ServiceAttachment_Kind + "." + CRDGroupVersion.String()
	ServiceAttachment_GroupVersionKind = CRDGroupVersion.WithKind(ServiceAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceAttachment{}, &ServiceAttachmentList{})
}
