/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RegionDiskResourcePolicyAttachmentObservation struct {
}

type RegionDiskResourcePolicyAttachmentParameters struct {

	// The name of the regional disk in which the resource policies are attached to.
	// +kubebuilder:validation:Required
	Disk *string `json:"disk" tf:"disk,omitempty"`

	// The resource policy to be attached to the disk for scheduling snapshot
	// creation. Do not specify the self link.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// A reference to the region where the disk resides.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// RegionDiskResourcePolicyAttachmentSpec defines the desired state of RegionDiskResourcePolicyAttachment
type RegionDiskResourcePolicyAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RegionDiskResourcePolicyAttachmentParameters `json:"forProvider"`
}

// RegionDiskResourcePolicyAttachmentStatus defines the observed state of RegionDiskResourcePolicyAttachment.
type RegionDiskResourcePolicyAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RegionDiskResourcePolicyAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RegionDiskResourcePolicyAttachment is the Schema for the RegionDiskResourcePolicyAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type RegionDiskResourcePolicyAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RegionDiskResourcePolicyAttachmentSpec   `json:"spec"`
	Status            RegionDiskResourcePolicyAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RegionDiskResourcePolicyAttachmentList contains a list of RegionDiskResourcePolicyAttachments
type RegionDiskResourcePolicyAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RegionDiskResourcePolicyAttachment `json:"items"`
}

// Repository type metadata.
var (
	RegionDiskResourcePolicyAttachment_Kind             = "RegionDiskResourcePolicyAttachment"
	RegionDiskResourcePolicyAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RegionDiskResourcePolicyAttachment_Kind}.String()
	RegionDiskResourcePolicyAttachment_KindAPIVersion   = RegionDiskResourcePolicyAttachment_Kind + "." + CRDGroupVersion.String()
	RegionDiskResourcePolicyAttachment_GroupVersionKind = CRDGroupVersion.WithKind(RegionDiskResourcePolicyAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&RegionDiskResourcePolicyAttachment{}, &RegionDiskResourcePolicyAttachmentList{})
}
