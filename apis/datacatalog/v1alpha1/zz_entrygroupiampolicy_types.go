/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EntryGroupIAMPolicyObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EntryGroupIAMPolicyParameters struct {

	// +kubebuilder:validation:Required
	EntryGroup *string `json:"entryGroup" tf:"entry_group,omitempty"`

	// +kubebuilder:validation:Required
	PolicyData *string `json:"policyData" tf:"policy_data,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// EntryGroupIAMPolicySpec defines the desired state of EntryGroupIAMPolicy
type EntryGroupIAMPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EntryGroupIAMPolicyParameters `json:"forProvider"`
}

// EntryGroupIAMPolicyStatus defines the observed state of EntryGroupIAMPolicy.
type EntryGroupIAMPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EntryGroupIAMPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EntryGroupIAMPolicy is the Schema for the EntryGroupIAMPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type EntryGroupIAMPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EntryGroupIAMPolicySpec   `json:"spec"`
	Status            EntryGroupIAMPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EntryGroupIAMPolicyList contains a list of EntryGroupIAMPolicys
type EntryGroupIAMPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EntryGroupIAMPolicy `json:"items"`
}

// Repository type metadata.
var (
	EntryGroupIAMPolicy_Kind             = "EntryGroupIAMPolicy"
	EntryGroupIAMPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EntryGroupIAMPolicy_Kind}.String()
	EntryGroupIAMPolicy_KindAPIVersion   = EntryGroupIAMPolicy_Kind + "." + CRDGroupVersion.String()
	EntryGroupIAMPolicy_GroupVersionKind = CRDGroupVersion.WithKind(EntryGroupIAMPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&EntryGroupIAMPolicy{}, &EntryGroupIAMPolicyList{})
}
