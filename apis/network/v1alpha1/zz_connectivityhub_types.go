/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectivityHubObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RoutingVpcs []RoutingVpcsObservation `json:"routingVpcs,omitempty" tf:"routing_vpcs,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	UniqueID *string `json:"uniqueId,omitempty" tf:"unique_id,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type ConnectivityHubParameters struct {

	// An optional description of the hub.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Immutable. The name of the hub. Hub names must be unique. They use the following form: `projects/{project_number}/locations/global/hubs/{hub_id}`
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The project for the resource
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type RoutingVpcsObservation struct {
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type RoutingVpcsParameters struct {
}

// ConnectivityHubSpec defines the desired state of ConnectivityHub
type ConnectivityHubSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConnectivityHubParameters `json:"forProvider"`
}

// ConnectivityHubStatus defines the observed state of ConnectivityHub.
type ConnectivityHubStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConnectivityHubObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectivityHub is the Schema for the ConnectivityHubs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type ConnectivityHub struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConnectivityHubSpec   `json:"spec"`
	Status            ConnectivityHubStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectivityHubList contains a list of ConnectivityHubs
type ConnectivityHubList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConnectivityHub `json:"items"`
}

// Repository type metadata.
var (
	ConnectivityHub_Kind             = "ConnectivityHub"
	ConnectivityHub_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConnectivityHub_Kind}.String()
	ConnectivityHub_KindAPIVersion   = ConnectivityHub_Kind + "." + CRDGroupVersion.String()
	ConnectivityHub_GroupVersionKind = CRDGroupVersion.WithKind(ConnectivityHub_Kind)
)

func init() {
	SchemeBuilder.Register(&ConnectivityHub{}, &ConnectivityHubList{})
}
