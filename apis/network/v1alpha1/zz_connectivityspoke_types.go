/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectivitySpokeObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	UniqueID *string `json:"uniqueId,omitempty" tf:"unique_id,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type ConnectivitySpokeParameters struct {

	// An optional description of the spoke.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Immutable. The URI of the hub that this spoke is attached to.
	// +kubebuilder:validation:Required
	Hub *string `json:"hub" tf:"hub,omitempty"`

	// Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
	// +kubebuilder:validation:Optional
	LinkedInterconnectAttachments []LinkedInterconnectAttachmentsParameters `json:"linkedInterconnectAttachments,omitempty" tf:"linked_interconnect_attachments,omitempty"`

	// The URIs of linked Router appliance resources
	// +kubebuilder:validation:Optional
	LinkedRouterApplianceInstances []LinkedRouterApplianceInstancesParameters `json:"linkedRouterApplianceInstances,omitempty" tf:"linked_router_appliance_instances,omitempty"`

	// The URIs of linked VPN tunnel resources
	// +kubebuilder:validation:Optional
	LinkedVPNTunnels []LinkedVPNTunnelsParameters `json:"linkedVpnTunnels,omitempty" tf:"linked_vpn_tunnels,omitempty"`

	// The location for the resource
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// Immutable. The name of the spoke. Spoke names must be unique.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The project for the resource
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

type InstancesObservation struct {
}

type InstancesParameters struct {

	// The IP address on the VM to use for peering.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The URI of the virtual machine resource
	// +kubebuilder:validation:Optional
	VirtualMachine *string `json:"virtualMachine,omitempty" tf:"virtual_machine,omitempty"`
}

type LinkedInterconnectAttachmentsObservation struct {
}

type LinkedInterconnectAttachmentsParameters struct {

	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	// +kubebuilder:validation:Required
	SiteToSiteDataTransfer *bool `json:"siteToSiteDataTransfer" tf:"site_to_site_data_transfer,omitempty"`

	// The URIs of linked interconnect attachment resources
	// +kubebuilder:validation:Required
	Uris []*string `json:"uris" tf:"uris,omitempty"`
}

type LinkedRouterApplianceInstancesObservation struct {
}

type LinkedRouterApplianceInstancesParameters struct {

	// The list of router appliance instances
	// +kubebuilder:validation:Required
	Instances []InstancesParameters `json:"instances" tf:"instances,omitempty"`

	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	// +kubebuilder:validation:Required
	SiteToSiteDataTransfer *bool `json:"siteToSiteDataTransfer" tf:"site_to_site_data_transfer,omitempty"`
}

type LinkedVPNTunnelsObservation struct {
}

type LinkedVPNTunnelsParameters struct {

	// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
	// +kubebuilder:validation:Required
	SiteToSiteDataTransfer *bool `json:"siteToSiteDataTransfer" tf:"site_to_site_data_transfer,omitempty"`

	// The URIs of linked VPN tunnel resources.
	// +kubebuilder:validation:Required
	Uris []*string `json:"uris" tf:"uris,omitempty"`
}

// ConnectivitySpokeSpec defines the desired state of ConnectivitySpoke
type ConnectivitySpokeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConnectivitySpokeParameters `json:"forProvider"`
}

// ConnectivitySpokeStatus defines the observed state of ConnectivitySpoke.
type ConnectivitySpokeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConnectivitySpokeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectivitySpoke is the Schema for the ConnectivitySpokes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type ConnectivitySpoke struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConnectivitySpokeSpec   `json:"spec"`
	Status            ConnectivitySpokeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectivitySpokeList contains a list of ConnectivitySpokes
type ConnectivitySpokeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConnectivitySpoke `json:"items"`
}

// Repository type metadata.
var (
	ConnectivitySpoke_Kind             = "ConnectivitySpoke"
	ConnectivitySpoke_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConnectivitySpoke_Kind}.String()
	ConnectivitySpoke_KindAPIVersion   = ConnectivitySpoke_Kind + "." + CRDGroupVersion.String()
	ConnectivitySpoke_GroupVersionKind = CRDGroupVersion.WithKind(ConnectivitySpoke_Kind)
)

func init() {
	SchemeBuilder.Register(&ConnectivitySpoke{}, &ConnectivitySpokeList{})
}
