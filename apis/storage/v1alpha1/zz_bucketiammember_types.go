/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketIamMemberConditionObservation struct {
}

type BucketIamMemberConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type BucketIamMemberObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`
}

type BucketIamMemberParameters struct {

	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// +kubebuilder:validation:Optional
	Condition []BucketIamMemberConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	Member *string `json:"member" tf:"member,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// BucketIamMemberSpec defines the desired state of BucketIamMember
type BucketIamMemberSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketIamMemberParameters `json:"forProvider"`
}

// BucketIamMemberStatus defines the observed state of BucketIamMember.
type BucketIamMemberStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketIamMemberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BucketIamMember is the Schema for the BucketIamMembers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type BucketIamMember struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BucketIamMemberSpec   `json:"spec"`
	Status            BucketIamMemberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketIamMemberList contains a list of BucketIamMembers
type BucketIamMemberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketIamMember `json:"items"`
}

// Repository type metadata.
var (
	BucketIamMember_Kind             = "BucketIamMember"
	BucketIamMember_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketIamMember_Kind}.String()
	BucketIamMember_KindAPIVersion   = BucketIamMember_Kind + "." + CRDGroupVersion.String()
	BucketIamMember_GroupVersionKind = CRDGroupVersion.WithKind(BucketIamMember_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketIamMember{}, &BucketIamMemberList{})
}
