/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketAclObservation struct {
}

type BucketAclParameters struct {

	// The name of the bucket it applies to.
	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// Configure this ACL to be the default ACL.
	// +kubebuilder:validation:Optional
	DefaultACL *string `json:"defaultAcl,omitempty" tf:"default_acl,omitempty"`

	// The canned GCS ACL to apply. Must be set if role_entity is not.
	// +kubebuilder:validation:Optional
	PredefinedACL *string `json:"predefinedAcl,omitempty" tf:"predefined_acl,omitempty"`

	// List of role/entity pairs in the form ROLE:entity. See GCS Bucket ACL documentation  for more details. Must be set if predefined_acl is not.
	// +kubebuilder:validation:Optional
	RoleEntity []*string `json:"roleEntity,omitempty" tf:"role_entity,omitempty"`
}

// BucketAclSpec defines the desired state of BucketAcl
type BucketAclSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketAclParameters `json:"forProvider"`
}

// BucketAclStatus defines the observed state of BucketAcl.
type BucketAclStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketAclObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BucketAcl is the Schema for the BucketAcls API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type BucketAcl struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BucketAclSpec   `json:"spec"`
	Status            BucketAclStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketAclList contains a list of BucketAcls
type BucketAclList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketAcl `json:"items"`
}

// Repository type metadata.
var (
	BucketAcl_Kind             = "BucketAcl"
	BucketAcl_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketAcl_Kind}.String()
	BucketAcl_KindAPIVersion   = BucketAcl_Kind + "." + CRDGroupVersion.String()
	BucketAcl_GroupVersionKind = CRDGroupVersion.WithKind(BucketAcl_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketAcl{}, &BucketAclList{})
}
