/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketIAMPolicyObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BucketIAMPolicyParameters struct {

	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// +kubebuilder:validation:Required
	PolicyData *string `json:"policyData" tf:"policy_data,omitempty"`
}

// BucketIAMPolicySpec defines the desired state of BucketIAMPolicy
type BucketIAMPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketIAMPolicyParameters `json:"forProvider"`
}

// BucketIAMPolicyStatus defines the observed state of BucketIAMPolicy.
type BucketIAMPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketIAMPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BucketIAMPolicy is the Schema for the BucketIAMPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type BucketIAMPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BucketIAMPolicySpec   `json:"spec"`
	Status            BucketIAMPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketIAMPolicyList contains a list of BucketIAMPolicys
type BucketIAMPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketIAMPolicy `json:"items"`
}

// Repository type metadata.
var (
	BucketIAMPolicy_Kind             = "BucketIAMPolicy"
	BucketIAMPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketIAMPolicy_Kind}.String()
	BucketIAMPolicy_KindAPIVersion   = BucketIAMPolicy_Kind + "." + CRDGroupVersion.String()
	BucketIAMPolicy_GroupVersionKind = CRDGroupVersion.WithKind(BucketIAMPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketIAMPolicy{}, &BucketIAMPolicyList{})
}
