/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsAccessKeyObservation struct {
}

type AwsAccessKeyParameters struct {

	// AWS Key ID.
	// +kubebuilder:validation:Required
	AccessKeyIDSecretRef v1.SecretKeySelector `json:"accessKeyIdSecretRef" tf:"-"`

	// AWS Secret Access Key.
	// +kubebuilder:validation:Required
	SecretAccessKeySecretRef v1.SecretKeySelector `json:"secretAccessKeySecretRef" tf:"-"`
}

type AwsS3DataSourceObservation struct {
}

type AwsS3DataSourceParameters struct {

	// AWS credentials block.
	// +kubebuilder:validation:Required
	AwsAccessKey []AwsAccessKeyParameters `json:"awsAccessKey" tf:"aws_access_key,omitempty"`

	// S3 Bucket name.
	// +kubebuilder:validation:Required
	BucketName *string `json:"bucketName" tf:"bucket_name,omitempty"`
}

type AzureBlobStorageDataSourceObservation struct {
}

type AzureBlobStorageDataSourceParameters struct {

	// Credentials used to authenticate API requests to Azure.
	// +kubebuilder:validation:Required
	AzureCredentials []AzureCredentialsParameters `json:"azureCredentials" tf:"azure_credentials,omitempty"`

	// The container to transfer from the Azure Storage account.
	// +kubebuilder:validation:Required
	Container *string `json:"container" tf:"container,omitempty"`

	// Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The name of the Azure Storage account.
	// +kubebuilder:validation:Required
	StorageAccount *string `json:"storageAccount" tf:"storage_account,omitempty"`
}

type AzureCredentialsObservation struct {
}

type AzureCredentialsParameters struct {

	// Azure shared access signature.
	// +kubebuilder:validation:Required
	SasTokenSecretRef v1.SecretKeySelector `json:"sasTokenSecretRef" tf:"-"`
}

type GcsDataSinkObservation struct {
}

type GcsDataSinkParameters struct {

	// Google Cloud Storage bucket name.
	// +kubebuilder:validation:Required
	BucketName *string `json:"bucketName" tf:"bucket_name,omitempty"`

	// Google Cloud Storage path in bucket to transfer
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type GcsDataSourceObservation struct {
}

type GcsDataSourceParameters struct {

	// Google Cloud Storage bucket name.
	// +kubebuilder:validation:Required
	BucketName *string `json:"bucketName" tf:"bucket_name,omitempty"`

	// Google Cloud Storage path in bucket to transfer
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type HTTPDataSourceObservation struct {
}

type HTTPDataSourceParameters struct {

	// The URL that points to the file that stores the object list entries. This file must allow public access. Currently, only URLs with HTTP and HTTPS schemes are supported.
	// +kubebuilder:validation:Required
	ListURL *string `json:"listUrl" tf:"list_url,omitempty"`
}

type ObjectConditionsObservation struct {
}

type ObjectConditionsParameters struct {

	// exclude_prefixes must follow the requirements described for include_prefixes.
	// +kubebuilder:validation:Optional
	ExcludePrefixes []*string `json:"excludePrefixes,omitempty" tf:"exclude_prefixes,omitempty"`

	// If include_refixes is specified, objects that satisfy the object conditions must have names that start with one of the include_prefixes and that do not start with any of the exclude_prefixes. If include_prefixes is not specified, all objects except those that have names starting with one of the exclude_prefixes must satisfy the object conditions.
	// +kubebuilder:validation:Optional
	IncludePrefixes []*string `json:"includePrefixes,omitempty" tf:"include_prefixes,omitempty"`

	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	// +kubebuilder:validation:Optional
	MaxTimeElapsedSinceLastModification *string `json:"maxTimeElapsedSinceLastModification,omitempty" tf:"max_time_elapsed_since_last_modification,omitempty"`

	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	// +kubebuilder:validation:Optional
	MinTimeElapsedSinceLastModification *string `json:"minTimeElapsedSinceLastModification,omitempty" tf:"min_time_elapsed_since_last_modification,omitempty"`
}

type ScheduleEndDateObservation struct {
}

type ScheduleEndDateParameters struct {

	// Day of month. Must be from 1 to 31 and valid for the year and month.
	// +kubebuilder:validation:Required
	Day *int64 `json:"day" tf:"day,omitempty"`

	// Month of year. Must be from 1 to 12.
	// +kubebuilder:validation:Required
	Month *int64 `json:"month" tf:"month,omitempty"`

	// Year of date. Must be from 1 to 9999.
	// +kubebuilder:validation:Required
	Year *int64 `json:"year" tf:"year,omitempty"`
}

type ScheduleObservation struct {
}

type ScheduleParameters struct {

	// The last day the recurring transfer will be run. If schedule_end_date is the same as schedule_start_date, the transfer will be executed only once.
	// +kubebuilder:validation:Optional
	ScheduleEndDate []ScheduleEndDateParameters `json:"scheduleEndDate,omitempty" tf:"schedule_end_date,omitempty"`

	// The first day the recurring transfer is scheduled to run. If schedule_start_date is in the past, the transfer will run for the first time on the following day.
	// +kubebuilder:validation:Required
	ScheduleStartDate []ScheduleStartDateParameters `json:"scheduleStartDate" tf:"schedule_start_date,omitempty"`

	// The time in UTC at which the transfer will be scheduled to start in a day. Transfers may start later than this time. If not specified, recurring and one-time transfers that are scheduled to run today will run immediately; recurring transfers that are scheduled to run on a future date will start at approximately midnight UTC on that date. Note that when configuring a transfer with the Cloud Platform Console, the transfer's start time in a day is specified in your local timezone.
	// +kubebuilder:validation:Optional
	StartTimeOfDay []StartTimeOfDayParameters `json:"startTimeOfDay,omitempty" tf:"start_time_of_day,omitempty"`
}

type ScheduleStartDateObservation struct {
}

type ScheduleStartDateParameters struct {

	// Day of month. Must be from 1 to 31 and valid for the year and month.
	// +kubebuilder:validation:Required
	Day *int64 `json:"day" tf:"day,omitempty"`

	// Month of year. Must be from 1 to 12.
	// +kubebuilder:validation:Required
	Month *int64 `json:"month" tf:"month,omitempty"`

	// Year of date. Must be from 1 to 9999.
	// +kubebuilder:validation:Required
	Year *int64 `json:"year" tf:"year,omitempty"`
}

type StartTimeOfDayObservation struct {
}

type StartTimeOfDayParameters struct {

	// Hours of day in 24 hour format. Should be from 0 to 23.
	// +kubebuilder:validation:Required
	Hours *int64 `json:"hours" tf:"hours,omitempty"`

	// Minutes of hour of day. Must be from 0 to 59.
	// +kubebuilder:validation:Required
	Minutes *int64 `json:"minutes" tf:"minutes,omitempty"`

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	// +kubebuilder:validation:Required
	Nanos *int64 `json:"nanos" tf:"nanos,omitempty"`

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// +kubebuilder:validation:Required
	Seconds *int64 `json:"seconds" tf:"seconds,omitempty"`
}

type TransferJobObservation struct {
	CreationTime *string `json:"creationTime,omitempty" tf:"creation_time,omitempty"`

	DeletionTime *string `json:"deletionTime,omitempty" tf:"deletion_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LastModificationTime *string `json:"lastModificationTime,omitempty" tf:"last_modification_time,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TransferJobParameters struct {

	// Unique description to identify the Transfer Job.
	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// The project in which the resource belongs. If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Schedule specification defining when the Transfer Job should be scheduled to start, end and what time to run.
	// +kubebuilder:validation:Required
	Schedule []ScheduleParameters `json:"schedule" tf:"schedule,omitempty"`

	// Status of the job. Default: ENABLED. NOTE: The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Transfer specification.
	// +kubebuilder:validation:Required
	TransferSpec []TransferSpecParameters `json:"transferSpec" tf:"transfer_spec,omitempty"`
}

type TransferOptionsObservation struct {
}

type TransferOptionsParameters struct {

	// Whether objects should be deleted from the source after they are transferred to the sink. Note that this option and delete_objects_unique_in_sink are mutually exclusive.
	// +kubebuilder:validation:Optional
	DeleteObjectsFromSourceAfterTransfer *bool `json:"deleteObjectsFromSourceAfterTransfer,omitempty" tf:"delete_objects_from_source_after_transfer,omitempty"`

	// Whether objects that exist only in the sink should be deleted. Note that this option and delete_objects_from_source_after_transfer are mutually exclusive.
	// +kubebuilder:validation:Optional
	DeleteObjectsUniqueInSink *bool `json:"deleteObjectsUniqueInSink,omitempty" tf:"delete_objects_unique_in_sink,omitempty"`

	// Whether overwriting objects that already exist in the sink is allowed.
	// +kubebuilder:validation:Optional
	OverwriteObjectsAlreadyExistingInSink *bool `json:"overwriteObjectsAlreadyExistingInSink,omitempty" tf:"overwrite_objects_already_existing_in_sink,omitempty"`
}

type TransferSpecObservation struct {
}

type TransferSpecParameters struct {

	// An AWS S3 data source.
	// +kubebuilder:validation:Optional
	AwsS3DataSource []AwsS3DataSourceParameters `json:"awsS3DataSource,omitempty" tf:"aws_s3_data_source,omitempty"`

	// An Azure Blob Storage data source.
	// +kubebuilder:validation:Optional
	AzureBlobStorageDataSource []AzureBlobStorageDataSourceParameters `json:"azureBlobStorageDataSource,omitempty" tf:"azure_blob_storage_data_source,omitempty"`

	// A Google Cloud Storage data sink.
	// +kubebuilder:validation:Optional
	GcsDataSink []GcsDataSinkParameters `json:"gcsDataSink,omitempty" tf:"gcs_data_sink,omitempty"`

	// A Google Cloud Storage data source.
	// +kubebuilder:validation:Optional
	GcsDataSource []GcsDataSourceParameters `json:"gcsDataSource,omitempty" tf:"gcs_data_source,omitempty"`

	// A HTTP URL data source.
	// +kubebuilder:validation:Optional
	HTTPDataSource []HTTPDataSourceParameters `json:"httpDataSource,omitempty" tf:"http_data_source,omitempty"`

	// Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects' last_modification_time do not exclude objects in a data sink.
	// +kubebuilder:validation:Optional
	ObjectConditions []ObjectConditionsParameters `json:"objectConditions,omitempty" tf:"object_conditions,omitempty"`

	// Characteristics of how to treat files from datasource and sink during job. If the option delete_objects_unique_in_sink is true, object conditions based on objects' last_modification_time are ignored and do not exclude objects in a data source or a data sink.
	// +kubebuilder:validation:Optional
	TransferOptions []TransferOptionsParameters `json:"transferOptions,omitempty" tf:"transfer_options,omitempty"`
}

// TransferJobSpec defines the desired state of TransferJob
type TransferJobSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TransferJobParameters `json:"forProvider"`
}

// TransferJobStatus defines the observed state of TransferJob.
type TransferJobStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TransferJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TransferJob is the Schema for the TransferJobs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type TransferJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TransferJobSpec   `json:"spec"`
	Status            TransferJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransferJobList contains a list of TransferJobs
type TransferJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransferJob `json:"items"`
}

// Repository type metadata.
var (
	TransferJob_Kind             = "TransferJob"
	TransferJob_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TransferJob_Kind}.String()
	TransferJob_KindAPIVersion   = TransferJob_Kind + "." + CRDGroupVersion.String()
	TransferJob_GroupVersionKind = CRDGroupVersion.WithKind(TransferJob_Kind)
)

func init() {
	SchemeBuilder.Register(&TransferJob{}, &TransferJobList{})
}
