/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllowObservation struct {
}

type AllowParameters struct {

	// The policy allows or denies all values.
	// +kubebuilder:validation:Optional
	All *bool `json:"all,omitempty" tf:"all,omitempty"`

	// The policy can define specific values that are allowed or denied.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type BooleanPolicyObservation struct {
}

type BooleanPolicyParameters struct {

	// If true, then the Policy is enforced. If false, then any configuration is acceptable.
	// +kubebuilder:validation:Required
	Enforced *bool `json:"enforced" tf:"enforced,omitempty"`
}

type DenyObservation struct {
}

type DenyParameters struct {

	// The policy allows or denies all values.
	// +kubebuilder:validation:Optional
	All *bool `json:"all,omitempty" tf:"all,omitempty"`

	// The policy can define specific values that are allowed or denied.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type FolderOrganizationPolicyObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type FolderOrganizationPolicyParameters struct {

	// A boolean policy is a constraint that is either enforced or not.
	// +kubebuilder:validation:Optional
	BooleanPolicy []BooleanPolicyParameters `json:"booleanPolicy,omitempty" tf:"boolean_policy,omitempty"`

	// The name of the Constraint the Policy is configuring, for example, serviceuser.services.
	// +kubebuilder:validation:Required
	Constraint *string `json:"constraint" tf:"constraint,omitempty"`

	// The resource name of the folder to set the policy for. Its format is folders/{folder_id}.
	// +kubebuilder:validation:Required
	Folder *string `json:"folder" tf:"folder,omitempty"`

	// A policy that can define specific values that are allowed or denied for the given constraint. It can also be used to allow or deny all values.
	// +kubebuilder:validation:Optional
	ListPolicy []ListPolicyParameters `json:"listPolicy,omitempty" tf:"list_policy,omitempty"`

	// A restore policy is a constraint to restore the default policy.
	// +kubebuilder:validation:Optional
	RestorePolicy []RestorePolicyParameters `json:"restorePolicy,omitempty" tf:"restore_policy,omitempty"`

	// Version of the Policy. Default version is 0.
	// +kubebuilder:validation:Optional
	Version *int64 `json:"version,omitempty" tf:"version,omitempty"`
}

type ListPolicyObservation struct {
}

type ListPolicyParameters struct {

	// One or the other must be set.
	// +kubebuilder:validation:Optional
	Allow []AllowParameters `json:"allow,omitempty" tf:"allow,omitempty"`

	// One or the other must be set.
	// +kubebuilder:validation:Optional
	Deny []DenyParameters `json:"deny,omitempty" tf:"deny,omitempty"`

	// If set to true, the values from the effective Policy of the parent resource are inherited, meaning the values set in this Policy are added to the values inherited up the hierarchy.
	// +kubebuilder:validation:Optional
	InheritFromParent *bool `json:"inheritFromParent,omitempty" tf:"inherit_from_parent,omitempty"`

	// The Google Cloud Console will try to default to a configuration that matches the value specified in this field.
	// +kubebuilder:validation:Optional
	SuggestedValue *string `json:"suggestedValue,omitempty" tf:"suggested_value,omitempty"`
}

type RestorePolicyObservation struct {
}

type RestorePolicyParameters struct {

	// May only be set to true. If set, then the default Policy is restored.
	// +kubebuilder:validation:Required
	Default *bool `json:"default" tf:"default,omitempty"`
}

// FolderOrganizationPolicySpec defines the desired state of FolderOrganizationPolicy
type FolderOrganizationPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FolderOrganizationPolicyParameters `json:"forProvider"`
}

// FolderOrganizationPolicyStatus defines the observed state of FolderOrganizationPolicy.
type FolderOrganizationPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FolderOrganizationPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FolderOrganizationPolicy is the Schema for the FolderOrganizationPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type FolderOrganizationPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FolderOrganizationPolicySpec   `json:"spec"`
	Status            FolderOrganizationPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FolderOrganizationPolicyList contains a list of FolderOrganizationPolicys
type FolderOrganizationPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FolderOrganizationPolicy `json:"items"`
}

// Repository type metadata.
var (
	FolderOrganizationPolicy_Kind             = "FolderOrganizationPolicy"
	FolderOrganizationPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FolderOrganizationPolicy_Kind}.String()
	FolderOrganizationPolicy_KindAPIVersion   = FolderOrganizationPolicy_Kind + "." + CRDGroupVersion.String()
	FolderOrganizationPolicy_GroupVersionKind = CRDGroupVersion.WithKind(FolderOrganizationPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&FolderOrganizationPolicy{}, &FolderOrganizationPolicyList{})
}
