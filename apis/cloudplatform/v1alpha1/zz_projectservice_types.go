/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectServiceObservation struct {
}

type ProjectServiceParameters struct {

	// +kubebuilder:validation:Optional
	DisableDependentServices *bool `json:"disableDependentServices,omitempty" tf:"disable_dependent_services,omitempty"`

	// +kubebuilder:validation:Optional
	DisableOnDestroy *bool `json:"disableOnDestroy,omitempty" tf:"disable_on_destroy,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`
}

// ProjectServiceSpec defines the desired state of ProjectService
type ProjectServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectServiceParameters `json:"forProvider"`
}

// ProjectServiceStatus defines the observed state of ProjectService.
type ProjectServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectService is the Schema for the ProjectServices API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type ProjectService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProjectServiceSpec   `json:"spec"`
	Status            ProjectServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectServiceList contains a list of ProjectServices
type ProjectServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectService `json:"items"`
}

// Repository type metadata.
var (
	ProjectService_Kind             = "ProjectService"
	ProjectService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectService_Kind}.String()
	ProjectService_KindAPIVersion   = ProjectService_Kind + "." + CRDGroupVersion.String()
	ProjectService_GroupVersionKind = CRDGroupVersion.WithKind(ProjectService_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectService{}, &ProjectServiceList{})
}
