/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OrganizationIAMAuditConfigAuditLogConfigObservation struct {
}

type OrganizationIAMAuditConfigAuditLogConfigParameters struct {

	// Identities that do not cause logging for this type of permission. Each entry can have one of the following values:user:{emailid}: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com. serviceAccount:{emailid}: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com. group:{emailid}: An email address that represents a Google group. For example, admins@example.com. domain:{domain}: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	// +kubebuilder:validation:Optional
	ExemptedMembers []*string `json:"exemptedMembers,omitempty" tf:"exempted_members,omitempty"`

	// Permission type for which logging is to be configured. Must be one of DATA_READ, DATA_WRITE, or ADMIN_READ.
	// +kubebuilder:validation:Required
	LogType *string `json:"logType" tf:"log_type,omitempty"`
}

type OrganizationIAMAuditConfigObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type OrganizationIAMAuditConfigParameters struct {

	// The configuration for logging of each type of permission. This can be specified multiple times.
	// +kubebuilder:validation:Required
	AuditLogConfig []OrganizationIAMAuditConfigAuditLogConfigParameters `json:"auditLogConfig" tf:"audit_log_config,omitempty"`

	// The numeric ID of the organization in which you want to manage the audit logging config.
	// +kubebuilder:validation:Required
	OrgID *string `json:"orgId" tf:"org_id,omitempty"`

	// Service which will be enabled for audit logging. The special value allServices covers all services.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`
}

// OrganizationIAMAuditConfigSpec defines the desired state of OrganizationIAMAuditConfig
type OrganizationIAMAuditConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrganizationIAMAuditConfigParameters `json:"forProvider"`
}

// OrganizationIAMAuditConfigStatus defines the observed state of OrganizationIAMAuditConfig.
type OrganizationIAMAuditConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrganizationIAMAuditConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationIAMAuditConfig is the Schema for the OrganizationIAMAuditConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type OrganizationIAMAuditConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OrganizationIAMAuditConfigSpec   `json:"spec"`
	Status            OrganizationIAMAuditConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationIAMAuditConfigList contains a list of OrganizationIAMAuditConfigs
type OrganizationIAMAuditConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrganizationIAMAuditConfig `json:"items"`
}

// Repository type metadata.
var (
	OrganizationIAMAuditConfig_Kind             = "OrganizationIAMAuditConfig"
	OrganizationIAMAuditConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrganizationIAMAuditConfig_Kind}.String()
	OrganizationIAMAuditConfig_KindAPIVersion   = OrganizationIAMAuditConfig_Kind + "." + CRDGroupVersion.String()
	OrganizationIAMAuditConfig_GroupVersionKind = CRDGroupVersion.WithKind(OrganizationIAMAuditConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&OrganizationIAMAuditConfig{}, &OrganizationIAMAuditConfigList{})
}
