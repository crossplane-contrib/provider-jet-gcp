/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretIAMPolicyObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SecretIAMPolicyParameters struct {

	// +kubebuilder:validation:Required
	PolicyData *string `json:"policyData" tf:"policy_data,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +kubebuilder:validation:Required
	SecretID *string `json:"secretId" tf:"secret_id,omitempty"`
}

// SecretIAMPolicySpec defines the desired state of SecretIAMPolicy
type SecretIAMPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretIAMPolicyParameters `json:"forProvider"`
}

// SecretIAMPolicyStatus defines the observed state of SecretIAMPolicy.
type SecretIAMPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretIAMPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecretIAMPolicy is the Schema for the SecretIAMPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type SecretIAMPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecretIAMPolicySpec   `json:"spec"`
	Status            SecretIAMPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretIAMPolicyList contains a list of SecretIAMPolicys
type SecretIAMPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretIAMPolicy `json:"items"`
}

// Repository type metadata.
var (
	SecretIAMPolicy_Kind             = "SecretIAMPolicy"
	SecretIAMPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretIAMPolicy_Kind}.String()
	SecretIAMPolicy_KindAPIVersion   = SecretIAMPolicy_Kind + "." + CRDGroupVersion.String()
	SecretIAMPolicy_GroupVersionKind = CRDGroupVersion.WithKind(SecretIAMPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretIAMPolicy{}, &SecretIAMPolicyList{})
}
