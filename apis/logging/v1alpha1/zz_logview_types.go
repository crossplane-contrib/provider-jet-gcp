/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogViewObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type LogViewParameters struct {

	// The bucket of the resource
	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// Describes this view.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Filter that restricts which log entries in a bucket are visible in this view. Filters are restricted to be a logical AND of ==/!= of any of the following: - originating project/folder/organization/billing account. - resource type - log id For example: SOURCE("projects/myproject") AND resource.type = "gce_instance" AND LOG_ID("stdout")
	// +kubebuilder:validation:Optional
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// The location of the resource. The supported locations are: global, us-central1, us-east1, us-west1, asia-east1, europe-west1.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The resource name of the view. For example: `projects/my-project/locations/global/buckets/my-bucket/views/my-view`
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The parent of the resource.
	// +kubebuilder:validation:Optional
	Parent *string `json:"parent,omitempty" tf:"parent,omitempty"`
}

// LogViewSpec defines the desired state of LogView
type LogViewSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogViewParameters `json:"forProvider"`
}

// LogViewStatus defines the observed state of LogView.
type LogViewStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogViewObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogView is the Schema for the LogViews API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type LogView struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogViewSpec   `json:"spec"`
	Status            LogViewStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogViewList contains a list of LogViews
type LogViewList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogView `json:"items"`
}

// Repository type metadata.
var (
	LogView_Kind             = "LogView"
	LogView_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogView_Kind}.String()
	LogView_KindAPIVersion   = LogView_Kind + "." + CRDGroupVersion.String()
	LogView_GroupVersionKind = CRDGroupVersion.WithKind(LogView_Kind)
)

func init() {
	SchemeBuilder.Register(&LogView{}, &LogViewList{})
}
