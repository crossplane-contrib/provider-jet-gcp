/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectBucketConfigObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LifecycleState *string `json:"lifecycleState,omitempty" tf:"lifecycle_state,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ProjectBucketConfigParameters struct {

	// The name of the logging bucket. Logging automatically creates two log buckets: _Required and _Default.
	// +kubebuilder:validation:Required
	BucketID *string `json:"bucketId" tf:"bucket_id,omitempty"`

	// An optional description for this bucket.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The location of the bucket.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The parent project that contains the logging bucket.
	// +kubebuilder:validation:Required
	Project *string `json:"project" tf:"project,omitempty"`

	// Logs will be retained by default for this amount of time, after which they will automatically be deleted. The minimum retention period is 1 day. If this value is set to zero at bucket creation time, the default time of 30 days will be used.
	// +kubebuilder:validation:Optional
	RetentionDays *int64 `json:"retentionDays,omitempty" tf:"retention_days,omitempty"`
}

// ProjectBucketConfigSpec defines the desired state of ProjectBucketConfig
type ProjectBucketConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectBucketConfigParameters `json:"forProvider"`
}

// ProjectBucketConfigStatus defines the observed state of ProjectBucketConfig.
type ProjectBucketConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectBucketConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectBucketConfig is the Schema for the ProjectBucketConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type ProjectBucketConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProjectBucketConfigSpec   `json:"spec"`
	Status            ProjectBucketConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectBucketConfigList contains a list of ProjectBucketConfigs
type ProjectBucketConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectBucketConfig `json:"items"`
}

// Repository type metadata.
var (
	ProjectBucketConfig_Kind             = "ProjectBucketConfig"
	ProjectBucketConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectBucketConfig_Kind}.String()
	ProjectBucketConfig_KindAPIVersion   = ProjectBucketConfig_Kind + "." + CRDGroupVersion.String()
	ProjectBucketConfig_GroupVersionKind = CRDGroupVersion.WithKind(ProjectBucketConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectBucketConfig{}, &ProjectBucketConfigList{})
}
