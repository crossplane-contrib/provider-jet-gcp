/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TagValueIamMemberConditionObservation struct {
}

type TagValueIamMemberConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type TagValueIamMemberObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TagValueIamMemberParameters struct {

	// +kubebuilder:validation:Optional
	Condition []TagValueIamMemberConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	Member *string `json:"member" tf:"member,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`

	// +kubebuilder:validation:Required
	TagValue *string `json:"tagValue" tf:"tag_value,omitempty"`
}

// TagValueIamMemberSpec defines the desired state of TagValueIamMember
type TagValueIamMemberSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TagValueIamMemberParameters `json:"forProvider"`
}

// TagValueIamMemberStatus defines the observed state of TagValueIamMember.
type TagValueIamMemberStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TagValueIamMemberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TagValueIamMember is the Schema for the TagValueIamMembers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type TagValueIamMember struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TagValueIamMemberSpec   `json:"spec"`
	Status            TagValueIamMemberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TagValueIamMemberList contains a list of TagValueIamMembers
type TagValueIamMemberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TagValueIamMember `json:"items"`
}

// Repository type metadata.
var (
	TagValueIamMember_Kind             = "TagValueIamMember"
	TagValueIamMember_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TagValueIamMember_Kind}.String()
	TagValueIamMember_KindAPIVersion   = TagValueIamMember_Kind + "." + CRDGroupVersion.String()
	TagValueIamMember_GroupVersionKind = CRDGroupVersion.WithKind(TagValueIamMember_Kind)
)

func init() {
	SchemeBuilder.Register(&TagValueIamMember{}, &TagValueIamMemberList{})
}
