/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TagKeyIAMMemberConditionObservation struct {
}

type TagKeyIAMMemberConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type TagKeyIAMMemberObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TagKeyIAMMemberParameters struct {

	// +kubebuilder:validation:Optional
	Condition []TagKeyIAMMemberConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	Member *string `json:"member" tf:"member,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`

	// +kubebuilder:validation:Required
	TagKey *string `json:"tagKey" tf:"tag_key,omitempty"`
}

// TagKeyIAMMemberSpec defines the desired state of TagKeyIAMMember
type TagKeyIAMMemberSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TagKeyIAMMemberParameters `json:"forProvider"`
}

// TagKeyIAMMemberStatus defines the observed state of TagKeyIAMMember.
type TagKeyIAMMemberStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TagKeyIAMMemberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TagKeyIAMMember is the Schema for the TagKeyIAMMembers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type TagKeyIAMMember struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TagKeyIAMMemberSpec   `json:"spec"`
	Status            TagKeyIAMMemberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TagKeyIAMMemberList contains a list of TagKeyIAMMembers
type TagKeyIAMMemberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TagKeyIAMMember `json:"items"`
}

// Repository type metadata.
var (
	TagKeyIAMMember_Kind             = "TagKeyIAMMember"
	TagKeyIAMMember_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TagKeyIAMMember_Kind}.String()
	TagKeyIAMMember_KindAPIVersion   = TagKeyIAMMember_Kind + "." + CRDGroupVersion.String()
	TagKeyIAMMember_GroupVersionKind = CRDGroupVersion.WithKind(TagKeyIAMMember_Kind)
)

func init() {
	SchemeBuilder.Register(&TagKeyIAMMember{}, &TagKeyIAMMemberList{})
}
