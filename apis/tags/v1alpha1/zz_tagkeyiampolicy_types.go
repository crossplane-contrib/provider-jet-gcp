/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TagKeyIAMPolicyObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TagKeyIAMPolicyParameters struct {

	// +kubebuilder:validation:Required
	PolicyData *string `json:"policyData" tf:"policy_data,omitempty"`

	// +kubebuilder:validation:Required
	TagKey *string `json:"tagKey" tf:"tag_key,omitempty"`
}

// TagKeyIAMPolicySpec defines the desired state of TagKeyIAMPolicy
type TagKeyIAMPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TagKeyIAMPolicyParameters `json:"forProvider"`
}

// TagKeyIAMPolicyStatus defines the observed state of TagKeyIAMPolicy.
type TagKeyIAMPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TagKeyIAMPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TagKeyIAMPolicy is the Schema for the TagKeyIAMPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type TagKeyIAMPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TagKeyIAMPolicySpec   `json:"spec"`
	Status            TagKeyIAMPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TagKeyIAMPolicyList contains a list of TagKeyIAMPolicys
type TagKeyIAMPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TagKeyIAMPolicy `json:"items"`
}

// Repository type metadata.
var (
	TagKeyIAMPolicy_Kind             = "TagKeyIAMPolicy"
	TagKeyIAMPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TagKeyIAMPolicy_Kind}.String()
	TagKeyIAMPolicy_KindAPIVersion   = TagKeyIAMPolicy_Kind + "." + CRDGroupVersion.String()
	TagKeyIAMPolicy_GroupVersionKind = CRDGroupVersion.WithKind(TagKeyIAMPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&TagKeyIAMPolicy{}, &TagKeyIAMPolicyList{})
}
