/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TagValueObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	NamespacedName *string `json:"namespacedName,omitempty" tf:"namespaced_name,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type TagValueParameters struct {

	// User-assigned description of the TagValue. Must not exceed 256 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Input only. The resource name of the new TagValue's parent. Must be of the form tagKeys/{tag_key_id}.
	// +kubebuilder:validation:Required
	Parent *string `json:"parent" tf:"parent,omitempty"`

	// Input only. User-assigned short name for TagValue. The short name should be unique for TagValues within the same parent TagKey.
	//
	// The short name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), underscores (_), dots (.), and alphanumerics between.
	// +kubebuilder:validation:Required
	ShortName *string `json:"shortName" tf:"short_name,omitempty"`
}

// TagValueSpec defines the desired state of TagValue
type TagValueSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TagValueParameters `json:"forProvider"`
}

// TagValueStatus defines the observed state of TagValue.
type TagValueStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TagValueObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TagValue is the Schema for the TagValues API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type TagValue struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TagValueSpec   `json:"spec"`
	Status            TagValueStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TagValueList contains a list of TagValues
type TagValueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TagValue `json:"items"`
}

// Repository type metadata.
var (
	TagValue_Kind             = "TagValue"
	TagValue_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TagValue_Kind}.String()
	TagValue_KindAPIVersion   = TagValue_Kind + "." + CRDGroupVersion.String()
	TagValue_GroupVersionKind = CRDGroupVersion.WithKind(TagValue_Kind)
)

func init() {
	SchemeBuilder.Register(&TagValue{}, &TagValueList{})
}
