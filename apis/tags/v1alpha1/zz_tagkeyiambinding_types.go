/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConditionObservation struct {
}

type ConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type TagKeyIamBindingObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TagKeyIamBindingParameters struct {

	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	Members []*string `json:"members" tf:"members,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`

	// +kubebuilder:validation:Required
	TagKey *string `json:"tagKey" tf:"tag_key,omitempty"`
}

// TagKeyIamBindingSpec defines the desired state of TagKeyIamBinding
type TagKeyIamBindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TagKeyIamBindingParameters `json:"forProvider"`
}

// TagKeyIamBindingStatus defines the observed state of TagKeyIamBinding.
type TagKeyIamBindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TagKeyIamBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TagKeyIamBinding is the Schema for the TagKeyIamBindings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type TagKeyIamBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TagKeyIamBindingSpec   `json:"spec"`
	Status            TagKeyIamBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TagKeyIamBindingList contains a list of TagKeyIamBindings
type TagKeyIamBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TagKeyIamBinding `json:"items"`
}

// Repository type metadata.
var (
	TagKeyIamBinding_Kind             = "TagKeyIamBinding"
	TagKeyIamBinding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TagKeyIamBinding_Kind}.String()
	TagKeyIamBinding_KindAPIVersion   = TagKeyIamBinding_Kind + "." + CRDGroupVersion.String()
	TagKeyIamBinding_GroupVersionKind = CRDGroupVersion.WithKind(TagKeyIamBinding_Kind)
)

func init() {
	SchemeBuilder.Register(&TagKeyIamBinding{}, &TagKeyIamBindingList{})
}
