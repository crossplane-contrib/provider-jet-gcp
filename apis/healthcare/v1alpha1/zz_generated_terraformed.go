/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/crossplane/terrajet/pkg/resource"
	"github.com/crossplane/terrajet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this ConsentStore
func (mg *ConsentStore) GetTerraformResourceType() string {
	return "google_healthcare_consent_store"
}

// GetConnectionDetailsMapping for this ConsentStore
func (tr *ConsentStore) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ConsentStore
func (tr *ConsentStore) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ConsentStore
func (tr *ConsentStore) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ConsentStore
func (tr *ConsentStore) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ConsentStore
func (tr *ConsentStore) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ConsentStore
func (tr *ConsentStore) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ConsentStore using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ConsentStore) LateInitialize(attrs []byte) (bool, error) {
	params := &ConsentStoreParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ConsentStore) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ConsentStoreIAMBinding
func (mg *ConsentStoreIAMBinding) GetTerraformResourceType() string {
	return "google_healthcare_consent_store_iam_binding"
}

// GetConnectionDetailsMapping for this ConsentStoreIAMBinding
func (tr *ConsentStoreIAMBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ConsentStoreIAMBinding
func (tr *ConsentStoreIAMBinding) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ConsentStoreIAMBinding
func (tr *ConsentStoreIAMBinding) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ConsentStoreIAMBinding
func (tr *ConsentStoreIAMBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ConsentStoreIAMBinding
func (tr *ConsentStoreIAMBinding) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ConsentStoreIAMBinding
func (tr *ConsentStoreIAMBinding) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ConsentStoreIAMBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ConsentStoreIAMBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &ConsentStoreIAMBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ConsentStoreIAMBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ConsentStoreIAMMember
func (mg *ConsentStoreIAMMember) GetTerraformResourceType() string {
	return "google_healthcare_consent_store_iam_member"
}

// GetConnectionDetailsMapping for this ConsentStoreIAMMember
func (tr *ConsentStoreIAMMember) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ConsentStoreIAMMember
func (tr *ConsentStoreIAMMember) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ConsentStoreIAMMember
func (tr *ConsentStoreIAMMember) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ConsentStoreIAMMember
func (tr *ConsentStoreIAMMember) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ConsentStoreIAMMember
func (tr *ConsentStoreIAMMember) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ConsentStoreIAMMember
func (tr *ConsentStoreIAMMember) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ConsentStoreIAMMember using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ConsentStoreIAMMember) LateInitialize(attrs []byte) (bool, error) {
	params := &ConsentStoreIAMMemberParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ConsentStoreIAMMember) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ConsentStoreIAMPolicy
func (mg *ConsentStoreIAMPolicy) GetTerraformResourceType() string {
	return "google_healthcare_consent_store_iam_policy"
}

// GetConnectionDetailsMapping for this ConsentStoreIAMPolicy
func (tr *ConsentStoreIAMPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ConsentStoreIAMPolicy
func (tr *ConsentStoreIAMPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ConsentStoreIAMPolicy
func (tr *ConsentStoreIAMPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ConsentStoreIAMPolicy
func (tr *ConsentStoreIAMPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ConsentStoreIAMPolicy
func (tr *ConsentStoreIAMPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ConsentStoreIAMPolicy
func (tr *ConsentStoreIAMPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ConsentStoreIAMPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ConsentStoreIAMPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &ConsentStoreIAMPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ConsentStoreIAMPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Dataset
func (mg *Dataset) GetTerraformResourceType() string {
	return "google_healthcare_dataset"
}

// GetConnectionDetailsMapping for this Dataset
func (tr *Dataset) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Dataset
func (tr *Dataset) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Dataset
func (tr *Dataset) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Dataset
func (tr *Dataset) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Dataset
func (tr *Dataset) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Dataset
func (tr *Dataset) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Dataset using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Dataset) LateInitialize(attrs []byte) (bool, error) {
	params := &DatasetParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Dataset) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DatasetIAMBinding
func (mg *DatasetIAMBinding) GetTerraformResourceType() string {
	return "google_healthcare_dataset_iam_binding"
}

// GetConnectionDetailsMapping for this DatasetIAMBinding
func (tr *DatasetIAMBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DatasetIAMBinding
func (tr *DatasetIAMBinding) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DatasetIAMBinding
func (tr *DatasetIAMBinding) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DatasetIAMBinding
func (tr *DatasetIAMBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DatasetIAMBinding
func (tr *DatasetIAMBinding) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DatasetIAMBinding
func (tr *DatasetIAMBinding) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DatasetIAMBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DatasetIAMBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &DatasetIAMBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DatasetIAMBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DatasetIAMMember
func (mg *DatasetIAMMember) GetTerraformResourceType() string {
	return "google_healthcare_dataset_iam_member"
}

// GetConnectionDetailsMapping for this DatasetIAMMember
func (tr *DatasetIAMMember) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DatasetIAMMember
func (tr *DatasetIAMMember) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DatasetIAMMember
func (tr *DatasetIAMMember) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DatasetIAMMember
func (tr *DatasetIAMMember) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DatasetIAMMember
func (tr *DatasetIAMMember) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DatasetIAMMember
func (tr *DatasetIAMMember) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DatasetIAMMember using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DatasetIAMMember) LateInitialize(attrs []byte) (bool, error) {
	params := &DatasetIAMMemberParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DatasetIAMMember) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DatasetIAMPolicy
func (mg *DatasetIAMPolicy) GetTerraformResourceType() string {
	return "google_healthcare_dataset_iam_policy"
}

// GetConnectionDetailsMapping for this DatasetIAMPolicy
func (tr *DatasetIAMPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DatasetIAMPolicy
func (tr *DatasetIAMPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DatasetIAMPolicy
func (tr *DatasetIAMPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DatasetIAMPolicy
func (tr *DatasetIAMPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DatasetIAMPolicy
func (tr *DatasetIAMPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DatasetIAMPolicy
func (tr *DatasetIAMPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DatasetIAMPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DatasetIAMPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &DatasetIAMPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DatasetIAMPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DICOMStore
func (mg *DICOMStore) GetTerraformResourceType() string {
	return "google_healthcare_dicom_store"
}

// GetConnectionDetailsMapping for this DICOMStore
func (tr *DICOMStore) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DICOMStore
func (tr *DICOMStore) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DICOMStore
func (tr *DICOMStore) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DICOMStore
func (tr *DICOMStore) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DICOMStore
func (tr *DICOMStore) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DICOMStore
func (tr *DICOMStore) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DICOMStore using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DICOMStore) LateInitialize(attrs []byte) (bool, error) {
	params := &DICOMStoreParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DICOMStore) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DICOMStoreIAMBinding
func (mg *DICOMStoreIAMBinding) GetTerraformResourceType() string {
	return "google_healthcare_dicom_store_iam_binding"
}

// GetConnectionDetailsMapping for this DICOMStoreIAMBinding
func (tr *DICOMStoreIAMBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DICOMStoreIAMBinding
func (tr *DICOMStoreIAMBinding) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DICOMStoreIAMBinding
func (tr *DICOMStoreIAMBinding) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DICOMStoreIAMBinding
func (tr *DICOMStoreIAMBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DICOMStoreIAMBinding
func (tr *DICOMStoreIAMBinding) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DICOMStoreIAMBinding
func (tr *DICOMStoreIAMBinding) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DICOMStoreIAMBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DICOMStoreIAMBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &DICOMStoreIAMBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DICOMStoreIAMBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DICOMStoreIAMMember
func (mg *DICOMStoreIAMMember) GetTerraformResourceType() string {
	return "google_healthcare_dicom_store_iam_member"
}

// GetConnectionDetailsMapping for this DICOMStoreIAMMember
func (tr *DICOMStoreIAMMember) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DICOMStoreIAMMember
func (tr *DICOMStoreIAMMember) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DICOMStoreIAMMember
func (tr *DICOMStoreIAMMember) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DICOMStoreIAMMember
func (tr *DICOMStoreIAMMember) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DICOMStoreIAMMember
func (tr *DICOMStoreIAMMember) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DICOMStoreIAMMember
func (tr *DICOMStoreIAMMember) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DICOMStoreIAMMember using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DICOMStoreIAMMember) LateInitialize(attrs []byte) (bool, error) {
	params := &DICOMStoreIAMMemberParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DICOMStoreIAMMember) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DICOMStoreIAMPolicy
func (mg *DICOMStoreIAMPolicy) GetTerraformResourceType() string {
	return "google_healthcare_dicom_store_iam_policy"
}

// GetConnectionDetailsMapping for this DICOMStoreIAMPolicy
func (tr *DICOMStoreIAMPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DICOMStoreIAMPolicy
func (tr *DICOMStoreIAMPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DICOMStoreIAMPolicy
func (tr *DICOMStoreIAMPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DICOMStoreIAMPolicy
func (tr *DICOMStoreIAMPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DICOMStoreIAMPolicy
func (tr *DICOMStoreIAMPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DICOMStoreIAMPolicy
func (tr *DICOMStoreIAMPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DICOMStoreIAMPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DICOMStoreIAMPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &DICOMStoreIAMPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DICOMStoreIAMPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this FHIRStore
func (mg *FHIRStore) GetTerraformResourceType() string {
	return "google_healthcare_fhir_store"
}

// GetConnectionDetailsMapping for this FHIRStore
func (tr *FHIRStore) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this FHIRStore
func (tr *FHIRStore) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FHIRStore
func (tr *FHIRStore) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FHIRStore
func (tr *FHIRStore) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FHIRStore
func (tr *FHIRStore) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FHIRStore
func (tr *FHIRStore) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FHIRStore using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FHIRStore) LateInitialize(attrs []byte) (bool, error) {
	params := &FHIRStoreParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FHIRStore) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this FHIRStoreIAMBinding
func (mg *FHIRStoreIAMBinding) GetTerraformResourceType() string {
	return "google_healthcare_fhir_store_iam_binding"
}

// GetConnectionDetailsMapping for this FHIRStoreIAMBinding
func (tr *FHIRStoreIAMBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this FHIRStoreIAMBinding
func (tr *FHIRStoreIAMBinding) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FHIRStoreIAMBinding
func (tr *FHIRStoreIAMBinding) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FHIRStoreIAMBinding
func (tr *FHIRStoreIAMBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FHIRStoreIAMBinding
func (tr *FHIRStoreIAMBinding) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FHIRStoreIAMBinding
func (tr *FHIRStoreIAMBinding) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FHIRStoreIAMBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FHIRStoreIAMBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &FHIRStoreIAMBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FHIRStoreIAMBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this FHIRStoreIAMMember
func (mg *FHIRStoreIAMMember) GetTerraformResourceType() string {
	return "google_healthcare_fhir_store_iam_member"
}

// GetConnectionDetailsMapping for this FHIRStoreIAMMember
func (tr *FHIRStoreIAMMember) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this FHIRStoreIAMMember
func (tr *FHIRStoreIAMMember) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FHIRStoreIAMMember
func (tr *FHIRStoreIAMMember) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FHIRStoreIAMMember
func (tr *FHIRStoreIAMMember) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FHIRStoreIAMMember
func (tr *FHIRStoreIAMMember) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FHIRStoreIAMMember
func (tr *FHIRStoreIAMMember) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FHIRStoreIAMMember using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FHIRStoreIAMMember) LateInitialize(attrs []byte) (bool, error) {
	params := &FHIRStoreIAMMemberParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FHIRStoreIAMMember) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this FHIRStoreIAMPolicy
func (mg *FHIRStoreIAMPolicy) GetTerraformResourceType() string {
	return "google_healthcare_fhir_store_iam_policy"
}

// GetConnectionDetailsMapping for this FHIRStoreIAMPolicy
func (tr *FHIRStoreIAMPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this FHIRStoreIAMPolicy
func (tr *FHIRStoreIAMPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FHIRStoreIAMPolicy
func (tr *FHIRStoreIAMPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FHIRStoreIAMPolicy
func (tr *FHIRStoreIAMPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FHIRStoreIAMPolicy
func (tr *FHIRStoreIAMPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FHIRStoreIAMPolicy
func (tr *FHIRStoreIAMPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FHIRStoreIAMPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FHIRStoreIAMPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &FHIRStoreIAMPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FHIRStoreIAMPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this HL7V2Store
func (mg *HL7V2Store) GetTerraformResourceType() string {
	return "google_healthcare_hl7_v2_store"
}

// GetConnectionDetailsMapping for this HL7V2Store
func (tr *HL7V2Store) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this HL7V2Store
func (tr *HL7V2Store) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this HL7V2Store
func (tr *HL7V2Store) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this HL7V2Store
func (tr *HL7V2Store) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this HL7V2Store
func (tr *HL7V2Store) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this HL7V2Store
func (tr *HL7V2Store) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this HL7V2Store using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *HL7V2Store) LateInitialize(attrs []byte) (bool, error) {
	params := &HL7V2StoreParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *HL7V2Store) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this HL7V2StoreIAMBinding
func (mg *HL7V2StoreIAMBinding) GetTerraformResourceType() string {
	return "google_healthcare_hl7_v2_store_iam_binding"
}

// GetConnectionDetailsMapping for this HL7V2StoreIAMBinding
func (tr *HL7V2StoreIAMBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this HL7V2StoreIAMBinding
func (tr *HL7V2StoreIAMBinding) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this HL7V2StoreIAMBinding
func (tr *HL7V2StoreIAMBinding) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this HL7V2StoreIAMBinding
func (tr *HL7V2StoreIAMBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this HL7V2StoreIAMBinding
func (tr *HL7V2StoreIAMBinding) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this HL7V2StoreIAMBinding
func (tr *HL7V2StoreIAMBinding) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this HL7V2StoreIAMBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *HL7V2StoreIAMBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &HL7V2StoreIAMBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *HL7V2StoreIAMBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this HL7V2StoreIAMMember
func (mg *HL7V2StoreIAMMember) GetTerraformResourceType() string {
	return "google_healthcare_hl7_v2_store_iam_member"
}

// GetConnectionDetailsMapping for this HL7V2StoreIAMMember
func (tr *HL7V2StoreIAMMember) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this HL7V2StoreIAMMember
func (tr *HL7V2StoreIAMMember) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this HL7V2StoreIAMMember
func (tr *HL7V2StoreIAMMember) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this HL7V2StoreIAMMember
func (tr *HL7V2StoreIAMMember) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this HL7V2StoreIAMMember
func (tr *HL7V2StoreIAMMember) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this HL7V2StoreIAMMember
func (tr *HL7V2StoreIAMMember) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this HL7V2StoreIAMMember using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *HL7V2StoreIAMMember) LateInitialize(attrs []byte) (bool, error) {
	params := &HL7V2StoreIAMMemberParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *HL7V2StoreIAMMember) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this HL7V2StoreIAMPolicy
func (mg *HL7V2StoreIAMPolicy) GetTerraformResourceType() string {
	return "google_healthcare_hl7_v2_store_iam_policy"
}

// GetConnectionDetailsMapping for this HL7V2StoreIAMPolicy
func (tr *HL7V2StoreIAMPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this HL7V2StoreIAMPolicy
func (tr *HL7V2StoreIAMPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this HL7V2StoreIAMPolicy
func (tr *HL7V2StoreIAMPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this HL7V2StoreIAMPolicy
func (tr *HL7V2StoreIAMPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this HL7V2StoreIAMPolicy
func (tr *HL7V2StoreIAMPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this HL7V2StoreIAMPolicy
func (tr *HL7V2StoreIAMPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this HL7V2StoreIAMPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *HL7V2StoreIAMPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &HL7V2StoreIAMPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *HL7V2StoreIAMPolicy) GetTerraformSchemaVersion() int {
	return 0
}
