/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DicomStoreIamBindingConditionObservation struct {
}

type DicomStoreIamBindingConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type DicomStoreIamBindingObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DicomStoreIamBindingParameters struct {

	// +kubebuilder:validation:Optional
	Condition []DicomStoreIamBindingConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	DicomStoreID *string `json:"dicomStoreId" tf:"dicom_store_id,omitempty"`

	// +kubebuilder:validation:Required
	Members []*string `json:"members" tf:"members,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// DicomStoreIamBindingSpec defines the desired state of DicomStoreIamBinding
type DicomStoreIamBindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DicomStoreIamBindingParameters `json:"forProvider"`
}

// DicomStoreIamBindingStatus defines the observed state of DicomStoreIamBinding.
type DicomStoreIamBindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DicomStoreIamBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DicomStoreIamBinding is the Schema for the DicomStoreIamBindings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type DicomStoreIamBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DicomStoreIamBindingSpec   `json:"spec"`
	Status            DicomStoreIamBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DicomStoreIamBindingList contains a list of DicomStoreIamBindings
type DicomStoreIamBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DicomStoreIamBinding `json:"items"`
}

// Repository type metadata.
var (
	DicomStoreIamBinding_Kind             = "DicomStoreIamBinding"
	DicomStoreIamBinding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DicomStoreIamBinding_Kind}.String()
	DicomStoreIamBinding_KindAPIVersion   = DicomStoreIamBinding_Kind + "." + CRDGroupVersion.String()
	DicomStoreIamBinding_GroupVersionKind = CRDGroupVersion.WithKind(DicomStoreIamBinding_Kind)
)

func init() {
	SchemeBuilder.Register(&DicomStoreIamBinding{}, &DicomStoreIamBindingList{})
}
