/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DicomStoreObservation struct {
	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`
}

type DicomStoreParameters struct {

	// Identifies the dataset addressed by this request. Must be in the format
	// 'projects/{project}/locations/{location}/datasets/{dataset}'
	// +kubebuilder:validation:Required
	Dataset *string `json:"dataset" tf:"dataset,omitempty"`

	// User-supplied key-value pairs used to organize DICOM stores.
	//
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must
	// conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	//
	// Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128
	// bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	//
	// No more than 64 labels can be associated with a given store.
	//
	// An object containing a list of "key": value pairs.
	// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The resource name for the DicomStore.
	//
	// ** Changing this property may recreate the Dicom store (removing all data) **
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// A nested object resource
	// +kubebuilder:validation:Optional
	NotificationConfig []NotificationConfigParameters `json:"notificationConfig,omitempty" tf:"notification_config,omitempty"`
}

type NotificationConfigObservation struct {
}

type NotificationConfigParameters struct {

	// The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
	// PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
	// It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
	// was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
	// project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
	// Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
	// +kubebuilder:validation:Required
	PubsubTopic *string `json:"pubsubTopic" tf:"pubsub_topic,omitempty"`
}

// DicomStoreSpec defines the desired state of DicomStore
type DicomStoreSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DicomStoreParameters `json:"forProvider"`
}

// DicomStoreStatus defines the observed state of DicomStore.
type DicomStoreStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DicomStoreObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DicomStore is the Schema for the DicomStores API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type DicomStore struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DicomStoreSpec   `json:"spec"`
	Status            DicomStoreStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DicomStoreList contains a list of DicomStores
type DicomStoreList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DicomStore `json:"items"`
}

// Repository type metadata.
var (
	DicomStore_Kind             = "DicomStore"
	DicomStore_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DicomStore_Kind}.String()
	DicomStore_KindAPIVersion   = DicomStore_Kind + "." + CRDGroupVersion.String()
	DicomStore_GroupVersionKind = CRDGroupVersion.WithKind(DicomStore_Kind)
)

func init() {
	SchemeBuilder.Register(&DicomStore{}, &DicomStoreList{})
}
