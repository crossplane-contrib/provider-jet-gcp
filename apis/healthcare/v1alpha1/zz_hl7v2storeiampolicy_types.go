/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HL7V2StoreIAMPolicyObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type HL7V2StoreIAMPolicyParameters struct {

	// +kubebuilder:validation:Required
	HL7V2StoreID *string `json:"hl7V2StoreId" tf:"hl7_v2_store_id,omitempty"`

	// +kubebuilder:validation:Required
	PolicyData *string `json:"policyData" tf:"policy_data,omitempty"`
}

// HL7V2StoreIAMPolicySpec defines the desired state of HL7V2StoreIAMPolicy
type HL7V2StoreIAMPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HL7V2StoreIAMPolicyParameters `json:"forProvider"`
}

// HL7V2StoreIAMPolicyStatus defines the observed state of HL7V2StoreIAMPolicy.
type HL7V2StoreIAMPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HL7V2StoreIAMPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HL7V2StoreIAMPolicy is the Schema for the HL7V2StoreIAMPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type HL7V2StoreIAMPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HL7V2StoreIAMPolicySpec   `json:"spec"`
	Status            HL7V2StoreIAMPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HL7V2StoreIAMPolicyList contains a list of HL7V2StoreIAMPolicys
type HL7V2StoreIAMPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HL7V2StoreIAMPolicy `json:"items"`
}

// Repository type metadata.
var (
	HL7V2StoreIAMPolicy_Kind             = "HL7V2StoreIAMPolicy"
	HL7V2StoreIAMPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HL7V2StoreIAMPolicy_Kind}.String()
	HL7V2StoreIAMPolicy_KindAPIVersion   = HL7V2StoreIAMPolicy_Kind + "." + CRDGroupVersion.String()
	HL7V2StoreIAMPolicy_GroupVersionKind = CRDGroupVersion.WithKind(HL7V2StoreIAMPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&HL7V2StoreIAMPolicy{}, &HL7V2StoreIAMPolicyList{})
}
