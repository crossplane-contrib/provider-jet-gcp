/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DicomStoreIamPolicyObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DicomStoreIamPolicyParameters struct {

	// +kubebuilder:validation:Required
	DicomStoreID *string `json:"dicomStoreId" tf:"dicom_store_id,omitempty"`

	// +kubebuilder:validation:Required
	PolicyData *string `json:"policyData" tf:"policy_data,omitempty"`
}

// DicomStoreIamPolicySpec defines the desired state of DicomStoreIamPolicy
type DicomStoreIamPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DicomStoreIamPolicyParameters `json:"forProvider"`
}

// DicomStoreIamPolicyStatus defines the observed state of DicomStoreIamPolicy.
type DicomStoreIamPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DicomStoreIamPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DicomStoreIamPolicy is the Schema for the DicomStoreIamPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type DicomStoreIamPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DicomStoreIamPolicySpec   `json:"spec"`
	Status            DicomStoreIamPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DicomStoreIamPolicyList contains a list of DicomStoreIamPolicys
type DicomStoreIamPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DicomStoreIamPolicy `json:"items"`
}

// Repository type metadata.
var (
	DicomStoreIamPolicy_Kind             = "DicomStoreIamPolicy"
	DicomStoreIamPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DicomStoreIamPolicy_Kind}.String()
	DicomStoreIamPolicy_KindAPIVersion   = DicomStoreIamPolicy_Kind + "." + CRDGroupVersion.String()
	DicomStoreIamPolicy_GroupVersionKind = CRDGroupVersion.WithKind(DicomStoreIamPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&DicomStoreIamPolicy{}, &DicomStoreIamPolicyList{})
}
