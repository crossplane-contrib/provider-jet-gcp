/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FhirStoreIamPolicyObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FhirStoreIamPolicyParameters struct {

	// +kubebuilder:validation:Required
	FhirStoreID *string `json:"fhirStoreId" tf:"fhir_store_id,omitempty"`

	// +kubebuilder:validation:Required
	PolicyData *string `json:"policyData" tf:"policy_data,omitempty"`
}

// FhirStoreIamPolicySpec defines the desired state of FhirStoreIamPolicy
type FhirStoreIamPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FhirStoreIamPolicyParameters `json:"forProvider"`
}

// FhirStoreIamPolicyStatus defines the observed state of FhirStoreIamPolicy.
type FhirStoreIamPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FhirStoreIamPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FhirStoreIamPolicy is the Schema for the FhirStoreIamPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type FhirStoreIamPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FhirStoreIamPolicySpec   `json:"spec"`
	Status            FhirStoreIamPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FhirStoreIamPolicyList contains a list of FhirStoreIamPolicys
type FhirStoreIamPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FhirStoreIamPolicy `json:"items"`
}

// Repository type metadata.
var (
	FhirStoreIamPolicy_Kind             = "FhirStoreIamPolicy"
	FhirStoreIamPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FhirStoreIamPolicy_Kind}.String()
	FhirStoreIamPolicy_KindAPIVersion   = FhirStoreIamPolicy_Kind + "." + CRDGroupVersion.String()
	FhirStoreIamPolicy_GroupVersionKind = CRDGroupVersion.WithKind(FhirStoreIamPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&FhirStoreIamPolicy{}, &FhirStoreIamPolicyList{})
}
