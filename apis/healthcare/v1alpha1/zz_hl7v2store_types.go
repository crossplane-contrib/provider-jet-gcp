/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HL7V2StoreNotificationConfigObservation struct {
}

type HL7V2StoreNotificationConfigParameters struct {

	// The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
	// PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
	// It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
	// was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
	// project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
	// Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
	// +kubebuilder:validation:Required
	PubsubTopic *string `json:"pubsubTopic" tf:"pubsub_topic,omitempty"`
}

type HL7V2StoreObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`
}

type HL7V2StoreParameters struct {

	// Identifies the dataset addressed by this request. Must be in the format
	// 'projects/{project}/locations/{location}/datasets/{dataset}'
	// +kubebuilder:validation:Required
	Dataset *string `json:"dataset" tf:"dataset,omitempty"`

	// User-supplied key-value pairs used to organize HL7v2 stores.
	//
	// Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must
	// conform to the following PCRE regular expression: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
	//
	// Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128
	// bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63}
	//
	// No more than 64 labels can be associated with a given store.
	//
	// An object containing a list of "key": value pairs.
	// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The resource name for the Hl7V2Store.
	//
	// ** Changing this property may recreate the Hl7v2 store (removing all data) **
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// A nested object resource
	// +kubebuilder:validation:Optional
	NotificationConfig []HL7V2StoreNotificationConfigParameters `json:"notificationConfig,omitempty" tf:"notification_config,omitempty"`

	// A list of notification configs. Each configuration uses a filter to determine whether to publish a
	// message (both Ingest & Create) on the corresponding notification destination. Only the message name
	// is sent as part of the notification. Supplied by the client.
	// +kubebuilder:validation:Optional
	NotificationConfigs []NotificationConfigsParameters `json:"notificationConfigs,omitempty" tf:"notification_configs,omitempty"`

	// A nested object resource
	// +kubebuilder:validation:Optional
	ParserConfig []ParserConfigParameters `json:"parserConfig,omitempty" tf:"parser_config,omitempty"`
}

type NotificationConfigsObservation struct {
}

type NotificationConfigsParameters struct {

	// Restricts notifications sent for messages matching a filter. If this is empty, all messages
	// are matched. Syntax: https://cloud.google.com/appengine/docs/standard/python/search/query_strings
	//
	// Fields/functions available for filtering are:
	//
	// * messageType, from the MSH-9.1 field. For example, NOT messageType = "ADT".
	// * send_date or sendDate, the YYYY-MM-DD date the message was sent in the dataset's timeZone, from the MSH-7 segment. For example, send_date < "2017-01-02".
	// * sendTime, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, sendTime < "2017-01-02T00:00:00-05:00".
	// * sendFacility, the care center that the message came from, from the MSH-4 segment. For example, sendFacility = "ABC".
	// * PatientId(value, type), which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, PatientId("123456", "MRN").
	// * labels.x, a string value of the label with key x as set using the Message.labels map. For example, labels."priority"="high". The operator :* can be used to assert the existence of a label. For example, labels."priority":*.
	// +kubebuilder:validation:Optional
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.
	// PubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.
	// It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message
	// was published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a
	// project. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given
	// Cloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.
	//
	// If a notification cannot be published to Cloud Pub/Sub, errors will be logged to Stackdriver
	// +kubebuilder:validation:Required
	PubsubTopic *string `json:"pubsubTopic" tf:"pubsub_topic,omitempty"`
}

type ParserConfigObservation struct {
}

type ParserConfigParameters struct {

	// Determines whether messages with no header are allowed.
	// +kubebuilder:validation:Optional
	AllowNullHeader *bool `json:"allowNullHeader,omitempty" tf:"allow_null_header,omitempty"`

	// JSON encoded string for schemas used to parse messages in this
	// store if schematized parsing is desired.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// Byte(s) to be used as the segment terminator. If this is unset, '\r' will be used as segment terminator.
	//
	// A base64-encoded string.
	// +kubebuilder:validation:Optional
	SegmentTerminator *string `json:"segmentTerminator,omitempty" tf:"segment_terminator,omitempty"`

	// The version of the unschematized parser to be used when a custom 'schema' is not set. Default value: "V1" Possible values: ["V1", "V2"]
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

// HL7V2StoreSpec defines the desired state of HL7V2Store
type HL7V2StoreSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HL7V2StoreParameters `json:"forProvider"`
}

// HL7V2StoreStatus defines the observed state of HL7V2Store.
type HL7V2StoreStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HL7V2StoreObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HL7V2Store is the Schema for the HL7V2Stores API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type HL7V2Store struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HL7V2StoreSpec   `json:"spec"`
	Status            HL7V2StoreStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HL7V2StoreList contains a list of HL7V2Stores
type HL7V2StoreList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HL7V2Store `json:"items"`
}

// Repository type metadata.
var (
	HL7V2Store_Kind             = "HL7V2Store"
	HL7V2Store_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HL7V2Store_Kind}.String()
	HL7V2Store_KindAPIVersion   = HL7V2Store_Kind + "." + CRDGroupVersion.String()
	HL7V2Store_GroupVersionKind = CRDGroupVersion.WithKind(HL7V2Store_Kind)
)

func init() {
	SchemeBuilder.Register(&HL7V2Store{}, &HL7V2StoreList{})
}
