/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConsentStoreIamMemberConditionObservation struct {
}

type ConsentStoreIamMemberConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type ConsentStoreIamMemberObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`
}

type ConsentStoreIamMemberParameters struct {

	// +kubebuilder:validation:Optional
	Condition []ConsentStoreIamMemberConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	ConsentStoreID *string `json:"consentStoreId" tf:"consent_store_id,omitempty"`

	// +kubebuilder:validation:Required
	Dataset *string `json:"dataset" tf:"dataset,omitempty"`

	// +kubebuilder:validation:Required
	Member *string `json:"member" tf:"member,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// ConsentStoreIamMemberSpec defines the desired state of ConsentStoreIamMember
type ConsentStoreIamMemberSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConsentStoreIamMemberParameters `json:"forProvider"`
}

// ConsentStoreIamMemberStatus defines the observed state of ConsentStoreIamMember.
type ConsentStoreIamMemberStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConsentStoreIamMemberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConsentStoreIamMember is the Schema for the ConsentStoreIamMembers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type ConsentStoreIamMember struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConsentStoreIamMemberSpec   `json:"spec"`
	Status            ConsentStoreIamMemberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConsentStoreIamMemberList contains a list of ConsentStoreIamMembers
type ConsentStoreIamMemberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConsentStoreIamMember `json:"items"`
}

// Repository type metadata.
var (
	ConsentStoreIamMember_Kind             = "ConsentStoreIamMember"
	ConsentStoreIamMember_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConsentStoreIamMember_Kind}.String()
	ConsentStoreIamMember_KindAPIVersion   = ConsentStoreIamMember_Kind + "." + CRDGroupVersion.String()
	ConsentStoreIamMember_GroupVersionKind = CRDGroupVersion.WithKind(ConsentStoreIamMember_Kind)
)

func init() {
	SchemeBuilder.Register(&ConsentStoreIamMember{}, &ConsentStoreIamMemberList{})
}
