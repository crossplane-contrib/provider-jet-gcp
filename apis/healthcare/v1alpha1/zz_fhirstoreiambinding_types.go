/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FHIRStoreIAMBindingConditionObservation struct {
}

type FHIRStoreIAMBindingConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type FHIRStoreIAMBindingObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FHIRStoreIAMBindingParameters struct {

	// +kubebuilder:validation:Optional
	Condition []FHIRStoreIAMBindingConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	FHIRStoreID *string `json:"fhirStoreId" tf:"fhir_store_id,omitempty"`

	// +kubebuilder:validation:Required
	Members []*string `json:"members" tf:"members,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// FHIRStoreIAMBindingSpec defines the desired state of FHIRStoreIAMBinding
type FHIRStoreIAMBindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FHIRStoreIAMBindingParameters `json:"forProvider"`
}

// FHIRStoreIAMBindingStatus defines the observed state of FHIRStoreIAMBinding.
type FHIRStoreIAMBindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FHIRStoreIAMBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FHIRStoreIAMBinding is the Schema for the FHIRStoreIAMBindings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type FHIRStoreIAMBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FHIRStoreIAMBindingSpec   `json:"spec"`
	Status            FHIRStoreIAMBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FHIRStoreIAMBindingList contains a list of FHIRStoreIAMBindings
type FHIRStoreIAMBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FHIRStoreIAMBinding `json:"items"`
}

// Repository type metadata.
var (
	FHIRStoreIAMBinding_Kind             = "FHIRStoreIAMBinding"
	FHIRStoreIAMBinding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FHIRStoreIAMBinding_Kind}.String()
	FHIRStoreIAMBinding_KindAPIVersion   = FHIRStoreIAMBinding_Kind + "." + CRDGroupVersion.String()
	FHIRStoreIAMBinding_GroupVersionKind = CRDGroupVersion.WithKind(FHIRStoreIAMBinding_Kind)
)

func init() {
	SchemeBuilder.Register(&FHIRStoreIAMBinding{}, &FHIRStoreIAMBindingList{})
}
