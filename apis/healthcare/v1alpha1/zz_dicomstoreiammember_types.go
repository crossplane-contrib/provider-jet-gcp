/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DicomStoreIamMemberConditionObservation struct {
}

type DicomStoreIamMemberConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type DicomStoreIamMemberObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`
}

type DicomStoreIamMemberParameters struct {

	// +kubebuilder:validation:Optional
	Condition []DicomStoreIamMemberConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	DicomStoreID *string `json:"dicomStoreId" tf:"dicom_store_id,omitempty"`

	// +kubebuilder:validation:Required
	Member *string `json:"member" tf:"member,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// DicomStoreIamMemberSpec defines the desired state of DicomStoreIamMember
type DicomStoreIamMemberSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DicomStoreIamMemberParameters `json:"forProvider"`
}

// DicomStoreIamMemberStatus defines the observed state of DicomStoreIamMember.
type DicomStoreIamMemberStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DicomStoreIamMemberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DicomStoreIamMember is the Schema for the DicomStoreIamMembers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type DicomStoreIamMember struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DicomStoreIamMemberSpec   `json:"spec"`
	Status            DicomStoreIamMemberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DicomStoreIamMemberList contains a list of DicomStoreIamMembers
type DicomStoreIamMemberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DicomStoreIamMember `json:"items"`
}

// Repository type metadata.
var (
	DicomStoreIamMember_Kind             = "DicomStoreIamMember"
	DicomStoreIamMember_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DicomStoreIamMember_Kind}.String()
	DicomStoreIamMember_KindAPIVersion   = DicomStoreIamMember_Kind + "." + CRDGroupVersion.String()
	DicomStoreIamMember_GroupVersionKind = CRDGroupVersion.WithKind(DicomStoreIamMember_Kind)
)

func init() {
	SchemeBuilder.Register(&DicomStoreIamMember{}, &DicomStoreIamMemberList{})
}
