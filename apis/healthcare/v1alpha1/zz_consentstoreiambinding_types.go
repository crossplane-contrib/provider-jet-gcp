/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConditionObservation struct {
}

type ConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type ConsentStoreIamBindingObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ConsentStoreIamBindingParameters struct {

	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	ConsentStoreID *string `json:"consentStoreId" tf:"consent_store_id,omitempty"`

	// +kubebuilder:validation:Required
	Dataset *string `json:"dataset" tf:"dataset,omitempty"`

	// +kubebuilder:validation:Required
	Members []*string `json:"members" tf:"members,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// ConsentStoreIamBindingSpec defines the desired state of ConsentStoreIamBinding
type ConsentStoreIamBindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConsentStoreIamBindingParameters `json:"forProvider"`
}

// ConsentStoreIamBindingStatus defines the observed state of ConsentStoreIamBinding.
type ConsentStoreIamBindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConsentStoreIamBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConsentStoreIamBinding is the Schema for the ConsentStoreIamBindings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type ConsentStoreIamBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConsentStoreIamBindingSpec   `json:"spec"`
	Status            ConsentStoreIamBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConsentStoreIamBindingList contains a list of ConsentStoreIamBindings
type ConsentStoreIamBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConsentStoreIamBinding `json:"items"`
}

// Repository type metadata.
var (
	ConsentStoreIamBinding_Kind             = "ConsentStoreIamBinding"
	ConsentStoreIamBinding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConsentStoreIamBinding_Kind}.String()
	ConsentStoreIamBinding_KindAPIVersion   = ConsentStoreIamBinding_Kind + "." + CRDGroupVersion.String()
	ConsentStoreIamBinding_GroupVersionKind = CRDGroupVersion.WithKind(ConsentStoreIamBinding_Kind)
)

func init() {
	SchemeBuilder.Register(&ConsentStoreIamBinding{}, &ConsentStoreIamBindingList{})
}
