/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BigQueryFieldObservation struct {
}

type BigQueryFieldParameters struct {

	// Designated field in the BigQuery table.
	// +kubebuilder:validation:Required
	Field []FieldParameters `json:"field" tf:"field,omitempty"`

	// Field in a BigQuery table where each cell represents a dictionary phrase.
	// +kubebuilder:validation:Required
	Table []BigQueryFieldTableParameters `json:"table" tf:"table,omitempty"`
}

type BigQueryFieldTableObservation struct {
}

type BigQueryFieldTableParameters struct {

	// The dataset ID of the table.
	// +kubebuilder:validation:Required
	DatasetID *string `json:"datasetId" tf:"dataset_id,omitempty"`

	// The Google Cloud Platform project ID of the project containing the table.
	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`

	// The name of the table.
	// +kubebuilder:validation:Required
	TableID *string `json:"tableId" tf:"table_id,omitempty"`
}

type CloudStorageFileSetObservation struct {
}

type CloudStorageFileSetParameters struct {

	// The url, in the format 'gs://<bucket>/<path>'. Trailing wildcard in the path is allowed.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`
}

type FieldObservation struct {
}

type FieldParameters struct {

	// Name describing the field.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type LargeCustomDictionaryObservation struct {
}

type LargeCustomDictionaryParameters struct {

	// Field in a BigQuery table where each cell represents a dictionary phrase.
	// +kubebuilder:validation:Optional
	BigQueryField []BigQueryFieldParameters `json:"bigQueryField,omitempty" tf:"big_query_field,omitempty"`

	// Set of files containing newline-delimited lists of dictionary phrases.
	// +kubebuilder:validation:Optional
	CloudStorageFileSet []CloudStorageFileSetParameters `json:"cloudStorageFileSet,omitempty" tf:"cloud_storage_file_set,omitempty"`

	// Location to store dictionary artifacts in Google Cloud Storage. These files will only be accessible by project owners and the DLP API.
	// If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.
	// +kubebuilder:validation:Required
	OutputPath []OutputPathParameters `json:"outputPath" tf:"output_path,omitempty"`
}

type OutputPathObservation struct {
}

type OutputPathParameters struct {

	// A url representing a file or path (no wildcards) in Cloud Storage. Example: 'gs://[BUCKET_NAME]/dictionary.txt'
	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`
}

type StoredInfoTypeDictionaryCloudStoragePathObservation struct {
}

type StoredInfoTypeDictionaryCloudStoragePathParameters struct {

	// A url representing a file or path (no wildcards) in Cloud Storage. Example: 'gs://[BUCKET_NAME]/dictionary.txt'
	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`
}

type StoredInfoTypeDictionaryObservation struct {
}

type StoredInfoTypeDictionaryParameters struct {

	// Newline-delimited file of words in Cloud Storage. Only a single file is accepted.
	// +kubebuilder:validation:Optional
	CloudStoragePath []StoredInfoTypeDictionaryCloudStoragePathParameters `json:"cloudStoragePath,omitempty" tf:"cloud_storage_path,omitempty"`

	// List of words or phrases to search for.
	// +kubebuilder:validation:Optional
	WordList []StoredInfoTypeDictionaryWordListParameters `json:"wordList,omitempty" tf:"word_list,omitempty"`
}

type StoredInfoTypeDictionaryWordListObservation struct {
}

type StoredInfoTypeDictionaryWordListParameters struct {

	// Words or phrases defining the dictionary. The dictionary must contain at least one
	// phrase and every phrase must contain at least 2 characters that are letters or digits.
	// +kubebuilder:validation:Required
	Words []*string `json:"words" tf:"words,omitempty"`
}

type StoredInfoTypeObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type StoredInfoTypeParameters struct {

	// A description of the info type.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Dictionary which defines the rule.
	// +kubebuilder:validation:Optional
	Dictionary []StoredInfoTypeDictionaryParameters `json:"dictionary,omitempty" tf:"dictionary,omitempty"`

	// User set display name of the info type.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Dictionary which defines the rule.
	// +kubebuilder:validation:Optional
	LargeCustomDictionary []LargeCustomDictionaryParameters `json:"largeCustomDictionary,omitempty" tf:"large_custom_dictionary,omitempty"`

	// The parent of the info type in any of the following formats:
	//
	// * 'projects/{{project}}'
	// * 'projects/{{project}}/locations/{{location}}'
	// * 'organizations/{{organization_id}}'
	// * 'organizations/{{organization_id}}/locations/{{location}}'
	// +kubebuilder:validation:Required
	Parent *string `json:"parent" tf:"parent,omitempty"`

	// Regular expression which defines the rule.
	// +kubebuilder:validation:Optional
	Regex []StoredInfoTypeRegexParameters `json:"regex,omitempty" tf:"regex,omitempty"`
}

type StoredInfoTypeRegexObservation struct {
}

type StoredInfoTypeRegexParameters struct {

	// The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.
	// +kubebuilder:validation:Optional
	GroupIndexes []*int64 `json:"groupIndexes,omitempty" tf:"group_indexes,omitempty"`

	// Pattern defining the regular expression.
	// Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.
	// +kubebuilder:validation:Required
	Pattern *string `json:"pattern" tf:"pattern,omitempty"`
}

// StoredInfoTypeSpec defines the desired state of StoredInfoType
type StoredInfoTypeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StoredInfoTypeParameters `json:"forProvider"`
}

// StoredInfoTypeStatus defines the observed state of StoredInfoType.
type StoredInfoTypeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StoredInfoTypeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StoredInfoType is the Schema for the StoredInfoTypes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type StoredInfoType struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StoredInfoTypeSpec   `json:"spec"`
	Status            StoredInfoTypeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StoredInfoTypeList contains a list of StoredInfoTypes
type StoredInfoTypeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StoredInfoType `json:"items"`
}

// Repository type metadata.
var (
	StoredInfoType_Kind             = "StoredInfoType"
	StoredInfoType_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StoredInfoType_Kind}.String()
	StoredInfoType_KindAPIVersion   = StoredInfoType_Kind + "." + CRDGroupVersion.String()
	StoredInfoType_GroupVersionKind = CRDGroupVersion.WithKind(StoredInfoType_Kind)
)

func init() {
	SchemeBuilder.Register(&StoredInfoType{}, &StoredInfoTypeList{})
}
