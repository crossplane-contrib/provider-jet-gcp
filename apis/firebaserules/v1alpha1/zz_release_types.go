/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ReleaseObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type ReleaseParameters struct {

	// Format: `projects/{project_id}/releases/{release_id}`
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The project for the resource
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Name of the `Ruleset` referred to by this `Release`. The `Ruleset` must exist the `Release` to be created.
	// +kubebuilder:validation:Required
	RulesetName *string `json:"rulesetName" tf:"ruleset_name,omitempty"`
}

// ReleaseSpec defines the desired state of Release
type ReleaseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ReleaseParameters `json:"forProvider"`
}

// ReleaseStatus defines the observed state of Release.
type ReleaseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReleaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Release is the Schema for the Releases API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type Release struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ReleaseSpec   `json:"spec"`
	Status            ReleaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReleaseList contains a list of Releases
type ReleaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Release `json:"items"`
}

// Repository type metadata.
var (
	Release_Kind             = "Release"
	Release_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Release_Kind}.String()
	Release_KindAPIVersion   = Release_Kind + "." + CRDGroupVersion.String()
	Release_GroupVersionKind = CRDGroupVersion.WithKind(Release_Kind)
)

func init() {
	SchemeBuilder.Register(&Release{}, &ReleaseList{})
}
