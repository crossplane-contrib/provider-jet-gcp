/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigMapRefObservation struct {
}

type ConfigMapRefParameters struct {

	// The ConfigMap to select from.
	// +kubebuilder:validation:Optional
	LocalObjectReference []LocalObjectReferenceParameters `json:"localObjectReference,omitempty" tf:"local_object_reference,omitempty"`

	// Specify whether the ConfigMap must be defined
	// +kubebuilder:validation:Optional
	Optional *bool `json:"optional,omitempty" tf:"optional,omitempty"`
}

type ContainersObservation struct {
}

type ContainersParameters struct {

	// Arguments to the entrypoint.
	// The docker image's CMD is used if this is not provided.
	// Variable references $(VAR_NAME) are expanded using the container's
	// environment. If a variable cannot be resolved, the reference in the input
	// string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
	// double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
	// regardless of whether the variable exists or not.
	// More info:
	// https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	// +kubebuilder:validation:Optional
	Args []*string `json:"args,omitempty" tf:"args,omitempty"`

	// Entrypoint array. Not executed within a shell.
	// The docker image's ENTRYPOINT is used if this is not provided.
	// Variable references $(VAR_NAME) are expanded using the container's
	// environment. If a variable cannot be resolved, the reference in the input
	// string will be unchanged. The $(VAR_NAME) syntax can be escaped with a
	// double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
	// regardless of whether the variable exists or not.
	// More info:
	// https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
	// +kubebuilder:validation:Optional
	Command []*string `json:"command,omitempty" tf:"command,omitempty"`

	// List of environment variables to set in the container.
	// +kubebuilder:validation:Optional
	Env []EnvParameters `json:"env,omitempty" tf:"env,omitempty"`

	// List of sources to populate environment variables in the container.
	// All invalid keys will be reported as an event when the container is starting.
	// When a key exists in multiple sources, the value associated with the last source will
	// take precedence. Values defined by an Env with a duplicate key will take
	// precedence.
	// +kubebuilder:validation:Optional
	EnvFrom []EnvFromParameters `json:"envFrom,omitempty" tf:"env_from,omitempty"`

	// Docker image name. This is most often a reference to a container located
	// in the container registry, such as gcr.io/cloudrun/hello
	// More info: https://kubernetes.io/docs/concepts/containers/images
	// +kubebuilder:validation:Required
	Image *string `json:"image" tf:"image,omitempty"`

	// List of open ports in the container.
	// More Info:
	// https://cloud.google.com/run/docs/reference/rest/v1/RevisionSpec#ContainerPort
	// +kubebuilder:validation:Optional
	Ports []PortsParameters `json:"ports,omitempty" tf:"ports,omitempty"`

	// Compute Resources required by this container. Used to set values such as max memory
	// More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#requests-and-limits
	// +kubebuilder:validation:Optional
	Resources []ResourcesParameters `json:"resources,omitempty" tf:"resources,omitempty"`

	// Container's working directory.
	// If not specified, the container runtime's default will be used, which
	// might be configured in the container image.
	// +kubebuilder:validation:Optional
	WorkingDir *string `json:"workingDir,omitempty" tf:"working_dir,omitempty"`
}

type EnvFromObservation struct {
}

type EnvFromParameters struct {

	// The ConfigMap to select from.
	// +kubebuilder:validation:Optional
	ConfigMapRef []ConfigMapRefParameters `json:"configMapRef,omitempty" tf:"config_map_ref,omitempty"`

	// An optional identifier to prepend to each key in the ConfigMap.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// The Secret to select from.
	// +kubebuilder:validation:Optional
	SecretRef []SecretRefParameters `json:"secretRef,omitempty" tf:"secret_ref,omitempty"`
}

type EnvObservation struct {
}

type EnvParameters struct {

	// Name of the environment variable.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Variable references $(VAR_NAME) are expanded
	// using the previous defined environment variables in the container and
	// any route environment variables. If a variable cannot be resolved,
	// the reference in the input string will be unchanged. The $(VAR_NAME)
	// syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
	// references will never be expanded, regardless of whether the variable
	// exists or not.
	// Defaults to "".
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LocalObjectReferenceObservation struct {
}

type LocalObjectReferenceParameters struct {

	// Name of the referent.
	// More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type PortsObservation struct {
}

type PortsParameters struct {

	// Port number.
	// +kubebuilder:validation:Required
	ContainerPort *int64 `json:"containerPort" tf:"container_port,omitempty"`

	// Name of the port.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Protocol used on port. Defaults to TCP.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type ResourcesObservation struct {
}

type ResourcesParameters struct {

	// Limits describes the maximum amount of compute resources allowed.
	// The values of the map is string form of the 'quantity' k8s type:
	// https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	// +kubebuilder:validation:Optional
	Limits map[string]*string `json:"limits,omitempty" tf:"limits,omitempty"`

	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is
	// explicitly specified, otherwise to an implementation-defined value.
	// The values of the map is string form of the 'quantity' k8s type:
	// https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go
	// +kubebuilder:validation:Optional
	Requests map[string]*string `json:"requests,omitempty" tf:"requests,omitempty"`
}

type SecretRefLocalObjectReferenceObservation struct {
}

type SecretRefLocalObjectReferenceParameters struct {

	// Name of the referent.
	// More info:
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type SecretRefObservation struct {
}

type SecretRefParameters struct {

	// The Secret to select from.
	// +kubebuilder:validation:Optional
	LocalObjectReference []SecretRefLocalObjectReferenceParameters `json:"localObjectReference,omitempty" tf:"local_object_reference,omitempty"`

	// Specify whether the Secret must be defined
	// +kubebuilder:validation:Optional
	Optional *bool `json:"optional,omitempty" tf:"optional,omitempty"`
}

type ServiceMetadataObservation struct {
	Generation *int64 `json:"generation,omitempty" tf:"generation,omitempty"`

	ResourceVersion *string `json:"resourceVersion,omitempty" tf:"resource_version,omitempty"`

	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`

	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type ServiceMetadataParameters struct {

	// Annotations is a key value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata. More
	// info: http://kubernetes.io/docs/user-guide/annotations
	//
	// **Note**: The Cloud Run API may add additional annotations that were not provided in your config.
	// If terraform plan shows a diff where a server-side annotation is added, you can add it to your config
	// or apply the lifecycle.ignore_changes rule to the metadata.0.annotations field.
	//
	// Cloud Run (fully managed) uses the following annotation keys to configure features on a Service:
	//
	// - 'run.googleapis.com/ingress' sets the [ingress settings](https://cloud.google.com/sdk/gcloud/reference/run/deploy#--ingress)
	// for the Service. For example, '"run.googleapis.com/ingress" = "all"'.
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and routes.
	// More info: http://kubernetes.io/docs/user-guide/labels
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// In Cloud Run the namespace must be equal to either the
	// project ID or project number.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type ServiceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status []ServiceStatusObservation `json:"status,omitempty" tf:"status,omitempty"`
}

type ServiceParameters struct {

	// +kubebuilder:validation:Optional
	AutogenerateRevisionName *bool `json:"autogenerateRevisionName,omitempty" tf:"autogenerate_revision_name,omitempty"`

	// The location of the cloud run instance. eg us-central1
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// Metadata associated with this Service, including name, namespace, labels,
	// and annotations.
	// +kubebuilder:validation:Optional
	Metadata []ServiceMetadataParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Name must be unique within a namespace, within a Cloud Run region.
	// Is required when creating resources. Name is primarily intended
	// for creation idempotence and configuration definition. Cannot be updated.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#names
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// template holds the latest specification for the Revision to
	// be stamped out. The template references the container image, and may also
	// include labels and annotations that should be attached to the Revision.
	// To correlate a Revision, and/or to force a Revision to be created when the
	// spec doesn't otherwise change, a nonce label may be provided in the
	// template metadata. For more details, see:
	// https://github.com/knative/serving/blob/master/docs/client-conventions.md#associate-modifications-with-revisions
	//
	// Cloud Run does not currently support referencing a build that is
	// responsible for materializing the container image from source.
	// +kubebuilder:validation:Optional
	Template []TemplateParameters `json:"template,omitempty" tf:"template,omitempty"`

	// Traffic specifies how to distribute traffic over a collection of Knative Revisions
	// and Configurations
	// +kubebuilder:validation:Optional
	Traffic []TrafficParameters `json:"traffic,omitempty" tf:"traffic,omitempty"`
}

type ServiceStatusObservation struct {
	Conditions []StatusConditionsObservation `json:"conditions,omitempty" tf:"conditions,omitempty"`

	LatestCreatedRevisionName *string `json:"latestCreatedRevisionName,omitempty" tf:"latest_created_revision_name,omitempty"`

	LatestReadyRevisionName *string `json:"latestReadyRevisionName,omitempty" tf:"latest_ready_revision_name,omitempty"`

	ObservedGeneration *int64 `json:"observedGeneration,omitempty" tf:"observed_generation,omitempty"`

	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type ServiceStatusParameters struct {
}

type StatusConditionsObservation struct {
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	Reason *string `json:"reason,omitempty" tf:"reason,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StatusConditionsParameters struct {
}

type TemplateMetadataObservation struct {
	Generation *int64 `json:"generation,omitempty" tf:"generation,omitempty"`

	ResourceVersion *string `json:"resourceVersion,omitempty" tf:"resource_version,omitempty"`

	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`

	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type TemplateMetadataParameters struct {

	// Annotations is a key value map stored with a resource that
	// may be set by external tools to store and retrieve arbitrary metadata. More
	// info: http://kubernetes.io/docs/user-guide/annotations
	//
	// **Note**: The Cloud Run API may add additional annotations that were not provided in your config.
	// If terraform plan shows a diff where a server-side annotation is added, you can add it to your config
	// or apply the lifecycle.ignore_changes rule to the metadata.0.annotations field.
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and routes.
	// More info: http://kubernetes.io/docs/user-guide/labels
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Name must be unique within a namespace, within a Cloud Run region.
	// Is required when creating resources. Name is primarily intended
	// for creation idempotence and configuration definition. Cannot be updated.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#names
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// In Cloud Run the namespace must be equal to either the
	// project ID or project number. It will default to the resource's project.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type TemplateObservation struct {
}

type TemplateParameters struct {

	// Optional metadata for this Revision, including labels and annotations.
	// Name will be generated by the Configuration. To set minimum instances
	// for this revision, use the "autoscaling.knative.dev/minScale" annotation
	// key. To set maximum instances for this revision, use the
	// "autoscaling.knative.dev/maxScale" annotation key. To set Cloud SQL
	// connections for the revision, use the "run.googleapis.com/cloudsql-instances"
	// annotation key.
	// +kubebuilder:validation:Optional
	Metadata []TemplateMetadataParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// RevisionSpec holds the desired state of the Revision (from the client).
	// +kubebuilder:validation:Optional
	Spec []TemplateSpecParameters `json:"spec,omitempty" tf:"spec,omitempty"`
}

type TemplateSpecObservation struct {
	ServingState *string `json:"servingState,omitempty" tf:"serving_state,omitempty"`
}

type TemplateSpecParameters struct {

	// ContainerConcurrency specifies the maximum allowed in-flight (concurrent)
	// requests per container of the Revision. Values are:
	// - '0' thread-safe, the system should manage the max concurrency. This is
	// the default value.
	// - '1' not-thread-safe. Single concurrency
	// - '2-N' thread-safe, max concurrency of N
	// +kubebuilder:validation:Optional
	ContainerConcurrency *int64 `json:"containerConcurrency,omitempty" tf:"container_concurrency,omitempty"`

	// Container defines the unit of execution for this Revision.
	// In the context of a Revision, we disallow a number of the fields of
	// this Container, including: name, ports, and volumeMounts.
	// The runtime contract is documented here:
	// https://github.com/knative/serving/blob/master/docs/runtime-contract.md
	// +kubebuilder:validation:Optional
	Containers []ContainersParameters `json:"containers,omitempty" tf:"containers,omitempty"`

	// Email address of the IAM service account associated with the revision of the
	// service. The service account represents the identity of the running revision,
	// and determines what permissions the revision has. If not provided, the revision
	// will use the project's default service account.
	// +kubebuilder:validation:Optional
	ServiceAccountName *string `json:"serviceAccountName,omitempty" tf:"service_account_name,omitempty"`

	// TimeoutSeconds holds the max duration the instance is allowed for responding to a request.
	// +kubebuilder:validation:Optional
	TimeoutSeconds *int64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds,omitempty"`
}

type TrafficObservation struct {
}

type TrafficParameters struct {

	// LatestRevision may be optionally provided to indicate that the latest ready
	// Revision of the Configuration should be used for this traffic target. When
	// provided LatestRevision must be true if RevisionName is empty; it must be
	// false when RevisionName is non-empty.
	// +kubebuilder:validation:Optional
	LatestRevision *bool `json:"latestRevision,omitempty" tf:"latest_revision,omitempty"`

	// Percent specifies percent of the traffic to this Revision or Configuration.
	// +kubebuilder:validation:Required
	Percent *int64 `json:"percent" tf:"percent,omitempty"`

	// RevisionName of a specific revision to which to send this portion of traffic.
	// +kubebuilder:validation:Optional
	RevisionName *string `json:"revisionName,omitempty" tf:"revision_name,omitempty"`
}

// ServiceSpec defines the desired state of Service
type ServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceParameters `json:"forProvider"`
}

// ServiceStatus defines the observed state of Service.
type ServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Service is the Schema for the Services API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type Service struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceSpec   `json:"spec"`
	Status            ServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceList contains a list of Services
type ServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Service `json:"items"`
}

// Repository type metadata.
var (
	Service_Kind             = "Service"
	Service_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Service_Kind}.String()
	Service_KindAPIVersion   = Service_Kind + "." + CRDGroupVersion.String()
	Service_GroupVersionKind = CRDGroupVersion.WithKind(Service_Kind)
)

func init() {
	SchemeBuilder.Register(&Service{}, &ServiceList{})
}
