/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountIamBindingObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`
}

type AccountIamBindingParameters struct {

	// +kubebuilder:validation:Required
	BillingAccountID *string `json:"billingAccountId" tf:"billing_account_id,omitempty"`

	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	Members []*string `json:"members" tf:"members,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

type ConditionObservation struct {
}

type ConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

// AccountIamBindingSpec defines the desired state of AccountIamBinding
type AccountIamBindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccountIamBindingParameters `json:"forProvider"`
}

// AccountIamBindingStatus defines the observed state of AccountIamBinding.
type AccountIamBindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccountIamBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccountIamBinding is the Schema for the AccountIamBindings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type AccountIamBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccountIamBindingSpec   `json:"spec"`
	Status            AccountIamBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccountIamBindingList contains a list of AccountIamBindings
type AccountIamBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccountIamBinding `json:"items"`
}

// Repository type metadata.
var (
	AccountIamBinding_Kind             = "AccountIamBinding"
	AccountIamBinding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccountIamBinding_Kind}.String()
	AccountIamBinding_KindAPIVersion   = AccountIamBinding_Kind + "." + CRDGroupVersion.String()
	AccountIamBinding_GroupVersionKind = CRDGroupVersion.WithKind(AccountIamBinding_Kind)
)

func init() {
	SchemeBuilder.Register(&AccountIamBinding{}, &AccountIamBindingList{})
}
