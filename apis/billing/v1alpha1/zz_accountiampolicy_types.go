/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountIAMPolicyObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AccountIAMPolicyParameters struct {

	// +kubebuilder:validation:Required
	BillingAccountID *string `json:"billingAccountId" tf:"billing_account_id,omitempty"`

	// +kubebuilder:validation:Required
	PolicyData *string `json:"policyData" tf:"policy_data,omitempty"`
}

// AccountIAMPolicySpec defines the desired state of AccountIAMPolicy
type AccountIAMPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccountIAMPolicyParameters `json:"forProvider"`
}

// AccountIAMPolicyStatus defines the observed state of AccountIAMPolicy.
type AccountIAMPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccountIAMPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccountIAMPolicy is the Schema for the AccountIAMPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type AccountIAMPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccountIAMPolicySpec   `json:"spec"`
	Status            AccountIAMPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccountIAMPolicyList contains a list of AccountIAMPolicys
type AccountIAMPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccountIAMPolicy `json:"items"`
}

// Repository type metadata.
var (
	AccountIAMPolicy_Kind             = "AccountIAMPolicy"
	AccountIAMPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccountIAMPolicy_Kind}.String()
	AccountIAMPolicy_KindAPIVersion   = AccountIAMPolicy_Kind + "." + CRDGroupVersion.String()
	AccountIAMPolicy_GroupVersionKind = CRDGroupVersion.WithKind(AccountIAMPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&AccountIAMPolicy{}, &AccountIAMPolicyList{})
}
