/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkConfigObservation struct {
}

type NetworkConfigParameters struct {

	// Required. Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network. Must be in the format `projects/{project}/global/networks/{network}`, where `{project}` is a project number, such as `12345`, and `{network}` is the name of a VPC network in the project. See [Understanding network configuration options](https://cloud.google.com/cloud-build/docs/custom-workers/set-up-custom-worker-pool-environment#understanding_the_network_configuration_options)
	// +kubebuilder:validation:Required
	PeeredNetwork *string `json:"peeredNetwork" tf:"peered_network,omitempty"`
}

type WorkerConfigObservation struct {
}

type WorkerConfigParameters struct {

	// Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/cloud-build/docs/custom-workers/worker-pool-config-file). Specify a value of up to 1000. If `0` is specified, Cloud Build will use a standard disk size.
	// +kubebuilder:validation:Optional
	DiskSizeGb *float64 `json:"diskSizeGb,omitempty" tf:"disk_size_gb,omitempty"`

	// Machine type of a worker, such as `n1-standard-1`. See [Worker pool config file](https://cloud.google.com/cloud-build/docs/custom-workers/worker-pool-config-file). If left blank, Cloud Build will use `n1-standard-1`.
	// +kubebuilder:validation:Optional
	MachineType *string `json:"machineType,omitempty" tf:"machine_type,omitempty"`

	// If true, workers are created without any public address, which prevents network egress to public IPs.
	// +kubebuilder:validation:Optional
	NoExternalIP *bool `json:"noExternalIp,omitempty" tf:"no_external_ip,omitempty"`
}

type WorkerPoolObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	DeleteTime *string `json:"deleteTime,omitempty" tf:"delete_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type WorkerPoolParameters struct {

	// User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The location for the resource
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// User-defined name of the `WorkerPool`.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Network configuration for the `WorkerPool`.
	// +kubebuilder:validation:Optional
	NetworkConfig []NetworkConfigParameters `json:"networkConfig,omitempty" tf:"network_config,omitempty"`

	// The project for the resource
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Configuration to be used for a creating workers in the `WorkerPool`.
	// +kubebuilder:validation:Optional
	WorkerConfig []WorkerConfigParameters `json:"workerConfig,omitempty" tf:"worker_config,omitempty"`
}

// WorkerPoolSpec defines the desired state of WorkerPool
type WorkerPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WorkerPoolParameters `json:"forProvider"`
}

// WorkerPoolStatus defines the observed state of WorkerPool.
type WorkerPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WorkerPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WorkerPool is the Schema for the WorkerPools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type WorkerPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WorkerPoolSpec   `json:"spec"`
	Status            WorkerPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkerPoolList contains a list of WorkerPools
type WorkerPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WorkerPool `json:"items"`
}

// Repository type metadata.
var (
	WorkerPool_Kind             = "WorkerPool"
	WorkerPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WorkerPool_Kind}.String()
	WorkerPool_KindAPIVersion   = WorkerPool_Kind + "." + CRDGroupVersion.String()
	WorkerPool_GroupVersionKind = CRDGroupVersion.WithKind(WorkerPool_Kind)
)

func init() {
	SchemeBuilder.Register(&WorkerPool{}, &WorkerPoolList{})
}
