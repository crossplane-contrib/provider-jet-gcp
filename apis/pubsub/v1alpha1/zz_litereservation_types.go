/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LiteReservationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type LiteReservationParameters struct {

	// Name of the reservation.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The region of the pubsub lite reservation.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The reserved throughput capacity. Every unit of throughput capacity is
	// equivalent to 1 MiB/s of published messages or 2 MiB/s of subscribed
	// messages.
	// +kubebuilder:validation:Required
	ThroughputCapacity *int64 `json:"throughputCapacity" tf:"throughput_capacity,omitempty"`
}

// LiteReservationSpec defines the desired state of LiteReservation
type LiteReservationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LiteReservationParameters `json:"forProvider"`
}

// LiteReservationStatus defines the observed state of LiteReservation.
type LiteReservationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LiteReservationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LiteReservation is the Schema for the LiteReservations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type LiteReservation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LiteReservationSpec   `json:"spec"`
	Status            LiteReservationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LiteReservationList contains a list of LiteReservations
type LiteReservationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LiteReservation `json:"items"`
}

// Repository type metadata.
var (
	LiteReservation_Kind             = "LiteReservation"
	LiteReservation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LiteReservation_Kind}.String()
	LiteReservation_KindAPIVersion   = LiteReservation_Kind + "." + CRDGroupVersion.String()
	LiteReservation_GroupVersionKind = CRDGroupVersion.WithKind(LiteReservation_Kind)
)

func init() {
	SchemeBuilder.Register(&LiteReservation{}, &LiteReservationList{})
}
