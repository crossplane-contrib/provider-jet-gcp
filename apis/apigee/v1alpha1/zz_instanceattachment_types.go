/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstanceAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type InstanceAttachmentParameters struct {

	// The resource ID of the environment.
	// +kubebuilder:validation:Required
	Environment *string `json:"environment" tf:"environment,omitempty"`

	// The Apigee instance associated with the Apigee environment,
	// in the format 'organisations/{{org_name}}/instances/{{instance_name}}'.
	// +kubebuilder:validation:Required
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`
}

// InstanceAttachmentSpec defines the desired state of InstanceAttachment
type InstanceAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceAttachmentParameters `json:"forProvider"`
}

// InstanceAttachmentStatus defines the observed state of InstanceAttachment.
type InstanceAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceAttachment is the Schema for the InstanceAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type InstanceAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceAttachmentSpec   `json:"spec"`
	Status            InstanceAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceAttachmentList contains a list of InstanceAttachments
type InstanceAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstanceAttachment `json:"items"`
}

// Repository type metadata.
var (
	InstanceAttachment_Kind             = "InstanceAttachment"
	InstanceAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstanceAttachment_Kind}.String()
	InstanceAttachment_KindAPIVersion   = InstanceAttachment_Kind + "." + CRDGroupVersion.String()
	InstanceAttachment_GroupVersionKind = CRDGroupVersion.WithKind(InstanceAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&InstanceAttachment{}, &InstanceAttachmentList{})
}
