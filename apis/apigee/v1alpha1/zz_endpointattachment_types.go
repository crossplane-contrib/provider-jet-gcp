/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointAttachmentObservation struct {
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type EndpointAttachmentParameters struct {

	// ID of the endpoint attachment.
	// +kubebuilder:validation:Required
	EndpointAttachmentID *string `json:"endpointAttachmentId" tf:"endpoint_attachment_id,omitempty"`

	// Location of the endpoint attachment.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The Apigee Organization associated with the Apigee instance,
	// in the format 'organizations/{{org_name}}'.
	// +kubebuilder:validation:Required
	OrgID *string `json:"orgId" tf:"org_id,omitempty"`

	// Format: projects/*/regions/*/serviceAttachments/*
	// +kubebuilder:validation:Required
	ServiceAttachment *string `json:"serviceAttachment" tf:"service_attachment,omitempty"`
}

// EndpointAttachmentSpec defines the desired state of EndpointAttachment
type EndpointAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointAttachmentParameters `json:"forProvider"`
}

// EndpointAttachmentStatus defines the observed state of EndpointAttachment.
type EndpointAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointAttachment is the Schema for the EndpointAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type EndpointAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointAttachmentSpec   `json:"spec"`
	Status            EndpointAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointAttachmentList contains a list of EndpointAttachments
type EndpointAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EndpointAttachment `json:"items"`
}

// Repository type metadata.
var (
	EndpointAttachment_Kind             = "EndpointAttachment"
	EndpointAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EndpointAttachment_Kind}.String()
	EndpointAttachment_KindAPIVersion   = EndpointAttachment_Kind + "." + CRDGroupVersion.String()
	EndpointAttachment_GroupVersionKind = CRDGroupVersion.WithKind(EndpointAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&EndpointAttachment{}, &EndpointAttachmentList{})
}
