/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnvgroupAttachmentObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type EnvgroupAttachmentParameters struct {

	// The Apigee environment group associated with the Apigee environment,
	// in the format 'organizations/{{org_name}}/envgroups/{{envgroup_name}}'.
	// +kubebuilder:validation:Required
	EnvgroupID *string `json:"envgroupId" tf:"envgroup_id,omitempty"`

	// The resource ID of the environment.
	// +kubebuilder:validation:Required
	Environment *string `json:"environment" tf:"environment,omitempty"`
}

// EnvgroupAttachmentSpec defines the desired state of EnvgroupAttachment
type EnvgroupAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvgroupAttachmentParameters `json:"forProvider"`
}

// EnvgroupAttachmentStatus defines the observed state of EnvgroupAttachment.
type EnvgroupAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvgroupAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EnvgroupAttachment is the Schema for the EnvgroupAttachments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type EnvgroupAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EnvgroupAttachmentSpec   `json:"spec"`
	Status            EnvgroupAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvgroupAttachmentList contains a list of EnvgroupAttachments
type EnvgroupAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvgroupAttachment `json:"items"`
}

// Repository type metadata.
var (
	EnvgroupAttachment_Kind             = "EnvgroupAttachment"
	EnvgroupAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvgroupAttachment_Kind}.String()
	EnvgroupAttachment_KindAPIVersion   = EnvgroupAttachment_Kind + "." + CRDGroupVersion.String()
	EnvgroupAttachment_GroupVersionKind = CRDGroupVersion.WithKind(EnvgroupAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvgroupAttachment{}, &EnvgroupAttachmentList{})
}
