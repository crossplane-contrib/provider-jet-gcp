/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnvironmentIAMPolicyObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EnvironmentIAMPolicyParameters struct {

	// +kubebuilder:validation:Required
	EnvID *string `json:"envId" tf:"env_id,omitempty"`

	// +kubebuilder:validation:Required
	OrgID *string `json:"orgId" tf:"org_id,omitempty"`

	// +kubebuilder:validation:Required
	PolicyData *string `json:"policyData" tf:"policy_data,omitempty"`
}

// EnvironmentIAMPolicySpec defines the desired state of EnvironmentIAMPolicy
type EnvironmentIAMPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnvironmentIAMPolicyParameters `json:"forProvider"`
}

// EnvironmentIAMPolicyStatus defines the observed state of EnvironmentIAMPolicy.
type EnvironmentIAMPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnvironmentIAMPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentIAMPolicy is the Schema for the EnvironmentIAMPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type EnvironmentIAMPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EnvironmentIAMPolicySpec   `json:"spec"`
	Status            EnvironmentIAMPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnvironmentIAMPolicyList contains a list of EnvironmentIAMPolicys
type EnvironmentIAMPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnvironmentIAMPolicy `json:"items"`
}

// Repository type metadata.
var (
	EnvironmentIAMPolicy_Kind             = "EnvironmentIAMPolicy"
	EnvironmentIAMPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnvironmentIAMPolicy_Kind}.String()
	EnvironmentIAMPolicy_KindAPIVersion   = EnvironmentIAMPolicy_Kind + "." + CRDGroupVersion.String()
	EnvironmentIAMPolicy_GroupVersionKind = CRDGroupVersion.WithKind(EnvironmentIAMPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&EnvironmentIAMPolicy{}, &EnvironmentIAMPolicyList{})
}
