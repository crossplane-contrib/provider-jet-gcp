/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatasetAccessObservation struct {
	APIUpdatedMember *bool `json:"apiUpdatedMember,omitempty" tf:"api_updated_member,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DatasetAccessParameters struct {

	// A unique ID for this dataset, without the project name. The ID
	// must contain only letters (a-z, A-Z), numbers (0-9), or
	// underscores (_). The maximum length is 1,024 characters.
	// +kubebuilder:validation:Required
	DatasetID *string `json:"datasetId" tf:"dataset_id,omitempty"`

	// A domain to grant access to. Any users signed in with the
	// domain specified will be granted the specified access
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// An email address of a Google Group to grant access to.
	// +kubebuilder:validation:Optional
	GroupByEmail *string `json:"groupByEmail,omitempty" tf:"group_by_email,omitempty"`

	// Some other type of member that appears in the IAM Policy but isn't a user,
	// group, domain, or special group. For example: 'allUsers'
	// +kubebuilder:validation:Optional
	IAMMember *string `json:"iamMember,omitempty" tf:"iam_member,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Describes the rights granted to the user specified by the other
	// member of the access object. Basic, predefined, and custom roles are
	// supported. Predefined roles that have equivalent basic roles are
	// swapped by the API to their basic counterparts, and will show a diff
	// post-create. See
	// [official docs](https://cloud.google.com/bigquery/docs/access-control).
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// A special group to grant access to. Possible values include:
	//
	//
	// * 'projectOwners': Owners of the enclosing project.
	//
	//
	// * 'projectReaders': Readers of the enclosing project.
	//
	//
	// * 'projectWriters': Writers of the enclosing project.
	//
	//
	// * 'allAuthenticatedUsers': All authenticated BigQuery users.
	// +kubebuilder:validation:Optional
	SpecialGroup *string `json:"specialGroup,omitempty" tf:"special_group,omitempty"`

	// An email address of a user to grant access to. For example:
	// fred@example.com
	// +kubebuilder:validation:Optional
	UserByEmail *string `json:"userByEmail,omitempty" tf:"user_by_email,omitempty"`

	// A view from a different dataset to grant access to. Queries
	// executed against that view will have read access to tables in
	// this dataset. The role field is not required when this field is
	// set. If that view is updated by any user, access to the view
	// needs to be granted again via an update operation.
	// +kubebuilder:validation:Optional
	View []DatasetAccessViewParameters `json:"view,omitempty" tf:"view,omitempty"`
}

type DatasetAccessViewObservation struct {
}

type DatasetAccessViewParameters struct {

	// The ID of the dataset containing this table.
	// +kubebuilder:validation:Required
	DatasetID *string `json:"datasetId" tf:"dataset_id,omitempty"`

	// The ID of the project containing this table.
	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`

	// The ID of the table. The ID must contain only letters (a-z,
	// A-Z), numbers (0-9), or underscores (_). The maximum length
	// is 1,024 characters.
	// +kubebuilder:validation:Required
	TableID *string `json:"tableId" tf:"table_id,omitempty"`
}

// DatasetAccessSpec defines the desired state of DatasetAccess
type DatasetAccessSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DatasetAccessParameters `json:"forProvider"`
}

// DatasetAccessStatus defines the observed state of DatasetAccess.
type DatasetAccessStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DatasetAccessObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DatasetAccess is the Schema for the DatasetAccesss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type DatasetAccess struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatasetAccessSpec   `json:"spec"`
	Status            DatasetAccessStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DatasetAccessList contains a list of DatasetAccesss
type DatasetAccessList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatasetAccess `json:"items"`
}

// Repository type metadata.
var (
	DatasetAccess_Kind             = "DatasetAccess"
	DatasetAccess_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DatasetAccess_Kind}.String()
	DatasetAccess_KindAPIVersion   = DatasetAccess_Kind + "." + CRDGroupVersion.String()
	DatasetAccess_GroupVersionKind = CRDGroupVersion.WithKind(DatasetAccess_Kind)
)

func init() {
	SchemeBuilder.Register(&DatasetAccess{}, &DatasetAccessList{})
}
