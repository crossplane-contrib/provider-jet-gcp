/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessUrlsObservation struct {
	CaCertificateAccessURL *string `json:"caCertificateAccessUrl,omitempty" tf:"ca_certificate_access_url,omitempty"`

	CrlAccessURL *string `json:"crlAccessUrl,omitempty" tf:"crl_access_url,omitempty"`
}

type AccessUrlsParameters struct {
}

type CertificateAuthorityConfigObservation struct {
}

type CertificateAuthorityConfigParameters struct {

	// Specifies some of the values in a certificate that are related to the subject.
	// +kubebuilder:validation:Required
	SubjectConfig []ConfigSubjectConfigParameters `json:"subjectConfig" tf:"subject_config,omitempty"`

	// Describes how some of the technical X.509 fields in a certificate should be populated.
	// +kubebuilder:validation:Required
	X509Config []ConfigX509ConfigParameters `json:"x509Config" tf:"x509_config,omitempty"`
}

type CertificateAuthorityObservation struct {
	AccessUrls []AccessUrlsObservation `json:"accessUrls,omitempty" tf:"access_urls,omitempty"`

	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PemCaCertificates []*string `json:"pemCaCertificates,omitempty" tf:"pem_ca_certificates,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type CertificateAuthorityParameters struct {

	// The user provided Resource ID for this Certificate Authority.
	// +kubebuilder:validation:Required
	CertificateAuthorityID *string `json:"certificateAuthorityId" tf:"certificate_authority_id,omitempty"`

	// The config used to create a self-signed X.509 certificate or CSR.
	// +kubebuilder:validation:Required
	Config []CertificateAuthorityConfigParameters `json:"config" tf:"config,omitempty"`

	// The name of a Cloud Storage bucket where this CertificateAuthority will publish content,
	// such as the CA certificate and CRLs. This must be a bucket name, without any prefixes
	// (such as 'gs://') or suffixes (such as '.googleapis.com'). For example, to use a bucket named
	// my-bucket, you would simply specify 'my-bucket'. If not specified, a managed bucket will be
	// created.
	// +kubebuilder:validation:Optional
	GcsBucket *string `json:"gcsBucket,omitempty" tf:"gcs_bucket,omitempty"`

	// This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and unexpired certs.
	// Use with care. Defaults to 'false'.
	// +kubebuilder:validation:Optional
	IgnoreActiveCertificatesOnDeletion *bool `json:"ignoreActiveCertificatesOnDeletion,omitempty" tf:"ignore_active_certificates_on_deletion,omitempty"`

	// Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority
	// is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA
	// certificate. Otherwise, it is used to sign a CSR.
	// +kubebuilder:validation:Required
	KeySpec []KeySpecParameters `json:"keySpec" tf:"key_spec,omitempty"`

	// Labels with user-defined metadata.
	//
	// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
	// "1.3kg", "count": "3" }.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The desired lifetime of the CA certificate. Used to create the "notBeforeTime" and
	// "notAfterTime" fields inside an X.509 certificate. A duration in seconds with up to nine
	// fractional digits, terminated by 's'. Example: "3.5s".
	// +kubebuilder:validation:Optional
	Lifetime *string `json:"lifetime,omitempty" tf:"lifetime,omitempty"`

	// Location of the CertificateAuthority. A full list of valid locations can be found by
	// running 'gcloud privateca locations list'.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The name of the CaPool this Certificate Authority belongs to.
	// +kubebuilder:validation:Required
	Pool *string `json:"pool" tf:"pool,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The Type of this CertificateAuthority.
	//
	// ~> **Note:** For 'SUBORDINATE' Certificate Authorities, they need to
	// be manually activated (via Cloud Console of 'gcloud') before they can
	// issue certificates. Default value: "SELF_SIGNED" Possible values: ["SELF_SIGNED", "SUBORDINATE"]
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConfigSubjectConfigObservation struct {
}

type ConfigSubjectConfigParameters struct {

	// Contains distinguished name fields such as the location and organization.
	// +kubebuilder:validation:Required
	Subject []ConfigSubjectConfigSubjectParameters `json:"subject" tf:"subject,omitempty"`

	// The subject alternative name fields.
	// +kubebuilder:validation:Optional
	SubjectAltName []ConfigSubjectConfigSubjectAltNameParameters `json:"subjectAltName,omitempty" tf:"subject_alt_name,omitempty"`
}

type ConfigSubjectConfigSubjectAltNameObservation struct {
}

type ConfigSubjectConfigSubjectAltNameParameters struct {

	// Contains only valid, fully-qualified host names.
	// +kubebuilder:validation:Optional
	DNSNames []*string `json:"dnsNames,omitempty" tf:"dns_names,omitempty"`

	// Contains only valid RFC 2822 E-mail addresses.
	// +kubebuilder:validation:Optional
	EmailAddresses []*string `json:"emailAddresses,omitempty" tf:"email_addresses,omitempty"`

	// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
	// +kubebuilder:validation:Optional
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Contains only valid RFC 3986 URIs.
	// +kubebuilder:validation:Optional
	Uris []*string `json:"uris,omitempty" tf:"uris,omitempty"`
}

type ConfigSubjectConfigSubjectObservation struct {
}

type ConfigSubjectConfigSubjectParameters struct {

	// The common name of the distinguished name.
	// +kubebuilder:validation:Required
	CommonName *string `json:"commonName" tf:"common_name,omitempty"`

	// The country code of the subject.
	// +kubebuilder:validation:Optional
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// The locality or city of the subject.
	// +kubebuilder:validation:Optional
	Locality *string `json:"locality,omitempty" tf:"locality,omitempty"`

	// The organization of the subject.
	// +kubebuilder:validation:Required
	Organization *string `json:"organization" tf:"organization,omitempty"`

	// The organizational unit of the subject.
	// +kubebuilder:validation:Optional
	OrganizationalUnit *string `json:"organizationalUnit,omitempty" tf:"organizational_unit,omitempty"`

	// The postal code of the subject.
	// +kubebuilder:validation:Optional
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The province, territory, or regional state of the subject.
	// +kubebuilder:validation:Optional
	Province *string `json:"province,omitempty" tf:"province,omitempty"`

	// The street address of the subject.
	// +kubebuilder:validation:Optional
	StreetAddress *string `json:"streetAddress,omitempty" tf:"street_address,omitempty"`
}

type ConfigX509ConfigAdditionalExtensionsObservation struct {
}

type ConfigX509ConfigAdditionalExtensionsParameters struct {

	// Indicates whether or not this extension is critical (i.e., if the client does not know how to
	// handle this extension, the client should consider this to be an error).
	// +kubebuilder:validation:Required
	Critical *bool `json:"critical" tf:"critical,omitempty"`

	// Describes values that are relevant in a CA certificate.
	// +kubebuilder:validation:Required
	ObjectID []X509ConfigAdditionalExtensionsObjectIDParameters `json:"objectId" tf:"object_id,omitempty"`

	// The value of this X.509 extension. A base64-encoded string.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type ConfigX509ConfigCaOptionsObservation struct {
}

type ConfigX509ConfigCaOptionsParameters struct {

	// Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing,
	// the extension will be omitted from the CA certificate.
	// +kubebuilder:validation:Required
	IsCa *bool `json:"isCa" tf:"is_ca,omitempty"`

	// Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of
	// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this
	// value is missing, the max path length will be omitted from the CA certificate.
	// +kubebuilder:validation:Optional
	MaxIssuerPathLength *int64 `json:"maxIssuerPathLength,omitempty" tf:"max_issuer_path_length,omitempty"`
}

type ConfigX509ConfigKeyUsageBaseKeyUsageObservation struct {
}

type ConfigX509ConfigKeyUsageBaseKeyUsageParameters struct {

	// The key may be used to sign certificates.
	// +kubebuilder:validation:Optional
	CertSign *bool `json:"certSign,omitempty" tf:"cert_sign,omitempty"`

	// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
	// +kubebuilder:validation:Optional
	ContentCommitment *bool `json:"contentCommitment,omitempty" tf:"content_commitment,omitempty"`

	// The key may be used sign certificate revocation lists.
	// +kubebuilder:validation:Optional
	CrlSign *bool `json:"crlSign,omitempty" tf:"crl_sign,omitempty"`

	// The key may be used to encipher data.
	// +kubebuilder:validation:Optional
	DataEncipherment *bool `json:"dataEncipherment,omitempty" tf:"data_encipherment,omitempty"`

	// The key may be used to decipher only.
	// +kubebuilder:validation:Optional
	DecipherOnly *bool `json:"decipherOnly,omitempty" tf:"decipher_only,omitempty"`

	// The key may be used for digital signatures.
	// +kubebuilder:validation:Optional
	DigitalSignature *bool `json:"digitalSignature,omitempty" tf:"digital_signature,omitempty"`

	// The key may be used to encipher only.
	// +kubebuilder:validation:Optional
	EncipherOnly *bool `json:"encipherOnly,omitempty" tf:"encipher_only,omitempty"`

	// The key may be used in a key agreement protocol.
	// +kubebuilder:validation:Optional
	KeyAgreement *bool `json:"keyAgreement,omitempty" tf:"key_agreement,omitempty"`

	// The key may be used to encipher other keys.
	// +kubebuilder:validation:Optional
	KeyEncipherment *bool `json:"keyEncipherment,omitempty" tf:"key_encipherment,omitempty"`
}

type ConfigX509ConfigKeyUsageExtendedKeyUsageObservation struct {
}

type ConfigX509ConfigKeyUsageExtendedKeyUsageParameters struct {

	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
	// +kubebuilder:validation:Optional
	ClientAuth *bool `json:"clientAuth,omitempty" tf:"client_auth,omitempty"`

	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
	// +kubebuilder:validation:Optional
	CodeSigning *bool `json:"codeSigning,omitempty" tf:"code_signing,omitempty"`

	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
	// +kubebuilder:validation:Optional
	EmailProtection *bool `json:"emailProtection,omitempty" tf:"email_protection,omitempty"`

	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
	// +kubebuilder:validation:Optional
	OcspSigning *bool `json:"ocspSigning,omitempty" tf:"ocsp_signing,omitempty"`

	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
	// +kubebuilder:validation:Optional
	ServerAuth *bool `json:"serverAuth,omitempty" tf:"server_auth,omitempty"`

	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
	// +kubebuilder:validation:Optional
	TimeStamping *bool `json:"timeStamping,omitempty" tf:"time_stamping,omitempty"`
}

type ConfigX509ConfigKeyUsageObservation struct {
}

type ConfigX509ConfigKeyUsageParameters struct {

	// Describes high-level ways in which a key may be used.
	// +kubebuilder:validation:Required
	BaseKeyUsage []ConfigX509ConfigKeyUsageBaseKeyUsageParameters `json:"baseKeyUsage" tf:"base_key_usage,omitempty"`

	// Describes high-level ways in which a key may be used.
	// +kubebuilder:validation:Required
	ExtendedKeyUsage []ConfigX509ConfigKeyUsageExtendedKeyUsageParameters `json:"extendedKeyUsage" tf:"extended_key_usage,omitempty"`

	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// +kubebuilder:validation:Optional
	UnknownExtendedKeyUsages []ConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesParameters `json:"unknownExtendedKeyUsages,omitempty" tf:"unknown_extended_key_usages,omitempty"`
}

type ConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesObservation struct {
}

type ConfigX509ConfigKeyUsageUnknownExtendedKeyUsagesParameters struct {

	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// +kubebuilder:validation:Required
	ObjectIDPath []*int64 `json:"objectIdPath" tf:"object_id_path,omitempty"`
}

type ConfigX509ConfigObservation struct {
}

type ConfigX509ConfigParameters struct {

	// Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
	// +kubebuilder:validation:Optional
	AdditionalExtensions []ConfigX509ConfigAdditionalExtensionsParameters `json:"additionalExtensions,omitempty" tf:"additional_extensions,omitempty"`

	// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
	// "Authority Information Access" extension in the certificate.
	// +kubebuilder:validation:Optional
	AiaOcspServers []*string `json:"aiaOcspServers,omitempty" tf:"aia_ocsp_servers,omitempty"`

	// Describes values that are relevant in a CA certificate.
	// +kubebuilder:validation:Required
	CaOptions []ConfigX509ConfigCaOptionsParameters `json:"caOptions" tf:"ca_options,omitempty"`

	// Indicates the intended use for keys that correspond to a certificate.
	// +kubebuilder:validation:Required
	KeyUsage []ConfigX509ConfigKeyUsageParameters `json:"keyUsage" tf:"key_usage,omitempty"`

	// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
	// +kubebuilder:validation:Optional
	PolicyIds []ConfigX509ConfigPolicyIdsParameters `json:"policyIds,omitempty" tf:"policy_ids,omitempty"`
}

type ConfigX509ConfigPolicyIdsObservation struct {
}

type ConfigX509ConfigPolicyIdsParameters struct {

	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// +kubebuilder:validation:Required
	ObjectIDPath []*int64 `json:"objectIdPath" tf:"object_id_path,omitempty"`
}

type KeySpecObservation struct {
}

type KeySpecParameters struct {

	// The algorithm to use for creating a managed Cloud KMS key for a for a simplified
	// experience. All managed keys will be have their ProtectionLevel as HSM. Possible values: ["SIGN_HASH_ALGORITHM_UNSPECIFIED", "RSA_PSS_2048_SHA256", "RSA_PSS_3072_SHA256", "RSA_PSS_4096_SHA256", "RSA_PKCS1_2048_SHA256", "RSA_PKCS1_3072_SHA256", "RSA_PKCS1_4096_SHA256", "EC_P256_SHA256", "EC_P384_SHA384"]
	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// The resource name for an existing Cloud KMS CryptoKeyVersion in the format
	// 'projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*'.
	// +kubebuilder:validation:Optional
	CloudKmsKeyVersion *string `json:"cloudKmsKeyVersion,omitempty" tf:"cloud_kms_key_version,omitempty"`
}

type X509ConfigAdditionalExtensionsObjectIDObservation struct {
}

type X509ConfigAdditionalExtensionsObjectIDParameters struct {

	// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
	// +kubebuilder:validation:Required
	ObjectIDPath []*int64 `json:"objectIdPath" tf:"object_id_path,omitempty"`
}

// CertificateAuthoritySpec defines the desired state of CertificateAuthority
type CertificateAuthoritySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CertificateAuthorityParameters `json:"forProvider"`
}

// CertificateAuthorityStatus defines the observed state of CertificateAuthority.
type CertificateAuthorityStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CertificateAuthorityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateAuthority is the Schema for the CertificateAuthoritys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type CertificateAuthority struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CertificateAuthoritySpec   `json:"spec"`
	Status            CertificateAuthorityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateAuthorityList contains a list of CertificateAuthoritys
type CertificateAuthorityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CertificateAuthority `json:"items"`
}

// Repository type metadata.
var (
	CertificateAuthority_Kind             = "CertificateAuthority"
	CertificateAuthority_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CertificateAuthority_Kind}.String()
	CertificateAuthority_KindAPIVersion   = CertificateAuthority_Kind + "." + CRDGroupVersion.String()
	CertificateAuthority_GroupVersionKind = CRDGroupVersion.WithKind(CertificateAuthority_Kind)
)

func init() {
	SchemeBuilder.Register(&CertificateAuthority{}, &CertificateAuthorityList{})
}
