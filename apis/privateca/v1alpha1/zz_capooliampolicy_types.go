/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CAPoolIAMPolicyObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CAPoolIAMPolicyParameters struct {

	// +kubebuilder:validation:Required
	CAPool *string `json:"caPool" tf:"ca_pool,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	PolicyData *string `json:"policyData" tf:"policy_data,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

// CAPoolIAMPolicySpec defines the desired state of CAPoolIAMPolicy
type CAPoolIAMPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CAPoolIAMPolicyParameters `json:"forProvider"`
}

// CAPoolIAMPolicyStatus defines the observed state of CAPoolIAMPolicy.
type CAPoolIAMPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CAPoolIAMPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CAPoolIAMPolicy is the Schema for the CAPoolIAMPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type CAPoolIAMPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CAPoolIAMPolicySpec   `json:"spec"`
	Status            CAPoolIAMPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CAPoolIAMPolicyList contains a list of CAPoolIAMPolicys
type CAPoolIAMPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CAPoolIAMPolicy `json:"items"`
}

// Repository type metadata.
var (
	CAPoolIAMPolicy_Kind             = "CAPoolIAMPolicy"
	CAPoolIAMPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CAPoolIAMPolicy_Kind}.String()
	CAPoolIAMPolicy_KindAPIVersion   = CAPoolIAMPolicy_Kind + "." + CRDGroupVersion.String()
	CAPoolIAMPolicy_GroupVersionKind = CRDGroupVersion.WithKind(CAPoolIAMPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&CAPoolIAMPolicy{}, &CAPoolIAMPolicyList{})
}
