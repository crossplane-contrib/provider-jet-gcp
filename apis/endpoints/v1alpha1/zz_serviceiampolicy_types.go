/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceIamPolicyObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`
}

type ServiceIamPolicyParameters struct {

	// +kubebuilder:validation:Required
	PolicyData *string `json:"policyData" tf:"policy_data,omitempty"`

	// +kubebuilder:validation:Required
	ServiceName *string `json:"serviceName" tf:"service_name,omitempty"`
}

// ServiceIamPolicySpec defines the desired state of ServiceIamPolicy
type ServiceIamPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceIamPolicyParameters `json:"forProvider"`
}

// ServiceIamPolicyStatus defines the observed state of ServiceIamPolicy.
type ServiceIamPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceIamPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceIamPolicy is the Schema for the ServiceIamPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type ServiceIamPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceIamPolicySpec   `json:"spec"`
	Status            ServiceIamPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceIamPolicyList contains a list of ServiceIamPolicys
type ServiceIamPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceIamPolicy `json:"items"`
}

// Repository type metadata.
var (
	ServiceIamPolicy_Kind             = "ServiceIamPolicy"
	ServiceIamPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceIamPolicy_Kind}.String()
	ServiceIamPolicy_KindAPIVersion   = ServiceIamPolicy_Kind + "." + CRDGroupVersion.String()
	ServiceIamPolicy_GroupVersionKind = CRDGroupVersion.WithKind(ServiceIamPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceIamPolicy{}, &ServiceIamPolicyList{})
}
