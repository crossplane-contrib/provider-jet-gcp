/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceConsumersIAMMemberConditionObservation struct {
}

type ServiceConsumersIAMMemberConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type ServiceConsumersIAMMemberObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServiceConsumersIAMMemberParameters struct {

	// +kubebuilder:validation:Optional
	Condition []ServiceConsumersIAMMemberConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	ConsumerProject *string `json:"consumerProject" tf:"consumer_project,omitempty"`

	// +kubebuilder:validation:Required
	Member *string `json:"member" tf:"member,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`

	// +kubebuilder:validation:Required
	ServiceName *string `json:"serviceName" tf:"service_name,omitempty"`
}

// ServiceConsumersIAMMemberSpec defines the desired state of ServiceConsumersIAMMember
type ServiceConsumersIAMMemberSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceConsumersIAMMemberParameters `json:"forProvider"`
}

// ServiceConsumersIAMMemberStatus defines the observed state of ServiceConsumersIAMMember.
type ServiceConsumersIAMMemberStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceConsumersIAMMemberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceConsumersIAMMember is the Schema for the ServiceConsumersIAMMembers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type ServiceConsumersIAMMember struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceConsumersIAMMemberSpec   `json:"spec"`
	Status            ServiceConsumersIAMMemberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceConsumersIAMMemberList contains a list of ServiceConsumersIAMMembers
type ServiceConsumersIAMMemberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceConsumersIAMMember `json:"items"`
}

// Repository type metadata.
var (
	ServiceConsumersIAMMember_Kind             = "ServiceConsumersIAMMember"
	ServiceConsumersIAMMember_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceConsumersIAMMember_Kind}.String()
	ServiceConsumersIAMMember_KindAPIVersion   = ServiceConsumersIAMMember_Kind + "." + CRDGroupVersion.String()
	ServiceConsumersIAMMember_GroupVersionKind = CRDGroupVersion.WithKind(ServiceConsumersIAMMember_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceConsumersIAMMember{}, &ServiceConsumersIAMMemberList{})
}
