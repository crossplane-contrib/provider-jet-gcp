/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WebIAMMemberConditionObservation struct {
}

type WebIAMMemberConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type WebIAMMemberObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type WebIAMMemberParameters struct {

	// +kubebuilder:validation:Optional
	Condition []WebIAMMemberConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	Member *string `json:"member" tf:"member,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// WebIAMMemberSpec defines the desired state of WebIAMMember
type WebIAMMemberSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WebIAMMemberParameters `json:"forProvider"`
}

// WebIAMMemberStatus defines the observed state of WebIAMMember.
type WebIAMMemberStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WebIAMMemberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WebIAMMember is the Schema for the WebIAMMembers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type WebIAMMember struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WebIAMMemberSpec   `json:"spec"`
	Status            WebIAMMemberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WebIAMMemberList contains a list of WebIAMMembers
type WebIAMMemberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WebIAMMember `json:"items"`
}

// Repository type metadata.
var (
	WebIAMMember_Kind             = "WebIAMMember"
	WebIAMMember_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WebIAMMember_Kind}.String()
	WebIAMMember_KindAPIVersion   = WebIAMMember_Kind + "." + CRDGroupVersion.String()
	WebIAMMember_GroupVersionKind = CRDGroupVersion.WithKind(WebIAMMember_Kind)
)

func init() {
	SchemeBuilder.Register(&WebIAMMember{}, &WebIAMMemberList{})
}
