/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BrandObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OrgInternalOnly *bool `json:"orgInternalOnly,omitempty" tf:"org_internal_only,omitempty"`
}

type BrandParameters struct {

	// Application name displayed on OAuth consent screen.
	// +kubebuilder:validation:Required
	ApplicationTitle *string `json:"applicationTitle" tf:"application_title,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Support email displayed on the OAuth consent screen. Can be either a
	// user or group email. When a user email is specified, the caller must
	// be the user with the associated email address. When a group email is
	// specified, the caller can be either a user or a service account which
	// is an owner of the specified group in Cloud Identity.
	// +kubebuilder:validation:Required
	SupportEmail *string `json:"supportEmail" tf:"support_email,omitempty"`
}

// BrandSpec defines the desired state of Brand
type BrandSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BrandParameters `json:"forProvider"`
}

// BrandStatus defines the observed state of Brand.
type BrandStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BrandObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Brand is the Schema for the Brands API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type Brand struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BrandSpec   `json:"spec"`
	Status            BrandStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BrandList contains a list of Brands
type BrandList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Brand `json:"items"`
}

// Repository type metadata.
var (
	Brand_Kind             = "Brand"
	Brand_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Brand_Kind}.String()
	Brand_KindAPIVersion   = Brand_Kind + "." + CRDGroupVersion.String()
	Brand_GroupVersionKind = CRDGroupVersion.WithKind(Brand_Kind)
)

func init() {
	SchemeBuilder.Register(&Brand{}, &BrandList{})
}
