/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WebTypeAppEngineIamBindingConditionObservation struct {
}

type WebTypeAppEngineIamBindingConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type WebTypeAppEngineIamBindingObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type WebTypeAppEngineIamBindingParameters struct {

	// +kubebuilder:validation:Required
	AppID *string `json:"appId" tf:"app_id,omitempty"`

	// +kubebuilder:validation:Optional
	Condition []WebTypeAppEngineIamBindingConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	Members []*string `json:"members" tf:"members,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// WebTypeAppEngineIamBindingSpec defines the desired state of WebTypeAppEngineIamBinding
type WebTypeAppEngineIamBindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WebTypeAppEngineIamBindingParameters `json:"forProvider"`
}

// WebTypeAppEngineIamBindingStatus defines the observed state of WebTypeAppEngineIamBinding.
type WebTypeAppEngineIamBindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WebTypeAppEngineIamBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WebTypeAppEngineIamBinding is the Schema for the WebTypeAppEngineIamBindings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type WebTypeAppEngineIamBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WebTypeAppEngineIamBindingSpec   `json:"spec"`
	Status            WebTypeAppEngineIamBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WebTypeAppEngineIamBindingList contains a list of WebTypeAppEngineIamBindings
type WebTypeAppEngineIamBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WebTypeAppEngineIamBinding `json:"items"`
}

// Repository type metadata.
var (
	WebTypeAppEngineIamBinding_Kind             = "WebTypeAppEngineIamBinding"
	WebTypeAppEngineIamBinding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WebTypeAppEngineIamBinding_Kind}.String()
	WebTypeAppEngineIamBinding_KindAPIVersion   = WebTypeAppEngineIamBinding_Kind + "." + CRDGroupVersion.String()
	WebTypeAppEngineIamBinding_GroupVersionKind = CRDGroupVersion.WithKind(WebTypeAppEngineIamBinding_Kind)
)

func init() {
	SchemeBuilder.Register(&WebTypeAppEngineIamBinding{}, &WebTypeAppEngineIamBindingList{})
}
