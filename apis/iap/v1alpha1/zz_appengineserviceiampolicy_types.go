/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppEngineServiceIAMPolicyObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AppEngineServiceIAMPolicyParameters struct {

	// +kubebuilder:validation:Required
	AppID *string `json:"appId" tf:"app_id,omitempty"`

	// +kubebuilder:validation:Required
	PolicyData *string `json:"policyData" tf:"policy_data,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`
}

// AppEngineServiceIAMPolicySpec defines the desired state of AppEngineServiceIAMPolicy
type AppEngineServiceIAMPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AppEngineServiceIAMPolicyParameters `json:"forProvider"`
}

// AppEngineServiceIAMPolicyStatus defines the observed state of AppEngineServiceIAMPolicy.
type AppEngineServiceIAMPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AppEngineServiceIAMPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppEngineServiceIAMPolicy is the Schema for the AppEngineServiceIAMPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type AppEngineServiceIAMPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppEngineServiceIAMPolicySpec   `json:"spec"`
	Status            AppEngineServiceIAMPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppEngineServiceIAMPolicyList contains a list of AppEngineServiceIAMPolicys
type AppEngineServiceIAMPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppEngineServiceIAMPolicy `json:"items"`
}

// Repository type metadata.
var (
	AppEngineServiceIAMPolicy_Kind             = "AppEngineServiceIAMPolicy"
	AppEngineServiceIAMPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AppEngineServiceIAMPolicy_Kind}.String()
	AppEngineServiceIAMPolicy_KindAPIVersion   = AppEngineServiceIAMPolicy_Kind + "." + CRDGroupVersion.String()
	AppEngineServiceIAMPolicy_GroupVersionKind = CRDGroupVersion.WithKind(AppEngineServiceIAMPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&AppEngineServiceIAMPolicy{}, &AppEngineServiceIAMPolicyList{})
}
