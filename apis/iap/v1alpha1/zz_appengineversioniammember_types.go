/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppEngineVersionIAMMemberConditionObservation struct {
}

type AppEngineVersionIAMMemberConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type AppEngineVersionIAMMemberObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AppEngineVersionIAMMemberParameters struct {

	// +kubebuilder:validation:Required
	AppID *string `json:"appId" tf:"app_id,omitempty"`

	// +kubebuilder:validation:Optional
	Condition []AppEngineVersionIAMMemberConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	Member *string `json:"member" tf:"member,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`

	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// +kubebuilder:validation:Required
	VersionID *string `json:"versionId" tf:"version_id,omitempty"`
}

// AppEngineVersionIAMMemberSpec defines the desired state of AppEngineVersionIAMMember
type AppEngineVersionIAMMemberSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AppEngineVersionIAMMemberParameters `json:"forProvider"`
}

// AppEngineVersionIAMMemberStatus defines the observed state of AppEngineVersionIAMMember.
type AppEngineVersionIAMMemberStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AppEngineVersionIAMMemberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppEngineVersionIAMMember is the Schema for the AppEngineVersionIAMMembers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type AppEngineVersionIAMMember struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppEngineVersionIAMMemberSpec   `json:"spec"`
	Status            AppEngineVersionIAMMemberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppEngineVersionIAMMemberList contains a list of AppEngineVersionIAMMembers
type AppEngineVersionIAMMemberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppEngineVersionIAMMember `json:"items"`
}

// Repository type metadata.
var (
	AppEngineVersionIAMMember_Kind             = "AppEngineVersionIAMMember"
	AppEngineVersionIAMMember_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AppEngineVersionIAMMember_Kind}.String()
	AppEngineVersionIAMMember_KindAPIVersion   = AppEngineVersionIAMMember_Kind + "." + CRDGroupVersion.String()
	AppEngineVersionIAMMember_GroupVersionKind = CRDGroupVersion.WithKind(AppEngineVersionIAMMember_Kind)
)

func init() {
	SchemeBuilder.Register(&AppEngineVersionIAMMember{}, &AppEngineVersionIAMMemberList{})
}
