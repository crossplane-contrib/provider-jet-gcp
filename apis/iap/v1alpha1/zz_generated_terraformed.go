/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/crossplane/terrajet/pkg/resource"
	"github.com/crossplane/terrajet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this AppEngineServiceIAMBinding
func (mg *AppEngineServiceIAMBinding) GetTerraformResourceType() string {
	return "google_iap_app_engine_service_iam_binding"
}

// GetConnectionDetailsMapping for this AppEngineServiceIAMBinding
func (tr *AppEngineServiceIAMBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AppEngineServiceIAMBinding
func (tr *AppEngineServiceIAMBinding) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppEngineServiceIAMBinding
func (tr *AppEngineServiceIAMBinding) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppEngineServiceIAMBinding
func (tr *AppEngineServiceIAMBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppEngineServiceIAMBinding
func (tr *AppEngineServiceIAMBinding) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppEngineServiceIAMBinding
func (tr *AppEngineServiceIAMBinding) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppEngineServiceIAMBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppEngineServiceIAMBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &AppEngineServiceIAMBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppEngineServiceIAMBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AppEngineServiceIAMMember
func (mg *AppEngineServiceIAMMember) GetTerraformResourceType() string {
	return "google_iap_app_engine_service_iam_member"
}

// GetConnectionDetailsMapping for this AppEngineServiceIAMMember
func (tr *AppEngineServiceIAMMember) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AppEngineServiceIAMMember
func (tr *AppEngineServiceIAMMember) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppEngineServiceIAMMember
func (tr *AppEngineServiceIAMMember) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppEngineServiceIAMMember
func (tr *AppEngineServiceIAMMember) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppEngineServiceIAMMember
func (tr *AppEngineServiceIAMMember) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppEngineServiceIAMMember
func (tr *AppEngineServiceIAMMember) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppEngineServiceIAMMember using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppEngineServiceIAMMember) LateInitialize(attrs []byte) (bool, error) {
	params := &AppEngineServiceIAMMemberParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppEngineServiceIAMMember) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AppEngineServiceIAMPolicy
func (mg *AppEngineServiceIAMPolicy) GetTerraformResourceType() string {
	return "google_iap_app_engine_service_iam_policy"
}

// GetConnectionDetailsMapping for this AppEngineServiceIAMPolicy
func (tr *AppEngineServiceIAMPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AppEngineServiceIAMPolicy
func (tr *AppEngineServiceIAMPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppEngineServiceIAMPolicy
func (tr *AppEngineServiceIAMPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppEngineServiceIAMPolicy
func (tr *AppEngineServiceIAMPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppEngineServiceIAMPolicy
func (tr *AppEngineServiceIAMPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppEngineServiceIAMPolicy
func (tr *AppEngineServiceIAMPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppEngineServiceIAMPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppEngineServiceIAMPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &AppEngineServiceIAMPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppEngineServiceIAMPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AppEngineVersionIAMBinding
func (mg *AppEngineVersionIAMBinding) GetTerraformResourceType() string {
	return "google_iap_app_engine_version_iam_binding"
}

// GetConnectionDetailsMapping for this AppEngineVersionIAMBinding
func (tr *AppEngineVersionIAMBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AppEngineVersionIAMBinding
func (tr *AppEngineVersionIAMBinding) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppEngineVersionIAMBinding
func (tr *AppEngineVersionIAMBinding) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppEngineVersionIAMBinding
func (tr *AppEngineVersionIAMBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppEngineVersionIAMBinding
func (tr *AppEngineVersionIAMBinding) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppEngineVersionIAMBinding
func (tr *AppEngineVersionIAMBinding) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppEngineVersionIAMBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppEngineVersionIAMBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &AppEngineVersionIAMBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppEngineVersionIAMBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AppEngineVersionIAMMember
func (mg *AppEngineVersionIAMMember) GetTerraformResourceType() string {
	return "google_iap_app_engine_version_iam_member"
}

// GetConnectionDetailsMapping for this AppEngineVersionIAMMember
func (tr *AppEngineVersionIAMMember) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AppEngineVersionIAMMember
func (tr *AppEngineVersionIAMMember) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppEngineVersionIAMMember
func (tr *AppEngineVersionIAMMember) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppEngineVersionIAMMember
func (tr *AppEngineVersionIAMMember) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppEngineVersionIAMMember
func (tr *AppEngineVersionIAMMember) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppEngineVersionIAMMember
func (tr *AppEngineVersionIAMMember) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppEngineVersionIAMMember using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppEngineVersionIAMMember) LateInitialize(attrs []byte) (bool, error) {
	params := &AppEngineVersionIAMMemberParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppEngineVersionIAMMember) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AppEngineVersionIAMPolicy
func (mg *AppEngineVersionIAMPolicy) GetTerraformResourceType() string {
	return "google_iap_app_engine_version_iam_policy"
}

// GetConnectionDetailsMapping for this AppEngineVersionIAMPolicy
func (tr *AppEngineVersionIAMPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AppEngineVersionIAMPolicy
func (tr *AppEngineVersionIAMPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppEngineVersionIAMPolicy
func (tr *AppEngineVersionIAMPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppEngineVersionIAMPolicy
func (tr *AppEngineVersionIAMPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppEngineVersionIAMPolicy
func (tr *AppEngineVersionIAMPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppEngineVersionIAMPolicy
func (tr *AppEngineVersionIAMPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppEngineVersionIAMPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppEngineVersionIAMPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &AppEngineVersionIAMPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppEngineVersionIAMPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Brand
func (mg *Brand) GetTerraformResourceType() string {
	return "google_iap_brand"
}

// GetConnectionDetailsMapping for this Brand
func (tr *Brand) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Brand
func (tr *Brand) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Brand
func (tr *Brand) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Brand
func (tr *Brand) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Brand
func (tr *Brand) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Brand
func (tr *Brand) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Brand using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Brand) LateInitialize(attrs []byte) (bool, error) {
	params := &BrandParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Brand) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Client
func (mg *Client) GetTerraformResourceType() string {
	return "google_iap_client"
}

// GetConnectionDetailsMapping for this Client
func (tr *Client) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"secret": "status.atProvider.secret"}
}

// GetObservation of this Client
func (tr *Client) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Client
func (tr *Client) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Client
func (tr *Client) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Client
func (tr *Client) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Client
func (tr *Client) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Client using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Client) LateInitialize(attrs []byte) (bool, error) {
	params := &ClientParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Client) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this TunnelIAMBinding
func (mg *TunnelIAMBinding) GetTerraformResourceType() string {
	return "google_iap_tunnel_iam_binding"
}

// GetConnectionDetailsMapping for this TunnelIAMBinding
func (tr *TunnelIAMBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this TunnelIAMBinding
func (tr *TunnelIAMBinding) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this TunnelIAMBinding
func (tr *TunnelIAMBinding) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this TunnelIAMBinding
func (tr *TunnelIAMBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this TunnelIAMBinding
func (tr *TunnelIAMBinding) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this TunnelIAMBinding
func (tr *TunnelIAMBinding) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this TunnelIAMBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *TunnelIAMBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &TunnelIAMBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *TunnelIAMBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this TunnelIAMMember
func (mg *TunnelIAMMember) GetTerraformResourceType() string {
	return "google_iap_tunnel_iam_member"
}

// GetConnectionDetailsMapping for this TunnelIAMMember
func (tr *TunnelIAMMember) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this TunnelIAMMember
func (tr *TunnelIAMMember) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this TunnelIAMMember
func (tr *TunnelIAMMember) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this TunnelIAMMember
func (tr *TunnelIAMMember) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this TunnelIAMMember
func (tr *TunnelIAMMember) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this TunnelIAMMember
func (tr *TunnelIAMMember) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this TunnelIAMMember using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *TunnelIAMMember) LateInitialize(attrs []byte) (bool, error) {
	params := &TunnelIAMMemberParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *TunnelIAMMember) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this TunnelIAMPolicy
func (mg *TunnelIAMPolicy) GetTerraformResourceType() string {
	return "google_iap_tunnel_iam_policy"
}

// GetConnectionDetailsMapping for this TunnelIAMPolicy
func (tr *TunnelIAMPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this TunnelIAMPolicy
func (tr *TunnelIAMPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this TunnelIAMPolicy
func (tr *TunnelIAMPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this TunnelIAMPolicy
func (tr *TunnelIAMPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this TunnelIAMPolicy
func (tr *TunnelIAMPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this TunnelIAMPolicy
func (tr *TunnelIAMPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this TunnelIAMPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *TunnelIAMPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &TunnelIAMPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *TunnelIAMPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this TunnelInstanceIAMBinding
func (mg *TunnelInstanceIAMBinding) GetTerraformResourceType() string {
	return "google_iap_tunnel_instance_iam_binding"
}

// GetConnectionDetailsMapping for this TunnelInstanceIAMBinding
func (tr *TunnelInstanceIAMBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this TunnelInstanceIAMBinding
func (tr *TunnelInstanceIAMBinding) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this TunnelInstanceIAMBinding
func (tr *TunnelInstanceIAMBinding) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this TunnelInstanceIAMBinding
func (tr *TunnelInstanceIAMBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this TunnelInstanceIAMBinding
func (tr *TunnelInstanceIAMBinding) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this TunnelInstanceIAMBinding
func (tr *TunnelInstanceIAMBinding) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this TunnelInstanceIAMBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *TunnelInstanceIAMBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &TunnelInstanceIAMBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *TunnelInstanceIAMBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this TunnelInstanceIAMMember
func (mg *TunnelInstanceIAMMember) GetTerraformResourceType() string {
	return "google_iap_tunnel_instance_iam_member"
}

// GetConnectionDetailsMapping for this TunnelInstanceIAMMember
func (tr *TunnelInstanceIAMMember) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this TunnelInstanceIAMMember
func (tr *TunnelInstanceIAMMember) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this TunnelInstanceIAMMember
func (tr *TunnelInstanceIAMMember) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this TunnelInstanceIAMMember
func (tr *TunnelInstanceIAMMember) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this TunnelInstanceIAMMember
func (tr *TunnelInstanceIAMMember) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this TunnelInstanceIAMMember
func (tr *TunnelInstanceIAMMember) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this TunnelInstanceIAMMember using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *TunnelInstanceIAMMember) LateInitialize(attrs []byte) (bool, error) {
	params := &TunnelInstanceIAMMemberParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *TunnelInstanceIAMMember) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this TunnelInstanceIAMPolicy
func (mg *TunnelInstanceIAMPolicy) GetTerraformResourceType() string {
	return "google_iap_tunnel_instance_iam_policy"
}

// GetConnectionDetailsMapping for this TunnelInstanceIAMPolicy
func (tr *TunnelInstanceIAMPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this TunnelInstanceIAMPolicy
func (tr *TunnelInstanceIAMPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this TunnelInstanceIAMPolicy
func (tr *TunnelInstanceIAMPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this TunnelInstanceIAMPolicy
func (tr *TunnelInstanceIAMPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this TunnelInstanceIAMPolicy
func (tr *TunnelInstanceIAMPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this TunnelInstanceIAMPolicy
func (tr *TunnelInstanceIAMPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this TunnelInstanceIAMPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *TunnelInstanceIAMPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &TunnelInstanceIAMPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *TunnelInstanceIAMPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this WebBackendServiceIAMBinding
func (mg *WebBackendServiceIAMBinding) GetTerraformResourceType() string {
	return "google_iap_web_backend_service_iam_binding"
}

// GetConnectionDetailsMapping for this WebBackendServiceIAMBinding
func (tr *WebBackendServiceIAMBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this WebBackendServiceIAMBinding
func (tr *WebBackendServiceIAMBinding) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this WebBackendServiceIAMBinding
func (tr *WebBackendServiceIAMBinding) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this WebBackendServiceIAMBinding
func (tr *WebBackendServiceIAMBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this WebBackendServiceIAMBinding
func (tr *WebBackendServiceIAMBinding) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this WebBackendServiceIAMBinding
func (tr *WebBackendServiceIAMBinding) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this WebBackendServiceIAMBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *WebBackendServiceIAMBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &WebBackendServiceIAMBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *WebBackendServiceIAMBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this WebBackendServiceIAMMember
func (mg *WebBackendServiceIAMMember) GetTerraformResourceType() string {
	return "google_iap_web_backend_service_iam_member"
}

// GetConnectionDetailsMapping for this WebBackendServiceIAMMember
func (tr *WebBackendServiceIAMMember) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this WebBackendServiceIAMMember
func (tr *WebBackendServiceIAMMember) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this WebBackendServiceIAMMember
func (tr *WebBackendServiceIAMMember) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this WebBackendServiceIAMMember
func (tr *WebBackendServiceIAMMember) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this WebBackendServiceIAMMember
func (tr *WebBackendServiceIAMMember) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this WebBackendServiceIAMMember
func (tr *WebBackendServiceIAMMember) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this WebBackendServiceIAMMember using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *WebBackendServiceIAMMember) LateInitialize(attrs []byte) (bool, error) {
	params := &WebBackendServiceIAMMemberParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *WebBackendServiceIAMMember) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this WebBackendServiceIAMPolicy
func (mg *WebBackendServiceIAMPolicy) GetTerraformResourceType() string {
	return "google_iap_web_backend_service_iam_policy"
}

// GetConnectionDetailsMapping for this WebBackendServiceIAMPolicy
func (tr *WebBackendServiceIAMPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this WebBackendServiceIAMPolicy
func (tr *WebBackendServiceIAMPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this WebBackendServiceIAMPolicy
func (tr *WebBackendServiceIAMPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this WebBackendServiceIAMPolicy
func (tr *WebBackendServiceIAMPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this WebBackendServiceIAMPolicy
func (tr *WebBackendServiceIAMPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this WebBackendServiceIAMPolicy
func (tr *WebBackendServiceIAMPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this WebBackendServiceIAMPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *WebBackendServiceIAMPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &WebBackendServiceIAMPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *WebBackendServiceIAMPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this WebIAMBinding
func (mg *WebIAMBinding) GetTerraformResourceType() string {
	return "google_iap_web_iam_binding"
}

// GetConnectionDetailsMapping for this WebIAMBinding
func (tr *WebIAMBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this WebIAMBinding
func (tr *WebIAMBinding) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this WebIAMBinding
func (tr *WebIAMBinding) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this WebIAMBinding
func (tr *WebIAMBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this WebIAMBinding
func (tr *WebIAMBinding) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this WebIAMBinding
func (tr *WebIAMBinding) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this WebIAMBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *WebIAMBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &WebIAMBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *WebIAMBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this WebIAMMember
func (mg *WebIAMMember) GetTerraformResourceType() string {
	return "google_iap_web_iam_member"
}

// GetConnectionDetailsMapping for this WebIAMMember
func (tr *WebIAMMember) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this WebIAMMember
func (tr *WebIAMMember) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this WebIAMMember
func (tr *WebIAMMember) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this WebIAMMember
func (tr *WebIAMMember) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this WebIAMMember
func (tr *WebIAMMember) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this WebIAMMember
func (tr *WebIAMMember) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this WebIAMMember using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *WebIAMMember) LateInitialize(attrs []byte) (bool, error) {
	params := &WebIAMMemberParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *WebIAMMember) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this WebIAMPolicy
func (mg *WebIAMPolicy) GetTerraformResourceType() string {
	return "google_iap_web_iam_policy"
}

// GetConnectionDetailsMapping for this WebIAMPolicy
func (tr *WebIAMPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this WebIAMPolicy
func (tr *WebIAMPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this WebIAMPolicy
func (tr *WebIAMPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this WebIAMPolicy
func (tr *WebIAMPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this WebIAMPolicy
func (tr *WebIAMPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this WebIAMPolicy
func (tr *WebIAMPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this WebIAMPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *WebIAMPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &WebIAMPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *WebIAMPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this WebTypeAppEngineIAMBinding
func (mg *WebTypeAppEngineIAMBinding) GetTerraformResourceType() string {
	return "google_iap_web_type_app_engine_iam_binding"
}

// GetConnectionDetailsMapping for this WebTypeAppEngineIAMBinding
func (tr *WebTypeAppEngineIAMBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this WebTypeAppEngineIAMBinding
func (tr *WebTypeAppEngineIAMBinding) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this WebTypeAppEngineIAMBinding
func (tr *WebTypeAppEngineIAMBinding) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this WebTypeAppEngineIAMBinding
func (tr *WebTypeAppEngineIAMBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this WebTypeAppEngineIAMBinding
func (tr *WebTypeAppEngineIAMBinding) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this WebTypeAppEngineIAMBinding
func (tr *WebTypeAppEngineIAMBinding) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this WebTypeAppEngineIAMBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *WebTypeAppEngineIAMBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &WebTypeAppEngineIAMBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *WebTypeAppEngineIAMBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this WebTypeAppEngineIAMMember
func (mg *WebTypeAppEngineIAMMember) GetTerraformResourceType() string {
	return "google_iap_web_type_app_engine_iam_member"
}

// GetConnectionDetailsMapping for this WebTypeAppEngineIAMMember
func (tr *WebTypeAppEngineIAMMember) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this WebTypeAppEngineIAMMember
func (tr *WebTypeAppEngineIAMMember) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this WebTypeAppEngineIAMMember
func (tr *WebTypeAppEngineIAMMember) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this WebTypeAppEngineIAMMember
func (tr *WebTypeAppEngineIAMMember) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this WebTypeAppEngineIAMMember
func (tr *WebTypeAppEngineIAMMember) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this WebTypeAppEngineIAMMember
func (tr *WebTypeAppEngineIAMMember) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this WebTypeAppEngineIAMMember using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *WebTypeAppEngineIAMMember) LateInitialize(attrs []byte) (bool, error) {
	params := &WebTypeAppEngineIAMMemberParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *WebTypeAppEngineIAMMember) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this WebTypeAppEngineIAMPolicy
func (mg *WebTypeAppEngineIAMPolicy) GetTerraformResourceType() string {
	return "google_iap_web_type_app_engine_iam_policy"
}

// GetConnectionDetailsMapping for this WebTypeAppEngineIAMPolicy
func (tr *WebTypeAppEngineIAMPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this WebTypeAppEngineIAMPolicy
func (tr *WebTypeAppEngineIAMPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this WebTypeAppEngineIAMPolicy
func (tr *WebTypeAppEngineIAMPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this WebTypeAppEngineIAMPolicy
func (tr *WebTypeAppEngineIAMPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this WebTypeAppEngineIAMPolicy
func (tr *WebTypeAppEngineIAMPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this WebTypeAppEngineIAMPolicy
func (tr *WebTypeAppEngineIAMPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this WebTypeAppEngineIAMPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *WebTypeAppEngineIAMPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &WebTypeAppEngineIAMPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *WebTypeAppEngineIAMPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this WebTypeComputeIAMBinding
func (mg *WebTypeComputeIAMBinding) GetTerraformResourceType() string {
	return "google_iap_web_type_compute_iam_binding"
}

// GetConnectionDetailsMapping for this WebTypeComputeIAMBinding
func (tr *WebTypeComputeIAMBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this WebTypeComputeIAMBinding
func (tr *WebTypeComputeIAMBinding) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this WebTypeComputeIAMBinding
func (tr *WebTypeComputeIAMBinding) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this WebTypeComputeIAMBinding
func (tr *WebTypeComputeIAMBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this WebTypeComputeIAMBinding
func (tr *WebTypeComputeIAMBinding) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this WebTypeComputeIAMBinding
func (tr *WebTypeComputeIAMBinding) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this WebTypeComputeIAMBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *WebTypeComputeIAMBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &WebTypeComputeIAMBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *WebTypeComputeIAMBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this WebTypeComputeIAMMember
func (mg *WebTypeComputeIAMMember) GetTerraformResourceType() string {
	return "google_iap_web_type_compute_iam_member"
}

// GetConnectionDetailsMapping for this WebTypeComputeIAMMember
func (tr *WebTypeComputeIAMMember) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this WebTypeComputeIAMMember
func (tr *WebTypeComputeIAMMember) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this WebTypeComputeIAMMember
func (tr *WebTypeComputeIAMMember) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this WebTypeComputeIAMMember
func (tr *WebTypeComputeIAMMember) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this WebTypeComputeIAMMember
func (tr *WebTypeComputeIAMMember) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this WebTypeComputeIAMMember
func (tr *WebTypeComputeIAMMember) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this WebTypeComputeIAMMember using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *WebTypeComputeIAMMember) LateInitialize(attrs []byte) (bool, error) {
	params := &WebTypeComputeIAMMemberParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *WebTypeComputeIAMMember) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this WebTypeComputeIAMPolicy
func (mg *WebTypeComputeIAMPolicy) GetTerraformResourceType() string {
	return "google_iap_web_type_compute_iam_policy"
}

// GetConnectionDetailsMapping for this WebTypeComputeIAMPolicy
func (tr *WebTypeComputeIAMPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this WebTypeComputeIAMPolicy
func (tr *WebTypeComputeIAMPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this WebTypeComputeIAMPolicy
func (tr *WebTypeComputeIAMPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this WebTypeComputeIAMPolicy
func (tr *WebTypeComputeIAMPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this WebTypeComputeIAMPolicy
func (tr *WebTypeComputeIAMPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this WebTypeComputeIAMPolicy
func (tr *WebTypeComputeIAMPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this WebTypeComputeIAMPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *WebTypeComputeIAMPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &WebTypeComputeIAMPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *WebTypeComputeIAMPolicy) GetTerraformSchemaVersion() int {
	return 0
}
