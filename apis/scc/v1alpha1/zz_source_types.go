/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SourceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type SourceParameters struct {

	// The description of the source (max of 1024 characters).
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The source’s display name. A source’s display name must be unique
	// amongst its siblings, for example, two sources with the same parent
	// can't share the same display name. The display name must start and end
	// with a letter or digit, may contain letters, digits, spaces, hyphens,
	// and underscores, and can be no longer than 32 characters.
	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// The organization whose Cloud Security Command Center the Source
	// lives in.
	// +kubebuilder:validation:Required
	Organization *string `json:"organization" tf:"organization,omitempty"`
}

// SourceSpec defines the desired state of Source
type SourceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SourceParameters `json:"forProvider"`
}

// SourceStatus defines the observed state of Source.
type SourceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SourceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Source is the Schema for the Sources API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type Source struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SourceSpec   `json:"spec"`
	Status            SourceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SourceList contains a list of Sources
type SourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Source `json:"items"`
}

// Repository type metadata.
var (
	Source_Kind             = "Source"
	Source_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Source_Kind}.String()
	Source_KindAPIVersion   = Source_Kind + "." + CRDGroupVersion.String()
	Source_GroupVersionKind = CRDGroupVersion.WithKind(Source_Kind)
)

func init() {
	SchemeBuilder.Register(&Source{}, &SourceList{})
}
