/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NotificationConfigObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ServiceAccount *string `json:"serviceAccount,omitempty" tf:"service_account,omitempty"`
}

type NotificationConfigParameters struct {

	// This must be unique within the organization.
	// +kubebuilder:validation:Required
	ConfigID *string `json:"configId" tf:"config_id,omitempty"`

	// The description of the notification config (max of 1024 characters).
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The organization whose Cloud Security Command Center the Notification
	// Config lives in.
	// +kubebuilder:validation:Required
	Organization *string `json:"organization" tf:"organization,omitempty"`

	// The Pub/Sub topic to send notifications to. Its format is
	// "projects/[project_id]/topics/[topic]".
	// +kubebuilder:validation:Required
	PubsubTopic *string `json:"pubsubTopic" tf:"pubsub_topic,omitempty"`

	// The config for triggering streaming-based notifications.
	// +kubebuilder:validation:Required
	StreamingConfig []StreamingConfigParameters `json:"streamingConfig" tf:"streaming_config,omitempty"`
}

type StreamingConfigObservation struct {
}

type StreamingConfigParameters struct {

	// Expression that defines the filter to apply across create/update
	// events of assets or findings as specified by the event type. The
	// expression is a list of zero or more restrictions combined via
	// logical operators AND and OR. Parentheses are supported, and OR
	// has higher precedence than AND.
	//
	// Restrictions have the form <field> <operator> <value> and may have
	// a - character in front of them to indicate negation. The fields
	// map to those defined in the corresponding resource.
	//
	// The supported operators are:
	//
	// * = for all value types.
	// * >, <, >=, <= for integer values.
	// * :, meaning substring matching, for strings.
	//
	// The supported value types are:
	//
	// * string literals in quotes.
	// * integer literals without quotes.
	// * boolean literals true and false without quotes.
	//
	// See
	// [Filtering notifications](https://cloud.google.com/security-command-center/docs/how-to-api-filter-notifications)
	// for information on how to write a filter.
	// +kubebuilder:validation:Required
	Filter *string `json:"filter" tf:"filter,omitempty"`
}

// NotificationConfigSpec defines the desired state of NotificationConfig
type NotificationConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NotificationConfigParameters `json:"forProvider"`
}

// NotificationConfigStatus defines the observed state of NotificationConfig.
type NotificationConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NotificationConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NotificationConfig is the Schema for the NotificationConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type NotificationConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NotificationConfigSpec   `json:"spec"`
	Status            NotificationConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NotificationConfigList contains a list of NotificationConfigs
type NotificationConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NotificationConfig `json:"items"`
}

// Repository type metadata.
var (
	NotificationConfig_Kind             = "NotificationConfig"
	NotificationConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NotificationConfig_Kind}.String()
	NotificationConfig_KindAPIVersion   = NotificationConfig_Kind + "." + CRDGroupVersion.String()
	NotificationConfig_GroupVersionKind = CRDGroupVersion.WithKind(NotificationConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&NotificationConfig{}, &NotificationConfigList{})
}
