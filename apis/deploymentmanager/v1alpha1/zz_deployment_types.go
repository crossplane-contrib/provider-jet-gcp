/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigObservation struct {
}

type ConfigParameters struct {

	// The full YAML contents of your configuration file.
	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`
}

type DeploymentObservation struct {
	DeploymentID *string `json:"deploymentId,omitempty" tf:"deployment_id,omitempty"`

	Manifest *string `json:"manifest,omitempty" tf:"manifest,omitempty"`

	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`
}

type DeploymentParameters struct {

	// Set the policy to use for creating new resources. Only used on
	// create and update. Valid values are 'CREATE_OR_ACQUIRE' (default) or
	// 'ACQUIRE'. If set to 'ACQUIRE' and resources do not already exist,
	// the deployment will fail. Note that updating this field does not
	// actually affect the deployment, just how it is updated. Default value: "CREATE_OR_ACQUIRE" Possible values: ["ACQUIRE", "CREATE_OR_ACQUIRE"]
	// +kubebuilder:validation:Optional
	CreatePolicy *string `json:"createPolicy,omitempty" tf:"create_policy,omitempty"`

	// Set the policy to use for deleting new resources on update/delete.
	// Valid values are 'DELETE' (default) or 'ABANDON'. If 'DELETE',
	// resource is deleted after removal from Deployment Manager. If
	// 'ABANDON', the resource is only removed from Deployment Manager
	// and is not actually deleted. Note that updating this field does not
	// actually change the deployment, just how it is updated. Default value: "DELETE" Possible values: ["ABANDON", "DELETE"]
	// +kubebuilder:validation:Optional
	DeletePolicy *string `json:"deletePolicy,omitempty" tf:"delete_policy,omitempty"`

	// Optional user-provided description of deployment.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Key-value pairs to apply to this labels.
	// +kubebuilder:validation:Optional
	Labels []LabelsParameters `json:"labels,omitempty" tf:"labels,omitempty"`

	// Unique name for the deployment
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// If set to true, a deployment is created with "shell" resources
	// that are not actually instantiated. This allows you to preview a
	// deployment. It can be updated to false to actually deploy
	// with real resources.
	// ~>**NOTE:** Deployment Manager does not allow update
	// of a deployment in preview (unless updating to preview=false). Thus,
	// Terraform will force-recreate deployments if either preview is updated
	// to true or if other fields are updated while preview is true.
	// +kubebuilder:validation:Optional
	Preview *bool `json:"preview,omitempty" tf:"preview,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Parameters that define your deployment, including the deployment
	// configuration and relevant templates.
	// +kubebuilder:validation:Required
	Target []TargetParameters `json:"target" tf:"target,omitempty"`
}

type ImportsObservation struct {
}

type ImportsParameters struct {

	// The full contents of the template that you want to import.
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The name of the template to import, as declared in the YAML
	// configuration.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type LabelsObservation struct {
}

type LabelsParameters struct {

	// Key for label.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Value of label.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TargetObservation struct {
}

type TargetParameters struct {

	// The root configuration file to use for this deployment.
	// +kubebuilder:validation:Required
	Config []ConfigParameters `json:"config" tf:"config,omitempty"`

	// Specifies import files for this configuration. This can be
	// used to import templates or other files. For example, you might
	// import a text file in order to use the file in a template.
	// +kubebuilder:validation:Optional
	Imports []ImportsParameters `json:"imports,omitempty" tf:"imports,omitempty"`
}

// DeploymentSpec defines the desired state of Deployment
type DeploymentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeploymentParameters `json:"forProvider"`
}

// DeploymentStatus defines the observed state of Deployment.
type DeploymentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeploymentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Deployment is the Schema for the Deployments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type Deployment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeploymentSpec   `json:"spec"`
	Status            DeploymentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeploymentList contains a list of Deployments
type DeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Deployment `json:"items"`
}

// Repository type metadata.
var (
	Deployment_Kind             = "Deployment"
	Deployment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Deployment_Kind}.String()
	Deployment_KindAPIVersion   = Deployment_Kind + "." + CRDGroupVersion.String()
	Deployment_GroupVersionKind = CRDGroupVersion.WithKind(Deployment_Kind)
)

func init() {
	SchemeBuilder.Register(&Deployment{}, &DeploymentList{})
}
