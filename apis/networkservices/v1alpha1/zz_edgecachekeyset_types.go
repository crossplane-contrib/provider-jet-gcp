/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EdgeCacheKeysetObservation struct {
}

type EdgeCacheKeysetParameters struct {

	// A human-readable description of the resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Set of label tags associated with the EdgeCache resource.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Name of the resource; provided by the client when the resource is created.
	// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]* which means the first character must be a letter,
	// and all following characters must be a dash, underscore, letter or digit.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// An ordered list of Ed25519 public keys to use for validating signed requests.
	// You must specify at least one (1) key, and may have up to three (3) keys.
	//
	// Ed25519 public keys are not secret, and only allow Google to validate a request was signed by your corresponding private key.
	// You should ensure that the private key is kept secret, and that only authorized users can add public keys to a keyset.
	// +kubebuilder:validation:Required
	PublicKey []PublicKeyParameters `json:"publicKey" tf:"public_key,omitempty"`
}

type PublicKeyObservation struct {
}

type PublicKeyParameters struct {

	// The ID of the public key. The ID must be 1-63 characters long, and comply with RFC1035.
	// The name must be 1-64 characters long, and match the regular expression [a-zA-Z][a-zA-Z0-9_-]*
	// which means the first character must be a letter, and all following characters must be a dash, underscore, letter or digit.
	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`

	// The base64-encoded value of the Ed25519 public key. The base64 encoding can be padded (44 bytes) or unpadded (43 bytes).
	// Representations or encodings of the public key other than this will be rejected with an error.
	// +kubebuilder:validation:Required
	ValueSecretRef v1.SecretKeySelector `json:"valueSecretRef" tf:"-"`
}

// EdgeCacheKeysetSpec defines the desired state of EdgeCacheKeyset
type EdgeCacheKeysetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EdgeCacheKeysetParameters `json:"forProvider"`
}

// EdgeCacheKeysetStatus defines the observed state of EdgeCacheKeyset.
type EdgeCacheKeysetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EdgeCacheKeysetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EdgeCacheKeyset is the Schema for the EdgeCacheKeysets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type EdgeCacheKeyset struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EdgeCacheKeysetSpec   `json:"spec"`
	Status            EdgeCacheKeysetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EdgeCacheKeysetList contains a list of EdgeCacheKeysets
type EdgeCacheKeysetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EdgeCacheKeyset `json:"items"`
}

// Repository type metadata.
var (
	EdgeCacheKeyset_Kind             = "EdgeCacheKeyset"
	EdgeCacheKeyset_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EdgeCacheKeyset_Kind}.String()
	EdgeCacheKeyset_KindAPIVersion   = EdgeCacheKeyset_Kind + "." + CRDGroupVersion.String()
	EdgeCacheKeyset_GroupVersionKind = CRDGroupVersion.WithKind(EdgeCacheKeyset_Kind)
)

func init() {
	SchemeBuilder.Register(&EdgeCacheKeyset{}, &EdgeCacheKeysetList{})
}
