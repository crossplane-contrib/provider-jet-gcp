/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomServiceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CustomServiceParameters struct {

	// Name used for UI elements listing this Service.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// An optional service ID to use. If not given, the server will generate a
	// service ID.
	// +kubebuilder:validation:Optional
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`

	// Configuration for how to query telemetry on a Service.
	// +kubebuilder:validation:Optional
	Telemetry []TelemetryParameters `json:"telemetry,omitempty" tf:"telemetry,omitempty"`
}

type TelemetryObservation struct {
}

type TelemetryParameters struct {

	// The full name of the resource that defines this service.
	// Formatted as described in
	// https://cloud.google.com/apis/design/resource_names.
	// +kubebuilder:validation:Optional
	ResourceName *string `json:"resourceName,omitempty" tf:"resource_name,omitempty"`
}

// CustomServiceSpec defines the desired state of CustomService
type CustomServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomServiceParameters `json:"forProvider"`
}

// CustomServiceStatus defines the observed state of CustomService.
type CustomServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CustomService is the Schema for the CustomServices API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type CustomService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CustomServiceSpec   `json:"spec"`
	Status            CustomServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomServiceList contains a list of CustomServices
type CustomServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomService `json:"items"`
}

// Repository type metadata.
var (
	CustomService_Kind             = "CustomService"
	CustomService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CustomService_Kind}.String()
	CustomService_KindAPIVersion   = CustomService_Kind + "." + CRDGroupVersion.String()
	CustomService_GroupVersionKind = CRDGroupVersion.WithKind(CustomService_Kind)
)

func init() {
	SchemeBuilder.Register(&CustomService{}, &CustomServiceList{})
}
