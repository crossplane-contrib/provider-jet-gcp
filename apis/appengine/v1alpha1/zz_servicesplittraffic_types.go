/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceSplitTrafficObservation struct {
}

type ServiceSplitTrafficParameters struct {

	// If set to true traffic will be migrated to this version.
	// +kubebuilder:validation:Optional
	MigrateTraffic *bool `json:"migrateTraffic,omitempty" tf:"migrate_traffic,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The name of the service these settings apply to.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`

	// Mapping that defines fractional HTTP traffic diversion to different versions within the service.
	// +kubebuilder:validation:Required
	Split []SplitParameters `json:"split" tf:"split,omitempty"`
}

type SplitObservation struct {
}

type SplitParameters struct {

	// Mapping from version IDs within the service to fractional (0.000, 1] allocations of traffic for that version. Each version can be specified only once, but some versions in the service may not have any traffic allocation. Services that have traffic allocated cannot be deleted until either the service is deleted or their traffic allocation is removed. Allocations must sum to 1. Up to two decimal place precision is supported for IP-based splits and up to three decimal places is supported for cookie-based splits.
	// +kubebuilder:validation:Required
	Allocations map[string]*string `json:"allocations" tf:"allocations,omitempty"`

	// Mechanism used to determine which version a request is sent to. The traffic selection algorithm will be stable for either type until allocations are changed. Possible values: ["UNSPECIFIED", "COOKIE", "IP", "RANDOM"]
	// +kubebuilder:validation:Optional
	ShardBy *string `json:"shardBy,omitempty" tf:"shard_by,omitempty"`
}

// ServiceSplitTrafficSpec defines the desired state of ServiceSplitTraffic
type ServiceSplitTrafficSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceSplitTrafficParameters `json:"forProvider"`
}

// ServiceSplitTrafficStatus defines the observed state of ServiceSplitTraffic.
type ServiceSplitTrafficStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceSplitTrafficObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceSplitTraffic is the Schema for the ServiceSplitTraffics API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type ServiceSplitTraffic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceSplitTrafficSpec   `json:"spec"`
	Status            ServiceSplitTrafficStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceSplitTrafficList contains a list of ServiceSplitTraffics
type ServiceSplitTrafficList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceSplitTraffic `json:"items"`
}

// Repository type metadata.
var (
	ServiceSplitTraffic_Kind             = "ServiceSplitTraffic"
	ServiceSplitTraffic_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceSplitTraffic_Kind}.String()
	ServiceSplitTraffic_KindAPIVersion   = ServiceSplitTraffic_Kind + "." + CRDGroupVersion.String()
	ServiceSplitTraffic_GroupVersionKind = CRDGroupVersion.WithKind(ServiceSplitTraffic_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceSplitTraffic{}, &ServiceSplitTrafficList{})
}
