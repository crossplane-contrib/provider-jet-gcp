/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AzureNodePoolAutoscalingObservation struct {
}

type AzureNodePoolAutoscalingParameters struct {

	// Maximum number of nodes in the node pool. Must be >= min_node_count.
	// +kubebuilder:validation:Required
	MaxNodeCount *float64 `json:"maxNodeCount" tf:"max_node_count,omitempty"`

	// Minimum number of nodes in the node pool. Must be >= 1 and <= max_node_count.
	// +kubebuilder:validation:Required
	MinNodeCount *float64 `json:"minNodeCount" tf:"min_node_count,omitempty"`
}

type AzureNodePoolConfigObservation struct {
}

type AzureNodePoolConfigParameters struct {

	// Optional. Configuration related to the root volume provisioned for each node pool machine. When unspecified, it defaults to a 32-GiB Azure Disk.
	// +kubebuilder:validation:Optional
	RootVolume []AzureNodePoolConfigRootVolumeParameters `json:"rootVolume,omitempty" tf:"root_volume,omitempty"`

	// SSH configuration for how to access the node pool machines.
	// +kubebuilder:validation:Required
	SSHConfig []AzureNodePoolConfigSSHConfigParameters `json:"sshConfig" tf:"ssh_config,omitempty"`

	// Optional. A set of tags to apply to all underlying Azure resources for this node pool. This currently only includes Virtual Machine Scale Sets. Specify at most 50 pairs containing alphanumerics, spaces, and symbols (.+-=_:@/). Keys can be up to 127 Unicode characters. Values can be up to 255 Unicode characters.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Optional. The Azure VM size name. Example: `Standard_DS2_v2`. See (/anthos/clusters/docs/azure/reference/supported-vms) for options. When unspecified, it defaults to `Standard_DS2_v2`.
	// +kubebuilder:validation:Optional
	VMSize *string `json:"vmSize,omitempty" tf:"vm_size,omitempty"`
}

type AzureNodePoolConfigRootVolumeObservation struct {
}

type AzureNodePoolConfigRootVolumeParameters struct {

	// Optional. The size of the disk, in GiBs. When unspecified, a default value is provided. See the specific reference in the parent resource.
	// +kubebuilder:validation:Optional
	SizeGib *float64 `json:"sizeGib,omitempty" tf:"size_gib,omitempty"`
}

type AzureNodePoolConfigSSHConfigObservation struct {
}

type AzureNodePoolConfigSSHConfigParameters struct {

	// The SSH public key data for VMs managed by Anthos. This accepts the authorized_keys file format used in OpenSSH according to the sshd(8) manual page.
	// +kubebuilder:validation:Required
	AuthorizedKey *string `json:"authorizedKey" tf:"authorized_key,omitempty"`
}

type AzureNodePoolMaxPodsConstraintObservation struct {
}

type AzureNodePoolMaxPodsConstraintParameters struct {

	// The maximum number of pods to schedule on a single node.
	// +kubebuilder:validation:Required
	MaxPodsPerNode *float64 `json:"maxPodsPerNode" tf:"max_pods_per_node,omitempty"`
}

type AzureNodePoolObservation struct {
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Reconciling *bool `json:"reconciling,omitempty" tf:"reconciling,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`

	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type AzureNodePoolParameters struct {

	// Optional. Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Keys can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
	// +kubebuilder:validation:Optional
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Autoscaler configuration for this node pool.
	// +kubebuilder:validation:Required
	Autoscaling []AzureNodePoolAutoscalingParameters `json:"autoscaling" tf:"autoscaling,omitempty"`

	// Optional. The Azure availability zone of the nodes in this nodepool. When unspecified, it defaults to `1`.
	// +kubebuilder:validation:Optional
	AzureAvailabilityZone *string `json:"azureAvailabilityZone,omitempty" tf:"azure_availability_zone,omitempty"`

	// The azureCluster for the resource
	// +kubebuilder:validation:Required
	Cluster *string `json:"cluster" tf:"cluster,omitempty"`

	// The node configuration of the node pool.
	// +kubebuilder:validation:Required
	Config []AzureNodePoolConfigParameters `json:"config" tf:"config,omitempty"`

	// The location for the resource
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The constraint on the maximum number of pods that can be run simultaneously on a node in the node pool.
	// +kubebuilder:validation:Required
	MaxPodsConstraint []AzureNodePoolMaxPodsConstraintParameters `json:"maxPodsConstraint" tf:"max_pods_constraint,omitempty"`

	// The name of this resource.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The project for the resource
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The ARM ID of the subnet where the node pool VMs run. Make sure it's a subnet under the virtual network in the cluster configuration.
	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`

	// The Kubernetes version (e.g. `1.19.10-gke.1000`) running on this node pool.
	// +kubebuilder:validation:Required
	Version *string `json:"version" tf:"version,omitempty"`
}

// AzureNodePoolSpec defines the desired state of AzureNodePool
type AzureNodePoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AzureNodePoolParameters `json:"forProvider"`
}

// AzureNodePoolStatus defines the observed state of AzureNodePool.
type AzureNodePoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AzureNodePoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AzureNodePool is the Schema for the AzureNodePools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type AzureNodePool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AzureNodePoolSpec   `json:"spec"`
	Status            AzureNodePoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AzureNodePoolList contains a list of AzureNodePools
type AzureNodePoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AzureNodePool `json:"items"`
}

// Repository type metadata.
var (
	AzureNodePool_Kind             = "AzureNodePool"
	AzureNodePool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AzureNodePool_Kind}.String()
	AzureNodePool_KindAPIVersion   = AzureNodePool_Kind + "." + CRDGroupVersion.String()
	AzureNodePool_GroupVersionKind = CRDGroupVersion.WithKind(AzureNodePool_Kind)
)

func init() {
	SchemeBuilder.Register(&AzureNodePool{}, &AzureNodePoolList{})
}
