/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AzureClientObservation struct {
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	UID *string `json:"uid,omitempty" tf:"uid,omitempty"`
}

type AzureClientParameters struct {

	// The Azure Active Directory Application ID.
	// +kubebuilder:validation:Required
	ApplicationID *string `json:"applicationId" tf:"application_id,omitempty"`

	// The location for the resource
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The name of this resource.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The project for the resource
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The Azure Active Directory Tenant ID.
	// +kubebuilder:validation:Required
	TenantID *string `json:"tenantId" tf:"tenant_id,omitempty"`
}

// AzureClientSpec defines the desired state of AzureClient
type AzureClientSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AzureClientParameters `json:"forProvider"`
}

// AzureClientStatus defines the observed state of AzureClient.
type AzureClientStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AzureClientObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AzureClient is the Schema for the AzureClients API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type AzureClient struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AzureClientSpec   `json:"spec"`
	Status            AzureClientStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AzureClientList contains a list of AzureClients
type AzureClientList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AzureClient `json:"items"`
}

// Repository type metadata.
var (
	AzureClient_Kind             = "AzureClient"
	AzureClient_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AzureClient_Kind}.String()
	AzureClient_KindAPIVersion   = AzureClient_Kind + "." + CRDGroupVersion.String()
	AzureClient_GroupVersionKind = CRDGroupVersion.WithKind(AzureClient_Kind)
)

func init() {
	SchemeBuilder.Register(&AzureClient{}, &AzureClientList{})
}
