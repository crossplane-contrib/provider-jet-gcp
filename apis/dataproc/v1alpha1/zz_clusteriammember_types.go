/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterIamMemberConditionObservation struct {
}

type ClusterIamMemberConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type ClusterIamMemberObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`
}

type ClusterIamMemberParameters struct {

	// +kubebuilder:validation:Required
	Cluster *string `json:"cluster" tf:"cluster,omitempty"`

	// +kubebuilder:validation:Optional
	Condition []ClusterIamMemberConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	Member *string `json:"member" tf:"member,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// ClusterIamMemberSpec defines the desired state of ClusterIamMember
type ClusterIamMemberSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterIamMemberParameters `json:"forProvider"`
}

// ClusterIamMemberStatus defines the observed state of ClusterIamMember.
type ClusterIamMemberStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterIamMemberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterIamMember is the Schema for the ClusterIamMembers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type ClusterIamMember struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterIamMemberSpec   `json:"spec"`
	Status            ClusterIamMemberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterIamMemberList contains a list of ClusterIamMembers
type ClusterIamMemberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterIamMember `json:"items"`
}

// Repository type metadata.
var (
	ClusterIamMember_Kind             = "ClusterIamMember"
	ClusterIamMember_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterIamMember_Kind}.String()
	ClusterIamMember_KindAPIVersion   = ClusterIamMember_Kind + "." + CRDGroupVersion.String()
	ClusterIamMember_GroupVersionKind = CRDGroupVersion.WithKind(ClusterIamMember_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterIamMember{}, &ClusterIamMemberList{})
}
