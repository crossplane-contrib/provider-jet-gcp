/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttestationObservation struct {
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`
}

type AttestationParameters struct {
}

type KeyRingImportJobObservation struct {
	Attestation []AttestationObservation `json:"attestation,omitempty" tf:"attestation,omitempty"`

	ExpireTime *string `json:"expireTime,omitempty" tf:"expire_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PublicKey []PublicKeyObservation `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type KeyRingImportJobParameters struct {

	// It must be unique within a KeyRing and match the regular expression [a-zA-Z0-9_-]{1,63}
	// +kubebuilder:validation:Required
	ImportJobID *string `json:"importJobId" tf:"import_job_id,omitempty"`

	// The wrapping method to be used for incoming key material. Possible values: ["RSA_OAEP_3072_SHA1_AES_256", "RSA_OAEP_4096_SHA1_AES_256"]
	// +kubebuilder:validation:Required
	ImportMethod *string `json:"importMethod" tf:"import_method,omitempty"`

	// The KeyRing that this import job belongs to.
	// Format: ''projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}''.
	// +kubebuilder:validation:Required
	KeyRing *string `json:"keyRing" tf:"key_ring,omitempty"`

	// The protection level of the ImportJob. This must match the protectionLevel of the
	// versionTemplate on the CryptoKey you attempt to import into. Possible values: ["SOFTWARE", "HSM", "EXTERNAL"]
	// +kubebuilder:validation:Required
	ProtectionLevel *string `json:"protectionLevel" tf:"protection_level,omitempty"`
}

type PublicKeyObservation struct {
	Pem *string `json:"pem,omitempty" tf:"pem,omitempty"`
}

type PublicKeyParameters struct {
}

// KeyRingImportJobSpec defines the desired state of KeyRingImportJob
type KeyRingImportJobSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KeyRingImportJobParameters `json:"forProvider"`
}

// KeyRingImportJobStatus defines the observed state of KeyRingImportJob.
type KeyRingImportJobStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KeyRingImportJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeyRingImportJob is the Schema for the KeyRingImportJobs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type KeyRingImportJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyRingImportJobSpec   `json:"spec"`
	Status            KeyRingImportJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyRingImportJobList contains a list of KeyRingImportJobs
type KeyRingImportJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyRingImportJob `json:"items"`
}

// Repository type metadata.
var (
	KeyRingImportJob_Kind             = "KeyRingImportJob"
	KeyRingImportJob_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KeyRingImportJob_Kind}.String()
	KeyRingImportJob_KindAPIVersion   = KeyRingImportJob_Kind + "." + CRDGroupVersion.String()
	KeyRingImportJob_GroupVersionKind = CRDGroupVersion.WithKind(KeyRingImportJob_Kind)
)

func init() {
	SchemeBuilder.Register(&KeyRingImportJob{}, &KeyRingImportJobList{})
}
