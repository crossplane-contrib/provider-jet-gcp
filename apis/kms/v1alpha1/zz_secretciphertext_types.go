/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretCiphertextObservation struct {
	Ciphertext *string `json:"ciphertext,omitempty" tf:"ciphertext,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SecretCiphertextParameters struct {

	// The additional authenticated data used for integrity checks during encryption and decryption.
	// +kubebuilder:validation:Optional
	AdditionalAuthenticatedDataSecretRef *v1.SecretKeySelector `json:"additionalAuthenticatedDataSecretRef,omitempty" tf:"-"`

	// The full name of the CryptoKey that will be used to encrypt the provided plaintext.
	// Format: ''projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}/cryptoKeys/{{cryptoKey}}''
	// +kubebuilder:validation:Required
	CryptoKey *string `json:"cryptoKey" tf:"crypto_key,omitempty"`

	// The plaintext to be encrypted.
	// +kubebuilder:validation:Required
	PlaintextSecretRef v1.SecretKeySelector `json:"plaintextSecretRef" tf:"-"`
}

// SecretCiphertextSpec defines the desired state of SecretCiphertext
type SecretCiphertextSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretCiphertextParameters `json:"forProvider"`
}

// SecretCiphertextStatus defines the observed state of SecretCiphertext.
type SecretCiphertextStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretCiphertextObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecretCiphertext is the Schema for the SecretCiphertexts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type SecretCiphertext struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecretCiphertextSpec   `json:"spec"`
	Status            SecretCiphertextStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretCiphertextList contains a list of SecretCiphertexts
type SecretCiphertextList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretCiphertext `json:"items"`
}

// Repository type metadata.
var (
	SecretCiphertext_Kind             = "SecretCiphertext"
	SecretCiphertext_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretCiphertext_Kind}.String()
	SecretCiphertext_KindAPIVersion   = SecretCiphertext_Kind + "." + CRDGroupVersion.String()
	SecretCiphertext_GroupVersionKind = CRDGroupVersion.WithKind(SecretCiphertext_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretCiphertext{}, &SecretCiphertextList{})
}
