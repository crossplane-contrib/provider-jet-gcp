/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CryptoKeyIamMemberConditionObservation struct {
}

type CryptoKeyIamMemberConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type CryptoKeyIamMemberObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CryptoKeyIamMemberParameters struct {

	// +kubebuilder:validation:Optional
	Condition []CryptoKeyIamMemberConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Required
	CryptoKeyID *string `json:"cryptoKeyId" tf:"crypto_key_id,omitempty"`

	// +kubebuilder:validation:Required
	Member *string `json:"member" tf:"member,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// CryptoKeyIamMemberSpec defines the desired state of CryptoKeyIamMember
type CryptoKeyIamMemberSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CryptoKeyIamMemberParameters `json:"forProvider"`
}

// CryptoKeyIamMemberStatus defines the observed state of CryptoKeyIamMember.
type CryptoKeyIamMemberStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CryptoKeyIamMemberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CryptoKeyIamMember is the Schema for the CryptoKeyIamMembers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type CryptoKeyIamMember struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CryptoKeyIamMemberSpec   `json:"spec"`
	Status            CryptoKeyIamMemberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CryptoKeyIamMemberList contains a list of CryptoKeyIamMembers
type CryptoKeyIamMemberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CryptoKeyIamMember `json:"items"`
}

// Repository type metadata.
var (
	CryptoKeyIamMember_Kind             = "CryptoKeyIamMember"
	CryptoKeyIamMember_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CryptoKeyIamMember_Kind}.String()
	CryptoKeyIamMember_KindAPIVersion   = CryptoKeyIamMember_Kind + "." + CRDGroupVersion.String()
	CryptoKeyIamMember_GroupVersionKind = CRDGroupVersion.WithKind(CryptoKeyIamMember_Kind)
)

func init() {
	SchemeBuilder.Register(&CryptoKeyIamMember{}, &CryptoKeyIamMemberList{})
}
