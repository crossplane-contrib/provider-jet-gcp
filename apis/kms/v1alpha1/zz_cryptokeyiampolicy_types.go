/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CryptoKeyIAMPolicyObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CryptoKeyIAMPolicyParameters struct {

	// +kubebuilder:validation:Required
	CryptoKeyID *string `json:"cryptoKeyId" tf:"crypto_key_id,omitempty"`

	// +kubebuilder:validation:Required
	PolicyData *string `json:"policyData" tf:"policy_data,omitempty"`
}

// CryptoKeyIAMPolicySpec defines the desired state of CryptoKeyIAMPolicy
type CryptoKeyIAMPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CryptoKeyIAMPolicyParameters `json:"forProvider"`
}

// CryptoKeyIAMPolicyStatus defines the observed state of CryptoKeyIAMPolicy.
type CryptoKeyIAMPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CryptoKeyIAMPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CryptoKeyIAMPolicy is the Schema for the CryptoKeyIAMPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcpjet}
type CryptoKeyIAMPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CryptoKeyIAMPolicySpec   `json:"spec"`
	Status            CryptoKeyIAMPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CryptoKeyIAMPolicyList contains a list of CryptoKeyIAMPolicys
type CryptoKeyIAMPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CryptoKeyIAMPolicy `json:"items"`
}

// Repository type metadata.
var (
	CryptoKeyIAMPolicy_Kind             = "CryptoKeyIAMPolicy"
	CryptoKeyIAMPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CryptoKeyIAMPolicy_Kind}.String()
	CryptoKeyIAMPolicy_KindAPIVersion   = CryptoKeyIAMPolicy_Kind + "." + CRDGroupVersion.String()
	CryptoKeyIAMPolicy_GroupVersionKind = CRDGroupVersion.WithKind(CryptoKeyIAMPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&CryptoKeyIAMPolicy{}, &CryptoKeyIAMPolicyList{})
}
